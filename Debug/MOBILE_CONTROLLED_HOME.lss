
MOBILE_CONTROLLED_HOME.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000055ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000262  00800060  000055ae  00005642  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008002c2  008002c2  000058a4  2**0
                  ALLOC
  3 .stab         00004314  00000000  00000000  000058a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000121f  00000000  00000000  00009bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000add7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000af37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000b0c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000d10b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000f190  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000f310  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000f5d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fe60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f5 e5       	ldi	r31, 0x55	; 85
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3c       	cpi	r26, 0xCA	; 202
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 71 14 	call	0x28e2	; 0x28e2 <main>
      8a:	0c 94 d5 2a 	jmp	0x55aa	; 0x55aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9e 2a 	jmp	0x553c	; 0x553c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e9       	ldi	r26, 0x9E	; 158
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ba 2a 	jmp	0x5574	; 0x5574 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 aa 2a 	jmp	0x5554	; 0x5554 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c6 2a 	jmp	0x558c	; 0x558c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 aa 2a 	jmp	0x5554	; 0x5554 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c6 2a 	jmp	0x558c	; 0x558c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9e 2a 	jmp	0x553c	; 0x553c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e9       	ldi	r24, 0x9E	; 158
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ba 2a 	jmp	0x5574	; 0x5574 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a6 2a 	jmp	0x554c	; 0x554c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e9       	ldi	r22, 0x9E	; 158
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c2 2a 	jmp	0x5584	; 0x5584 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 aa 2a 	jmp	0x5554	; 0x5554 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c6 2a 	jmp	0x558c	; 0x558c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 aa 2a 	jmp	0x5554	; 0x5554 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c6 2a 	jmp	0x558c	; 0x558c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 aa 2a 	jmp	0x5554	; 0x5554 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c6 2a 	jmp	0x558c	; 0x558c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ae 2a 	jmp	0x555c	; 0x555c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ca 2a 	jmp	0x5594	; 0x5594 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <MADC_voidInit>:

#include "../include/MCAL/DIO/DIO_interface.h"


void MADC_voidInit (void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62

	//1-Select VREF= AVCC
    SET_BIT(ADMUX,ADMUX_REFS0);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
    CLR_BIT(ADMUX,ADMUX_REFS1);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8f 77       	andi	r24, 0x7F	; 127
     cc0:	8c 93       	st	X, r24
	//2-Right Adjustment
    CLR_BIT(ADMUX,ADMUX_ADLAR);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
	//3-Disable Auto Trigger
    CLR_BIT(ADCSRA,ADCSRA_ADATE);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7b       	andi	r24, 0xBF	; 191
     cdc:	8c 93       	st	X, r24
	//4-SELECT CLK/64
    CLR_BIT(ADCSRA,ADCSRA_ADPS0);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8e 7f       	andi	r24, 0xFE	; 254
     cea:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADCSRA_ADPS1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADCSRA_ADPS2);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
	//5-Enable ADC
    SET_BIT(ADCSRA,ADCSRA_ADEN);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24

}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <MADC_u16GetDigitalValue>:



u16 MADC_u16GetDigitalValue(u8 A_u8Channel)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <MADC_u16GetDigitalValue+0x6>
     d22:	0f 92       	push	r0
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	8b 83       	std	Y+3, r24	; 0x03
u16 local_u16Digaitalvalue=0;
     d2a:	1a 82       	std	Y+2, r1	; 0x02
     d2c:	19 82       	std	Y+1, r1	; 0x01
if(A_u8Channel<32)
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	80 32       	cpi	r24, 0x20	; 32
     d32:	70 f5       	brcc	.+92     	; 0xd90 <MADC_u16GetDigitalValue+0x74>
{
	//Clear The Channel 5-bits
    ADMUX&=	ADC_CHANNEL_MASK;
     d34:	a7 e2       	ldi	r26, 0x27	; 39
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e7 e2       	ldi	r30, 0x27	; 39
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	80 7e       	andi	r24, 0xE0	; 224
     d40:	8c 93       	st	X, r24
    //Select Channel
    ADMUX|=A_u8Channel;
     d42:	a7 e2       	ldi	r26, 0x27	; 39
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e7 e2       	ldi	r30, 0x27	; 39
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	90 81       	ld	r25, Z
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	89 2b       	or	r24, r25
     d50:	8c 93       	st	X, r24
    //Start Conversion
    SET_BIT(ADCSRA,ADCSRA_ADSC);
     d52:	a6 e2       	ldi	r26, 0x26	; 38
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e6 e2       	ldi	r30, 0x26	; 38
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	80 64       	ori	r24, 0x40	; 64
     d5e:	8c 93       	st	X, r24
    //Polling on ADC Complete Flag
    while(GET_BIT(ADCSRA,ADCSRA_ADIF)==0);
     d60:	e6 e2       	ldi	r30, 0x26	; 38
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	82 95       	swap	r24
     d68:	8f 70       	andi	r24, 0x0F	; 15
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	81 70       	andi	r24, 0x01	; 1
     d70:	90 70       	andi	r25, 0x00	; 0
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	a9 f3       	breq	.-22     	; 0xd60 <MADC_u16GetDigitalValue+0x44>
    //Clear INTERRUPT Flag
    SET_BIT(ADCSRA,ADCSRA_ADIF);
     d76:	a6 e2       	ldi	r26, 0x26	; 38
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e6 e2       	ldi	r30, 0x26	; 38
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	80 61       	ori	r24, 0x10	; 16
     d82:	8c 93       	st	X, r24
    //Read Conversion Values
    local_u16Digaitalvalue=ADCLH;
     d84:	e4 e2       	ldi	r30, 0x24	; 36
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	91 81       	ldd	r25, Z+1	; 0x01
     d8c:	9a 83       	std	Y+2, r25	; 0x02
     d8e:	89 83       	std	Y+1, r24	; 0x01
}
//RETURN THE READEN VALUE
return local_u16Digaitalvalue;
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <MDIO_voidInit>:
#include "../include/MCAL/DIO/DIO_interface.h"
#include "../include/MCAL/DIO/DIO_private.h"
#include "../include/MCAL/DIO/DIO_configuration.h"

void MDIO_voidInit(void)
{
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG=CONC_BIT(PORTA_PIN7_DIRECTION,PORTA_PIN6_DIRECTION
     da8:	ea e3       	ldi	r30, 0x3A	; 58
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	8c e7       	ldi	r24, 0x7C	; 124
     dae:	80 83       	st	Z, r24
			         ,PORTA_PIN5_DIRECTION,PORTA_PIN4_DIRECTION
			         ,PORTA_PIN3_DIRECTION,PORTA_PIN2_DIRECTION
			         ,PORTA_PIN1_DIRECTION,PORTA_PIN0_DIRECTION);

	DDRB_REG=CONC_BIT(PORTB_PIN7_DIRECTION,PORTB_PIN6_DIRECTION
     db0:	e7 e3       	ldi	r30, 0x37	; 55
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	8f e0       	ldi	r24, 0x0F	; 15
     db6:	80 83       	st	Z, r24
			         ,PORTB_PIN5_DIRECTION,PORTB_PIN4_DIRECTION
			         ,PORTB_PIN3_DIRECTION,PORTB_PIN2_DIRECTION
			         ,PORTB_PIN1_DIRECTION,PORTB_PIN0_DIRECTION);

	DDRC_REG=CONC_BIT(PORTC_PIN7_DIRECTION,PORTC_PIN6_DIRECTION
     db8:	e4 e3       	ldi	r30, 0x34	; 52
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	80 83       	st	Z, r24
			         ,PORTC_PIN5_DIRECTION,PORTC_PIN4_DIRECTION
			         ,PORTC_PIN3_DIRECTION,PORTC_PIN2_DIRECTION
			         ,PORTC_PIN1_DIRECTION,PORTC_PIN0_DIRECTION);

	DDRD_REG=CONC_BIT(PORTD_PIN7_DIRECTION,PORTD_PIN6_DIRECTION
     dc0:	e1 e3       	ldi	r30, 0x31	; 49
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	8f ef       	ldi	r24, 0xFF	; 255
     dc6:	80 83       	st	Z, r24
			         ,PORTD_PIN5_DIRECTION,PORTD_PIN4_DIRECTION
			         ,PORTD_PIN3_DIRECTION,PORTD_PIN2_DIRECTION
			         ,PORTD_PIN1_DIRECTION,PORTD_PIN0_DIRECTION);

	PORTA_REG=CONC_BIT(PORTA_PIN7_VALUE,PORTA_PIN6_VALUE
     dc8:	eb e3       	ldi	r30, 0x3B	; 59
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 e8       	ldi	r24, 0x80	; 128
     dce:	80 83       	st	Z, r24
			          ,PORTA_PIN5_VALUE,PORTA_PIN4_VALUE
		 	          ,PORTA_PIN3_VALUE,PORTA_PIN2_VALUE
			          ,PORTA_PIN1_VALUE,PORTA_PIN0_VALUE);

	PORTB_REG=CONC_BIT(PORTB_PIN7_VALUE,PORTB_PIN6_VALUE
     dd0:	e8 e3       	ldi	r30, 0x38	; 56
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	80 83       	st	Z, r24
			          ,PORTB_PIN5_VALUE,PORTB_PIN4_VALUE
		 	          ,PORTB_PIN3_VALUE,PORTB_PIN2_VALUE
			          ,PORTB_PIN1_VALUE,PORTB_PIN0_VALUE);

	PORTC_REG=CONC_BIT(PORTC_PIN7_VALUE,PORTC_PIN6_VALUE
     dd8:	e5 e3       	ldi	r30, 0x35	; 53
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	10 82       	st	Z, r1
			          ,PORTC_PIN5_VALUE,PORTC_PIN4_VALUE
		 	          ,PORTC_PIN3_VALUE,PORTC_PIN2_VALUE
			          ,PORTC_PIN1_VALUE,PORTC_PIN0_VALUE);

	PORTD_REG=CONC_BIT(PORTD_PIN7_VALUE,PORTD_PIN6_VALUE
     dde:	e2 e3       	ldi	r30, 0x32	; 50
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	10 82       	st	Z, r1
			          ,PORTD_PIN5_VALUE,PORTD_PIN4_VALUE
		 	          ,PORTD_PIN3_VALUE,PORTD_PIN2_VALUE
			          ,PORTD_PIN1_VALUE,PORTD_PIN0_VALUE);
}
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <MDIO_voidSetPinDirection>:
/*PortId Options:- DIO_PORTA - DIO_PORTB - DIO_PORTC - DIO_PORTD*/
/*PinId Options:-Pin0......................................Pin7*/
/*Direction OPtions:- DIO_INPUT - DIO_OUTPUT */
void MDIO_voidSetPinDirection(u8 A_u8PortId,u8 A_u8PinId,u8 A_u8Direction)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	2d 97       	sbiw	r28, 0x0d	; 13
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	89 83       	std	Y+1, r24	; 0x01
     e00:	6a 83       	std	Y+2, r22	; 0x02
     e02:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortId)
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	3d 87       	std	Y+13, r19	; 0x0d
     e0c:	2c 87       	std	Y+12, r18	; 0x0c
     e0e:	8c 85       	ldd	r24, Y+12	; 0x0c
     e10:	9d 85       	ldd	r25, Y+13	; 0x0d
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	91 05       	cpc	r25, r1
     e16:	09 f4       	brne	.+2      	; 0xe1a <MDIO_voidSetPinDirection+0x30>
     e18:	4f c0       	rjmp	.+158    	; 0xeb8 <MDIO_voidSetPinDirection+0xce>
     e1a:	2c 85       	ldd	r18, Y+12	; 0x0c
     e1c:	3d 85       	ldd	r19, Y+13	; 0x0d
     e1e:	22 30       	cpi	r18, 0x02	; 2
     e20:	31 05       	cpc	r19, r1
     e22:	2c f4       	brge	.+10     	; 0xe2e <MDIO_voidSetPinDirection+0x44>
     e24:	8c 85       	ldd	r24, Y+12	; 0x0c
     e26:	9d 85       	ldd	r25, Y+13	; 0x0d
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	71 f0       	breq	.+28     	; 0xe48 <MDIO_voidSetPinDirection+0x5e>
     e2c:	ec c0       	rjmp	.+472    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
     e2e:	2c 85       	ldd	r18, Y+12	; 0x0c
     e30:	3d 85       	ldd	r19, Y+13	; 0x0d
     e32:	22 30       	cpi	r18, 0x02	; 2
     e34:	31 05       	cpc	r19, r1
     e36:	09 f4       	brne	.+2      	; 0xe3a <MDIO_voidSetPinDirection+0x50>
     e38:	77 c0       	rjmp	.+238    	; 0xf28 <MDIO_voidSetPinDirection+0x13e>
     e3a:	8c 85       	ldd	r24, Y+12	; 0x0c
     e3c:	9d 85       	ldd	r25, Y+13	; 0x0d
     e3e:	83 30       	cpi	r24, 0x03	; 3
     e40:	91 05       	cpc	r25, r1
     e42:	09 f4       	brne	.+2      	; 0xe46 <MDIO_voidSetPinDirection+0x5c>
     e44:	a9 c0       	rjmp	.+338    	; 0xf98 <MDIO_voidSetPinDirection+0x1ae>
     e46:	df c0       	rjmp	.+446    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
	{
	case DIO_PORTA:
		{
			switch(A_u8Direction)
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	3b 87       	std	Y+11, r19	; 0x0b
     e50:	2a 87       	std	Y+10, r18	; 0x0a
     e52:	8a 85       	ldd	r24, Y+10	; 0x0a
     e54:	9b 85       	ldd	r25, Y+11	; 0x0b
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	31 f0       	breq	.+12     	; 0xe66 <MDIO_voidSetPinDirection+0x7c>
     e5a:	2a 85       	ldd	r18, Y+10	; 0x0a
     e5c:	3b 85       	ldd	r19, Y+11	; 0x0b
     e5e:	21 30       	cpi	r18, 0x01	; 1
     e60:	31 05       	cpc	r19, r1
     e62:	b1 f0       	breq	.+44     	; 0xe90 <MDIO_voidSetPinDirection+0xa6>
     e64:	d0 c0       	rjmp	.+416    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
			{
		case DIO_INPUT : CLR_BIT(DDRA_REG,A_u8PinId); break;
     e66:	aa e3       	ldi	r26, 0x3A	; 58
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	ea e3       	ldi	r30, 0x3A	; 58
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <MDIO_voidSetPinDirection+0x9a>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <MDIO_voidSetPinDirection+0x96>
     e88:	80 95       	com	r24
     e8a:	84 23       	and	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	bb c0       	rjmp	.+374    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		case DIO_OUTPUT: SET_BIT(DDRA_REG,A_u8PinId); break;
     e90:	aa e3       	ldi	r26, 0x3A	; 58
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ea e3       	ldi	r30, 0x3A	; 58
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <MDIO_voidSetPinDirection+0xc4>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <MDIO_voidSetPinDirection+0xc0>
     eb2:	84 2b       	or	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	a7 c0       	rjmp	.+334    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
			}
			}
		break;
	case DIO_PORTB:
	{
		switch(A_u8Direction)
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	39 87       	std	Y+9, r19	; 0x09
     ec0:	28 87       	std	Y+8, r18	; 0x08
     ec2:	88 85       	ldd	r24, Y+8	; 0x08
     ec4:	99 85       	ldd	r25, Y+9	; 0x09
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	31 f0       	breq	.+12     	; 0xed6 <MDIO_voidSetPinDirection+0xec>
     eca:	28 85       	ldd	r18, Y+8	; 0x08
     ecc:	39 85       	ldd	r19, Y+9	; 0x09
     ece:	21 30       	cpi	r18, 0x01	; 1
     ed0:	31 05       	cpc	r19, r1
     ed2:	b1 f0       	breq	.+44     	; 0xf00 <MDIO_voidSetPinDirection+0x116>
     ed4:	98 c0       	rjmp	.+304    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		{
		case DIO_INPUT : CLR_BIT(DDRB_REG,A_u8PinId); break;
     ed6:	a7 e3       	ldi	r26, 0x37	; 55
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e7 e3       	ldi	r30, 0x37	; 55
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <MDIO_voidSetPinDirection+0x10a>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <MDIO_voidSetPinDirection+0x106>
     ef8:	80 95       	com	r24
     efa:	84 23       	and	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	83 c0       	rjmp	.+262    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		case DIO_OUTPUT: SET_BIT(DDRB_REG,A_u8PinId); break;
     f00:	a7 e3       	ldi	r26, 0x37	; 55
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e7 e3       	ldi	r30, 0x37	; 55
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <MDIO_voidSetPinDirection+0x134>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <MDIO_voidSetPinDirection+0x130>
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	6f c0       	rjmp	.+222    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		}
		}
	break;
	case DIO_PORTC:
	{
		switch(A_u8Direction)
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	3f 83       	std	Y+7, r19	; 0x07
     f30:	2e 83       	std	Y+6, r18	; 0x06
     f32:	8e 81       	ldd	r24, Y+6	; 0x06
     f34:	9f 81       	ldd	r25, Y+7	; 0x07
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	31 f0       	breq	.+12     	; 0xf46 <MDIO_voidSetPinDirection+0x15c>
     f3a:	2e 81       	ldd	r18, Y+6	; 0x06
     f3c:	3f 81       	ldd	r19, Y+7	; 0x07
     f3e:	21 30       	cpi	r18, 0x01	; 1
     f40:	31 05       	cpc	r19, r1
     f42:	b1 f0       	breq	.+44     	; 0xf70 <MDIO_voidSetPinDirection+0x186>
     f44:	60 c0       	rjmp	.+192    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		{
		case DIO_INPUT : CLR_BIT(DDRC_REG,A_u8PinId); break;
     f46:	a4 e3       	ldi	r26, 0x34	; 52
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e4 e3       	ldi	r30, 0x34	; 52
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <MDIO_voidSetPinDirection+0x17a>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <MDIO_voidSetPinDirection+0x176>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	4b c0       	rjmp	.+150    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		case DIO_OUTPUT: SET_BIT(DDRC_REG,A_u8PinId); break;
     f70:	a4 e3       	ldi	r26, 0x34	; 52
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e4 e3       	ldi	r30, 0x34	; 52
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <MDIO_voidSetPinDirection+0x1a4>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <MDIO_voidSetPinDirection+0x1a0>
     f92:	84 2b       	or	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	37 c0       	rjmp	.+110    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		}
		}
	break;
	case DIO_PORTD:
	{
		switch(A_u8Direction)
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	3d 83       	std	Y+5, r19	; 0x05
     fa0:	2c 83       	std	Y+4, r18	; 0x04
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	9d 81       	ldd	r25, Y+5	; 0x05
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	31 f0       	breq	.+12     	; 0xfb6 <MDIO_voidSetPinDirection+0x1cc>
     faa:	2c 81       	ldd	r18, Y+4	; 0x04
     fac:	3d 81       	ldd	r19, Y+5	; 0x05
     fae:	21 30       	cpi	r18, 0x01	; 1
     fb0:	31 05       	cpc	r19, r1
     fb2:	b1 f0       	breq	.+44     	; 0xfe0 <MDIO_voidSetPinDirection+0x1f6>
     fb4:	28 c0       	rjmp	.+80     	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		{
		case DIO_INPUT : CLR_BIT(DDRD_REG,A_u8PinId); break;
     fb6:	a1 e3       	ldi	r26, 0x31	; 49
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e1 e3       	ldi	r30, 0x31	; 49
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <MDIO_voidSetPinDirection+0x1ea>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <MDIO_voidSetPinDirection+0x1e6>
     fd8:	80 95       	com	r24
     fda:	84 23       	and	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	13 c0       	rjmp	.+38     	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		case DIO_OUTPUT: SET_BIT(DDRD_REG,A_u8PinId); break;
     fe0:	a1 e3       	ldi	r26, 0x31	; 49
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e1 e3       	ldi	r30, 0x31	; 49
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <MDIO_voidSetPinDirection+0x214>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <MDIO_voidSetPinDirection+0x210>
    1002:	84 2b       	or	r24, r20
    1004:	8c 93       	st	X, r24
		}
		}
	break;
	}

}
    1006:	2d 96       	adiw	r28, 0x0d	; 13
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <MDIO_voidSetPinValue>:
/*PortId Options:- DIO_PORTA - DIO_PORTB - DIO_PORTC - DIO_PORTD*/
/*PinId Options:-Pin0......................................Pin7*/
/*Value OPtions:- DIO_HIGH - DIO_LOW - DIO_PULLUP */
void MDIO_voidSetPinValue(u8 A_u8PortId,u8 A_u8PinId,u8 A_u8Value)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	2d 97       	sbiw	r28, 0x0d	; 13
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	6a 83       	std	Y+2, r22	; 0x02
    1030:	4b 83       	std	Y+3, r20	; 0x03
 switch(A_u8PortId)
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	3d 87       	std	Y+13, r19	; 0x0d
    103a:	2c 87       	std	Y+12, r18	; 0x0c
    103c:	8c 85       	ldd	r24, Y+12	; 0x0c
    103e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	91 05       	cpc	r25, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <MDIO_voidSetPinValue+0x30>
    1046:	4f c0       	rjmp	.+158    	; 0x10e6 <MDIO_voidSetPinValue+0xce>
    1048:	2c 85       	ldd	r18, Y+12	; 0x0c
    104a:	3d 85       	ldd	r19, Y+13	; 0x0d
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	2c f4       	brge	.+10     	; 0x105c <MDIO_voidSetPinValue+0x44>
    1052:	8c 85       	ldd	r24, Y+12	; 0x0c
    1054:	9d 85       	ldd	r25, Y+13	; 0x0d
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	71 f0       	breq	.+28     	; 0x1076 <MDIO_voidSetPinValue+0x5e>
    105a:	eb c0       	rjmp	.+470    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
    105c:	2c 85       	ldd	r18, Y+12	; 0x0c
    105e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1060:	22 30       	cpi	r18, 0x02	; 2
    1062:	31 05       	cpc	r19, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <MDIO_voidSetPinValue+0x50>
    1066:	77 c0       	rjmp	.+238    	; 0x1156 <MDIO_voidSetPinValue+0x13e>
    1068:	8c 85       	ldd	r24, Y+12	; 0x0c
    106a:	9d 85       	ldd	r25, Y+13	; 0x0d
    106c:	83 30       	cpi	r24, 0x03	; 3
    106e:	91 05       	cpc	r25, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <MDIO_voidSetPinValue+0x5c>
    1072:	a9 c0       	rjmp	.+338    	; 0x11c6 <MDIO_voidSetPinValue+0x1ae>
    1074:	de c0       	rjmp	.+444    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
 {
 case DIO_PORTA:
 {
	 switch(A_u8Value)
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	3b 87       	std	Y+11, r19	; 0x0b
    107e:	2a 87       	std	Y+10, r18	; 0x0a
    1080:	8a 85       	ldd	r24, Y+10	; 0x0a
    1082:	9b 85       	ldd	r25, Y+11	; 0x0b
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	d1 f0       	breq	.+52     	; 0x10bc <MDIO_voidSetPinValue+0xa4>
    1088:	2a 85       	ldd	r18, Y+10	; 0x0a
    108a:	3b 85       	ldd	r19, Y+11	; 0x0b
    108c:	21 30       	cpi	r18, 0x01	; 1
    108e:	31 05       	cpc	r19, r1
    1090:	09 f0       	breq	.+2      	; 0x1094 <MDIO_voidSetPinValue+0x7c>
    1092:	cf c0       	rjmp	.+414    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 {
	 case DIO_HIGH: SET_BIT(PORTA_REG,A_u8PinId); break;
    1094:	ab e3       	ldi	r26, 0x3B	; 59
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	eb e3       	ldi	r30, 0x3B	; 59
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <MDIO_voidSetPinValue+0x9a>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <MDIO_voidSetPinValue+0x96>
    10b6:	84 2b       	or	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	bb c0       	rjmp	.+374    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 case DIO_LOW : CLR_BIT(PORTA_REG,A_u8PinId); break;
    10bc:	ab e3       	ldi	r26, 0x3B	; 59
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	eb e3       	ldi	r30, 0x3B	; 59
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <MDIO_voidSetPinValue+0xc2>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <MDIO_voidSetPinValue+0xbe>
    10de:	80 95       	com	r24
    10e0:	84 23       	and	r24, r20
    10e2:	8c 93       	st	X, r24
    10e4:	a6 c0       	rjmp	.+332    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 }
 }
 break;
 case DIO_PORTB:
 {
	 switch(A_u8Value)
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	39 87       	std	Y+9, r19	; 0x09
    10ee:	28 87       	std	Y+8, r18	; 0x08
    10f0:	88 85       	ldd	r24, Y+8	; 0x08
    10f2:	99 85       	ldd	r25, Y+9	; 0x09
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	d1 f0       	breq	.+52     	; 0x112c <MDIO_voidSetPinValue+0x114>
    10f8:	28 85       	ldd	r18, Y+8	; 0x08
    10fa:	39 85       	ldd	r19, Y+9	; 0x09
    10fc:	21 30       	cpi	r18, 0x01	; 1
    10fe:	31 05       	cpc	r19, r1
    1100:	09 f0       	breq	.+2      	; 0x1104 <MDIO_voidSetPinValue+0xec>
    1102:	97 c0       	rjmp	.+302    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 {
	 case DIO_HIGH : SET_BIT(PORTB_REG,A_u8PinId); break;
    1104:	a8 e3       	ldi	r26, 0x38	; 56
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e8 e3       	ldi	r30, 0x38	; 56
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <MDIO_voidSetPinValue+0x10a>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <MDIO_voidSetPinValue+0x106>
    1126:	84 2b       	or	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	83 c0       	rjmp	.+262    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 case DIO_LOW  : CLR_BIT(PORTB_REG,A_u8PinId); break;
    112c:	a8 e3       	ldi	r26, 0x38	; 56
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e8 e3       	ldi	r30, 0x38	; 56
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <MDIO_voidSetPinValue+0x132>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <MDIO_voidSetPinValue+0x12e>
    114e:	80 95       	com	r24
    1150:	84 23       	and	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	6e c0       	rjmp	.+220    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 }
 }
 break;
 case DIO_PORTC:
 {
	 switch(A_u8Value)
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	3f 83       	std	Y+7, r19	; 0x07
    115e:	2e 83       	std	Y+6, r18	; 0x06
    1160:	8e 81       	ldd	r24, Y+6	; 0x06
    1162:	9f 81       	ldd	r25, Y+7	; 0x07
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	d1 f0       	breq	.+52     	; 0x119c <MDIO_voidSetPinValue+0x184>
    1168:	2e 81       	ldd	r18, Y+6	; 0x06
    116a:	3f 81       	ldd	r19, Y+7	; 0x07
    116c:	21 30       	cpi	r18, 0x01	; 1
    116e:	31 05       	cpc	r19, r1
    1170:	09 f0       	breq	.+2      	; 0x1174 <MDIO_voidSetPinValue+0x15c>
    1172:	5f c0       	rjmp	.+190    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 {
	 case DIO_HIGH: SET_BIT(PORTC_REG,A_u8PinId); break;
    1174:	a5 e3       	ldi	r26, 0x35	; 53
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e5 e3       	ldi	r30, 0x35	; 53
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 2e       	mov	r0, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <MDIO_voidSetPinValue+0x17a>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	0a 94       	dec	r0
    1194:	e2 f7       	brpl	.-8      	; 0x118e <MDIO_voidSetPinValue+0x176>
    1196:	84 2b       	or	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	4b c0       	rjmp	.+150    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 case DIO_LOW : CLR_BIT(PORTC_REG,A_u8PinId); break;
    119c:	a5 e3       	ldi	r26, 0x35	; 53
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e5 e3       	ldi	r30, 0x35	; 53
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <MDIO_voidSetPinValue+0x1a2>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <MDIO_voidSetPinValue+0x19e>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	36 c0       	rjmp	.+108    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 }
	 }
 break;
 case DIO_PORTD:
 {
	 switch(A_u8Value)
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3d 83       	std	Y+5, r19	; 0x05
    11ce:	2c 83       	std	Y+4, r18	; 0x04
    11d0:	8c 81       	ldd	r24, Y+4	; 0x04
    11d2:	9d 81       	ldd	r25, Y+5	; 0x05
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	c9 f0       	breq	.+50     	; 0x120a <MDIO_voidSetPinValue+0x1f2>
    11d8:	2c 81       	ldd	r18, Y+4	; 0x04
    11da:	3d 81       	ldd	r19, Y+5	; 0x05
    11dc:	21 30       	cpi	r18, 0x01	; 1
    11de:	31 05       	cpc	r19, r1
    11e0:	41 f5       	brne	.+80     	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 {
	 case DIO_HIGH: SET_BIT(PORTD_REG,A_u8PinId); break;
    11e2:	a2 e3       	ldi	r26, 0x32	; 50
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e2 e3       	ldi	r30, 0x32	; 50
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <MDIO_voidSetPinValue+0x1e8>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <MDIO_voidSetPinValue+0x1e4>
    1204:	84 2b       	or	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	14 c0       	rjmp	.+40     	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 case DIO_LOW : CLR_BIT(PORTD_REG,A_u8PinId); break;
    120a:	a2 e3       	ldi	r26, 0x32	; 50
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e2 e3       	ldi	r30, 0x32	; 50
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <MDIO_voidSetPinValue+0x210>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <MDIO_voidSetPinValue+0x20c>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
	 }
	 }
 break;
}
}
    1232:	2d 96       	adiw	r28, 0x0d	; 13
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <MDIO_voidSetPortDirection>:
/*PortId Options:- DIO_PORTA - DIO_PORTB - DIO_PORTC - DIO_PORTD*/
/*Direction OPtions:- DIO_INPUT - DIO_OUTPUT */
void MDIO_voidSetPortDirection(u8 A_u8PortId,u8 A_u8Direction)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <MDIO_voidSetPortDirection+0x6>
    124a:	00 d0       	rcall	.+0      	; 0x124c <MDIO_voidSetPortDirection+0x8>
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	89 83       	std	Y+1, r24	; 0x01
    1252:	6a 83       	std	Y+2, r22	; 0x02
switch(A_u8PortId)
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	3c 83       	std	Y+4, r19	; 0x04
    125c:	2b 83       	std	Y+3, r18	; 0x03
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	91 05       	cpc	r25, r1
    1266:	d1 f0       	breq	.+52     	; 0x129c <MDIO_voidSetPortDirection+0x58>
    1268:	2b 81       	ldd	r18, Y+3	; 0x03
    126a:	3c 81       	ldd	r19, Y+4	; 0x04
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	2c f4       	brge	.+10     	; 0x127c <MDIO_voidSetPortDirection+0x38>
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	61 f0       	breq	.+24     	; 0x1292 <MDIO_voidSetPortDirection+0x4e>
    127a:	1e c0       	rjmp	.+60     	; 0x12b8 <MDIO_voidSetPortDirection+0x74>
    127c:	2b 81       	ldd	r18, Y+3	; 0x03
    127e:	3c 81       	ldd	r19, Y+4	; 0x04
    1280:	22 30       	cpi	r18, 0x02	; 2
    1282:	31 05       	cpc	r19, r1
    1284:	81 f0       	breq	.+32     	; 0x12a6 <MDIO_voidSetPortDirection+0x62>
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	83 30       	cpi	r24, 0x03	; 3
    128c:	91 05       	cpc	r25, r1
    128e:	81 f0       	breq	.+32     	; 0x12b0 <MDIO_voidSetPortDirection+0x6c>
    1290:	13 c0       	rjmp	.+38     	; 0x12b8 <MDIO_voidSetPortDirection+0x74>
{
case DIO_PORTA: DDRA_REG=A_u8Direction;
    1292:	ea e3       	ldi	r30, 0x3A	; 58
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	80 83       	st	Z, r24
    129a:	0e c0       	rjmp	.+28     	; 0x12b8 <MDIO_voidSetPortDirection+0x74>
break;
case DIO_PORTB: DDRB_REG=A_u8Direction;
    129c:	e7 e3       	ldi	r30, 0x37	; 55
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	80 83       	st	Z, r24
    12a4:	09 c0       	rjmp	.+18     	; 0x12b8 <MDIO_voidSetPortDirection+0x74>
break;
case DIO_PORTC: DDRC_REG=A_u8Direction;
    12a6:	e4 e3       	ldi	r30, 0x34	; 52
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	80 83       	st	Z, r24
    12ae:	04 c0       	rjmp	.+8      	; 0x12b8 <MDIO_voidSetPortDirection+0x74>
break;
case DIO_PORTD: DDRD_REG=A_u8Direction;
    12b0:	e1 e3       	ldi	r30, 0x31	; 49
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	80 83       	st	Z, r24
break;
}
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <MDIO_voidSetPortValue>:
/*PortId Options:- DIO_PORTA - DIO_PORTB - DIO_PORTC - DIO_PORTD*/
/*Value OPtions:- DIO_HIGH - DIO_LOW */
void MDIO_voidSetPortValue(u8 A_u8PortId,u8 A_u8Value)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <MDIO_voidSetPortValue+0x6>
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <MDIO_voidSetPortValue+0x8>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	6a 83       	std	Y+2, r22	; 0x02
switch(A_u8PortId)
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	3c 83       	std	Y+4, r19	; 0x04
    12de:	2b 83       	std	Y+3, r18	; 0x03
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	91 05       	cpc	r25, r1
    12e8:	d1 f0       	breq	.+52     	; 0x131e <MDIO_voidSetPortValue+0x58>
    12ea:	2b 81       	ldd	r18, Y+3	; 0x03
    12ec:	3c 81       	ldd	r19, Y+4	; 0x04
    12ee:	22 30       	cpi	r18, 0x02	; 2
    12f0:	31 05       	cpc	r19, r1
    12f2:	2c f4       	brge	.+10     	; 0x12fe <MDIO_voidSetPortValue+0x38>
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	61 f0       	breq	.+24     	; 0x1314 <MDIO_voidSetPortValue+0x4e>
    12fc:	1e c0       	rjmp	.+60     	; 0x133a <MDIO_voidSetPortValue+0x74>
    12fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1300:	3c 81       	ldd	r19, Y+4	; 0x04
    1302:	22 30       	cpi	r18, 0x02	; 2
    1304:	31 05       	cpc	r19, r1
    1306:	81 f0       	breq	.+32     	; 0x1328 <MDIO_voidSetPortValue+0x62>
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	83 30       	cpi	r24, 0x03	; 3
    130e:	91 05       	cpc	r25, r1
    1310:	81 f0       	breq	.+32     	; 0x1332 <MDIO_voidSetPortValue+0x6c>
    1312:	13 c0       	rjmp	.+38     	; 0x133a <MDIO_voidSetPortValue+0x74>
{
case DIO_PORTA: PORTA_REG=A_u8Value;
    1314:	eb e3       	ldi	r30, 0x3B	; 59
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	80 83       	st	Z, r24
    131c:	0e c0       	rjmp	.+28     	; 0x133a <MDIO_voidSetPortValue+0x74>
break;
case DIO_PORTB: PORTB_REG=A_u8Value;
    131e:	e8 e3       	ldi	r30, 0x38	; 56
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	80 83       	st	Z, r24
    1326:	09 c0       	rjmp	.+18     	; 0x133a <MDIO_voidSetPortValue+0x74>
break;
case DIO_PORTC: PORTC_REG=A_u8Value;
    1328:	e5 e3       	ldi	r30, 0x35	; 53
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	80 83       	st	Z, r24
    1330:	04 c0       	rjmp	.+8      	; 0x133a <MDIO_voidSetPortValue+0x74>
break;
case DIO_PORTD: PORTD_REG=A_u8Value;
    1332:	e2 e3       	ldi	r30, 0x32	; 50
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	80 83       	st	Z, r24
break;
}
}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <MDIO_voidGetPinValue>:
/*PortId Options:- DIO_PORTA - DIO_PORTB - DIO_PORTC - DIO_PORTD*/
/*PinId Options:-Pin0......................................Pin7*/
u8 MDIO_voidGetPinValue(u8 A_u8PortId,u8 A_u8PinId)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	27 97       	sbiw	r28, 0x07	; 7
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	8a 83       	std	Y+2, r24	; 0x02
    135e:	6b 83       	std	Y+3, r22	; 0x03
u8 local_u8PinValue=255;
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8PortId)
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	3e 83       	std	Y+6, r19	; 0x06
    136c:	2d 83       	std	Y+5, r18	; 0x05
    136e:	4d 81       	ldd	r20, Y+5	; 0x05
    1370:	5e 81       	ldd	r21, Y+6	; 0x06
    1372:	41 30       	cpi	r20, 0x01	; 1
    1374:	51 05       	cpc	r21, r1
    1376:	59 f1       	breq	.+86     	; 0x13ce <MDIO_voidGetPinValue+0x86>
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	82 30       	cpi	r24, 0x02	; 2
    137e:	91 05       	cpc	r25, r1
    1380:	34 f4       	brge	.+12     	; 0x138e <MDIO_voidGetPinValue+0x46>
    1382:	2d 81       	ldd	r18, Y+5	; 0x05
    1384:	3e 81       	ldd	r19, Y+6	; 0x06
    1386:	21 15       	cp	r18, r1
    1388:	31 05       	cpc	r19, r1
    138a:	69 f0       	breq	.+26     	; 0x13a6 <MDIO_voidGetPinValue+0x5e>
    138c:	5c c0       	rjmp	.+184    	; 0x1446 <MDIO_voidGetPinValue+0xfe>
    138e:	4d 81       	ldd	r20, Y+5	; 0x05
    1390:	5e 81       	ldd	r21, Y+6	; 0x06
    1392:	42 30       	cpi	r20, 0x02	; 2
    1394:	51 05       	cpc	r21, r1
    1396:	79 f1       	breq	.+94     	; 0x13f6 <MDIO_voidGetPinValue+0xae>
    1398:	8d 81       	ldd	r24, Y+5	; 0x05
    139a:	9e 81       	ldd	r25, Y+6	; 0x06
    139c:	83 30       	cpi	r24, 0x03	; 3
    139e:	91 05       	cpc	r25, r1
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <MDIO_voidGetPinValue+0x5c>
    13a2:	3d c0       	rjmp	.+122    	; 0x141e <MDIO_voidGetPinValue+0xd6>
    13a4:	50 c0       	rjmp	.+160    	; 0x1446 <MDIO_voidGetPinValue+0xfe>
	{
case DIO_PORTA:
{
local_u8PinValue=GET_BIT(PINA_REG,A_u8PinId);
    13a6:	e9 e3       	ldi	r30, 0x39	; 57
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	a9 01       	movw	r20, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <MDIO_voidGetPinValue+0x76>
    13ba:	55 95       	asr	r21
    13bc:	47 95       	ror	r20
    13be:	8a 95       	dec	r24
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <MDIO_voidGetPinValue+0x72>
    13c2:	ca 01       	movw	r24, r20
    13c4:	81 70       	andi	r24, 0x01	; 1
    13c6:	89 83       	std	Y+1, r24	; 0x01

return local_u8PinValue ;
    13c8:	59 81       	ldd	r21, Y+1	; 0x01
    13ca:	5c 83       	std	Y+4, r21	; 0x04
    13cc:	3d c0       	rjmp	.+122    	; 0x1448 <MDIO_voidGetPinValue+0x100>
        break;
}
break;
case DIO_PORTB:
{
local_u8PinValue=GET_BIT(PINB_REG,A_u8PinId);
    13ce:	e6 e3       	ldi	r30, 0x36	; 54
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	88 2f       	mov	r24, r24
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	a9 01       	movw	r20, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <MDIO_voidGetPinValue+0x9e>
    13e2:	55 95       	asr	r21
    13e4:	47 95       	ror	r20
    13e6:	8a 95       	dec	r24
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <MDIO_voidGetPinValue+0x9a>
    13ea:	ca 01       	movw	r24, r20
    13ec:	81 70       	andi	r24, 0x01	; 1
    13ee:	89 83       	std	Y+1, r24	; 0x01

return local_u8PinValue;
    13f0:	59 81       	ldd	r21, Y+1	; 0x01
    13f2:	5c 83       	std	Y+4, r21	; 0x04
    13f4:	29 c0       	rjmp	.+82     	; 0x1448 <MDIO_voidGetPinValue+0x100>
        break;
}
break;
case DIO_PORTC:
{
local_u8PinValue=GET_BIT(PINC_REG,A_u8PinId);
    13f6:	e3 e3       	ldi	r30, 0x33	; 51
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	88 2f       	mov	r24, r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	a9 01       	movw	r20, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <MDIO_voidGetPinValue+0xc6>
    140a:	55 95       	asr	r21
    140c:	47 95       	ror	r20
    140e:	8a 95       	dec	r24
    1410:	e2 f7       	brpl	.-8      	; 0x140a <MDIO_voidGetPinValue+0xc2>
    1412:	ca 01       	movw	r24, r20
    1414:	81 70       	andi	r24, 0x01	; 1
    1416:	89 83       	std	Y+1, r24	; 0x01

return local_u8PinValue;
    1418:	59 81       	ldd	r21, Y+1	; 0x01
    141a:	5c 83       	std	Y+4, r21	; 0x04
    141c:	15 c0       	rjmp	.+42     	; 0x1448 <MDIO_voidGetPinValue+0x100>
        break;
}
break;
case DIO_PORTD:
{
local_u8PinValue=GET_BIT(PIND_REG,A_u8PinId);
    141e:	e0 e3       	ldi	r30, 0x30	; 48
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a9 01       	movw	r20, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <MDIO_voidGetPinValue+0xee>
    1432:	55 95       	asr	r21
    1434:	47 95       	ror	r20
    1436:	8a 95       	dec	r24
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <MDIO_voidGetPinValue+0xea>
    143a:	ca 01       	movw	r24, r20
    143c:	81 70       	andi	r24, 0x01	; 1
    143e:	89 83       	std	Y+1, r24	; 0x01

return local_u8PinValue;
    1440:	59 81       	ldd	r21, Y+1	; 0x01
    1442:	5c 83       	std	Y+4, r21	; 0x04
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <MDIO_voidGetPinValue+0x100>
    1446:	02 c0       	rjmp	.+4      	; 0x144c <MDIO_voidGetPinValue+0x104>
        break;
}
	}
}
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	8f 83       	std	Y+7, r24	; 0x07
    144c:	8f 81       	ldd	r24, Y+7	; 0x07
    144e:	27 96       	adiw	r28, 0x07	; 7
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <MDIO_voidTogglePinValue>:
void MDIO_voidTogglePinValue (u8 A_u8PortId, u8 A_u8PinId)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <MDIO_voidTogglePinValue+0x6>
    1466:	00 d0       	rcall	.+0      	; 0x1468 <MDIO_voidTogglePinValue+0x8>
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId)
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3c 83       	std	Y+4, r19	; 0x04
    1478:	2b 83       	std	Y+3, r18	; 0x03
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	9c 81       	ldd	r25, Y+4	; 0x04
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	91 05       	cpc	r25, r1
    1482:	49 f1       	breq	.+82     	; 0x14d6 <MDIO_voidTogglePinValue+0x76>
    1484:	2b 81       	ldd	r18, Y+3	; 0x03
    1486:	3c 81       	ldd	r19, Y+4	; 0x04
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	2c f4       	brge	.+10     	; 0x1498 <MDIO_voidTogglePinValue+0x38>
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	61 f0       	breq	.+24     	; 0x14ae <MDIO_voidTogglePinValue+0x4e>
    1496:	5a c0       	rjmp	.+180    	; 0x154c <MDIO_voidTogglePinValue+0xec>
    1498:	2b 81       	ldd	r18, Y+3	; 0x03
    149a:	3c 81       	ldd	r19, Y+4	; 0x04
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	71 f1       	breq	.+92     	; 0x14fe <MDIO_voidTogglePinValue+0x9e>
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	83 30       	cpi	r24, 0x03	; 3
    14a8:	91 05       	cpc	r25, r1
    14aa:	e9 f1       	breq	.+122    	; 0x1526 <MDIO_voidTogglePinValue+0xc6>
    14ac:	4f c0       	rjmp	.+158    	; 0x154c <MDIO_voidTogglePinValue+0xec>
	{
	case DIO_PORTA: TOGGLE_BIT(PORTA_REG,A_u8PinId); break;
    14ae:	ab e3       	ldi	r26, 0x3B	; 59
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	eb e3       	ldi	r30, 0x3B	; 59
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <MDIO_voidTogglePinValue+0x6c>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <MDIO_voidTogglePinValue+0x68>
    14d0:	84 27       	eor	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	3b c0       	rjmp	.+118    	; 0x154c <MDIO_voidTogglePinValue+0xec>
	case DIO_PORTB: TOGGLE_BIT(PORTB_REG,A_u8PinId); break;
    14d6:	a8 e3       	ldi	r26, 0x38	; 56
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e8 e3       	ldi	r30, 0x38	; 56
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <MDIO_voidTogglePinValue+0x94>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <MDIO_voidTogglePinValue+0x90>
    14f8:	84 27       	eor	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	27 c0       	rjmp	.+78     	; 0x154c <MDIO_voidTogglePinValue+0xec>
	case DIO_PORTC: TOGGLE_BIT(PORTC_REG,A_u8PinId); break;
    14fe:	a5 e3       	ldi	r26, 0x35	; 53
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e5 e3       	ldi	r30, 0x35	; 53
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <MDIO_voidTogglePinValue+0xbc>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <MDIO_voidTogglePinValue+0xb8>
    1520:	84 27       	eor	r24, r20
    1522:	8c 93       	st	X, r24
    1524:	13 c0       	rjmp	.+38     	; 0x154c <MDIO_voidTogglePinValue+0xec>
	case DIO_PORTD: TOGGLE_BIT(PORTD_REG,A_u8PinId); break;
    1526:	a2 e3       	ldi	r26, 0x32	; 50
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e2 e3       	ldi	r30, 0x32	; 50
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	48 2f       	mov	r20, r24
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 2e       	mov	r0, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <MDIO_voidTogglePinValue+0xe4>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	0a 94       	dec	r0
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <MDIO_voidTogglePinValue+0xe0>
    1548:	84 27       	eor	r24, r20
    154a:	8c 93       	st	X, r24
	}
}
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <MEXTI_voidConfig>:
void(*EXTI0_CALLBACK) (void)=NULL;
void(*EXTI1_CALLBACK) (void)=NULL;
void(*EXTI2_CALLBACK) (void)=NULL;

void MEXTI_voidConfig(u8 A_u8EXTI, u8 A_u8SenseMode)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	00 d0       	rcall	.+0      	; 0x1560 <MEXTI_voidConfig+0x6>
    1560:	00 d0       	rcall	.+0      	; 0x1562 <MEXTI_voidConfig+0x8>
    1562:	00 d0       	rcall	.+0      	; 0x1564 <MEXTI_voidConfig+0xa>
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8EXTI)
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	3e 83       	std	Y+6, r19	; 0x06
    1574:	2d 83       	std	Y+5, r18	; 0x05
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	9e 81       	ldd	r25, Y+6	; 0x06
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	91 05       	cpc	r25, r1
    157e:	d1 f0       	breq	.+52     	; 0x15b4 <MEXTI_voidConfig+0x5a>
    1580:	2d 81       	ldd	r18, Y+5	; 0x05
    1582:	3e 81       	ldd	r19, Y+6	; 0x06
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	61 f1       	breq	.+88     	; 0x15e2 <MEXTI_voidConfig+0x88>
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	09 f0       	breq	.+2      	; 0x1594 <MEXTI_voidConfig+0x3a>
    1592:	45 c0       	rjmp	.+138    	; 0x161e <MEXTI_voidConfig+0xc4>
	{
	case EXTI0:   MCUCR&=~(SENSE_MODE_MASK<<EXTI0_SENSE_BIT);
    1594:	a5 e5       	ldi	r26, 0x55	; 85
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e5 e5       	ldi	r30, 0x55	; 85
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8c 7f       	andi	r24, 0xFC	; 252
    15a0:	8c 93       	st	X, r24
	              MCUCR|=(A_u8SenseMode<<EXTI0_SENSE_BIT);
    15a2:	a5 e5       	ldi	r26, 0x55	; 85
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e5 e5       	ldi	r30, 0x55	; 85
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	90 81       	ld	r25, Z
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	89 2b       	or	r24, r25
    15b0:	8c 93       	st	X, r24
    15b2:	35 c0       	rjmp	.+106    	; 0x161e <MEXTI_voidConfig+0xc4>
	              break;

	case EXTI1:   MCUCR&=~(SENSE_MODE_MASK<<EXTI1_SENSE_BIT);
    15b4:	a5 e5       	ldi	r26, 0x55	; 85
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e5 e5       	ldi	r30, 0x55	; 85
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	83 7f       	andi	r24, 0xF3	; 243
    15c0:	8c 93       	st	X, r24
	              MCUCR|=(A_u8SenseMode<<EXTI1_SENSE_BIT);
    15c2:	a5 e5       	ldi	r26, 0x55	; 85
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e5 e5       	ldi	r30, 0x55	; 85
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	28 2f       	mov	r18, r24
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	82 2b       	or	r24, r18
    15de:	8c 93       	st	X, r24
    15e0:	1e c0       	rjmp	.+60     	; 0x161e <MEXTI_voidConfig+0xc4>
	              break;

	case EXTI2:
		switch(A_u8SenseMode)
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	3c 83       	std	Y+4, r19	; 0x04
    15ea:	2b 83       	std	Y+3, r18	; 0x03
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	9c 81       	ldd	r25, Y+4	; 0x04
    15f0:	82 30       	cpi	r24, 0x02	; 2
    15f2:	91 05       	cpc	r25, r1
    15f4:	69 f0       	breq	.+26     	; 0x1610 <MEXTI_voidConfig+0xb6>
    15f6:	2b 81       	ldd	r18, Y+3	; 0x03
    15f8:	3c 81       	ldd	r19, Y+4	; 0x04
    15fa:	23 30       	cpi	r18, 0x03	; 3
    15fc:	31 05       	cpc	r19, r1
    15fe:	79 f4       	brne	.+30     	; 0x161e <MEXTI_voidConfig+0xc4>
	{
		case RISING_EDGE:  SET_BIT(MCUCSR,EXTI2_SENSE_BIT);  break;
    1600:	a4 e5       	ldi	r26, 0x54	; 84
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e4 e5       	ldi	r30, 0x54	; 84
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	80 64       	ori	r24, 0x40	; 64
    160c:	8c 93       	st	X, r24
    160e:	07 c0       	rjmp	.+14     	; 0x161e <MEXTI_voidConfig+0xc4>
		case FALLING_EDGE: CLR_BIT(MCUCSR,EXTI2_SENSE_BIT);  break;
    1610:	a4 e5       	ldi	r26, 0x54	; 84
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e4 e5       	ldi	r30, 0x54	; 84
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	8f 7b       	andi	r24, 0xBF	; 191
    161c:	8c 93       	st	X, r24
	}


	}
}
    161e:	26 96       	adiw	r28, 0x06	; 6
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <MEXTI_voidEnable>:
void MEXTI_voidEnable(u8 A_u8EXTI)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <MEXTI_voidEnable+0x6>
    1636:	0f 92       	push	r0
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8EXTI)
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3b 83       	std	Y+3, r19	; 0x03
    1646:	2a 83       	std	Y+2, r18	; 0x02
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	9b 81       	ldd	r25, Y+3	; 0x03
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	89 f0       	breq	.+34     	; 0x1674 <MEXTI_voidEnable+0x44>
    1652:	2a 81       	ldd	r18, Y+2	; 0x02
    1654:	3b 81       	ldd	r19, Y+3	; 0x03
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	a1 f0       	breq	.+40     	; 0x1684 <MEXTI_voidEnable+0x54>
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	9b 81       	ldd	r25, Y+3	; 0x03
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	b9 f4       	brne	.+46     	; 0x1692 <MEXTI_voidEnable+0x62>
	{
	case EXTI0:   SET_BIT(MCUCR,EXTI0_ENABLE_BIT);
    1664:	a5 e5       	ldi	r26, 0x55	; 85
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e5 e5       	ldi	r30, 0x55	; 85
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	81 60       	ori	r24, 0x01	; 1
    1670:	8c 93       	st	X, r24
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <MEXTI_voidEnable+0x62>
	              break;

	case EXTI1:   SET_BIT(MCUCR,EXTI1_ENABLE_BIT);
    1674:	a5 e5       	ldi	r26, 0x55	; 85
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e5 e5       	ldi	r30, 0x55	; 85
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	84 60       	ori	r24, 0x04	; 4
    1680:	8c 93       	st	X, r24
    1682:	07 c0       	rjmp	.+14     	; 0x1692 <MEXTI_voidEnable+0x62>
                  break;

	case EXTI2:   SET_BIT(MCUCSR,EXTI2_ENABLE_BIT);
    1684:	a4 e5       	ldi	r26, 0x54	; 84
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e4 e5       	ldi	r30, 0x54	; 84
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	80 64       	ori	r24, 0x40	; 64
    1690:	8c 93       	st	X, r24
			      break;
    }
}
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <MEXTI_voidDisable>:
void MEXTI_voidDisable(u8 A_u8EXTI)
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <MEXTI_voidDisable+0x6>
    16a4:	0f 92       	push	r0
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8EXTI)
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	3b 83       	std	Y+3, r19	; 0x03
    16b4:	2a 83       	std	Y+2, r18	; 0x02
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	91 05       	cpc	r25, r1
    16be:	89 f0       	breq	.+34     	; 0x16e2 <MEXTI_voidDisable+0x44>
    16c0:	2a 81       	ldd	r18, Y+2	; 0x02
    16c2:	3b 81       	ldd	r19, Y+3	; 0x03
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	a1 f0       	breq	.+40     	; 0x16f2 <MEXTI_voidDisable+0x54>
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	9b 81       	ldd	r25, Y+3	; 0x03
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	b9 f4       	brne	.+46     	; 0x1700 <MEXTI_voidDisable+0x62>
	{
	case EXTI0:   CLR_BIT(MCUCR,EXTI0_DISABLE_BIT);
    16d2:	a5 e5       	ldi	r26, 0x55	; 85
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e5 e5       	ldi	r30, 0x55	; 85
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8e 7f       	andi	r24, 0xFE	; 254
    16de:	8c 93       	st	X, r24
    16e0:	0f c0       	rjmp	.+30     	; 0x1700 <MEXTI_voidDisable+0x62>
	              break;

	case EXTI1:   CLR_BIT(MCUCR,EXTI1_DISABLE_BIT);
    16e2:	a5 e5       	ldi	r26, 0x55	; 85
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e5 e5       	ldi	r30, 0x55	; 85
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8b 7f       	andi	r24, 0xFB	; 251
    16ee:	8c 93       	st	X, r24
    16f0:	07 c0       	rjmp	.+14     	; 0x1700 <MEXTI_voidDisable+0x62>
                  break;

	case EXTI2:   CLR_BIT(MCUCSR,EXTI2_DISABLE_BIT);
    16f2:	a4 e5       	ldi	r26, 0x54	; 84
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e4 e5       	ldi	r30, 0x54	; 84
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	8f 7b       	andi	r24, 0xBF	; 191
    16fe:	8c 93       	st	X, r24
			      break;
    }
}
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <HEXTI_voidSetCallBack>:

void HEXTI_voidSetCallBack(u8 A_u8EXTI, void (*PtrToFunc) (void))
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	00 d0       	rcall	.+0      	; 0x1712 <HEXTI_voidSetCallBack+0x6>
    1712:	00 d0       	rcall	.+0      	; 0x1714 <HEXTI_voidSetCallBack+0x8>
    1714:	0f 92       	push	r0
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	7b 83       	std	Y+3, r23	; 0x03
    171e:	6a 83       	std	Y+2, r22	; 0x02
	if(PtrToFunc!=NULL)
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	9b 81       	ldd	r25, Y+3	; 0x03
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	39 f1       	breq	.+78     	; 0x1776 <HEXTI_voidSetCallBack+0x6a>
	{
	switch(A_u8EXTI)
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	3d 83       	std	Y+5, r19	; 0x05
    1730:	2c 83       	std	Y+4, r18	; 0x04
    1732:	8c 81       	ldd	r24, Y+4	; 0x04
    1734:	9d 81       	ldd	r25, Y+5	; 0x05
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	91 05       	cpc	r25, r1
    173a:	81 f0       	breq	.+32     	; 0x175c <HEXTI_voidSetCallBack+0x50>
    173c:	2c 81       	ldd	r18, Y+4	; 0x04
    173e:	3d 81       	ldd	r19, Y+5	; 0x05
    1740:	22 30       	cpi	r18, 0x02	; 2
    1742:	31 05       	cpc	r19, r1
    1744:	91 f0       	breq	.+36     	; 0x176a <HEXTI_voidSetCallBack+0x5e>
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	9d 81       	ldd	r25, Y+5	; 0x05
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	a1 f4       	brne	.+40     	; 0x1776 <HEXTI_voidSetCallBack+0x6a>
	{
	case EXTI0:   EXTI0_CALLBACK=PtrToFunc;
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	9b 81       	ldd	r25, Y+3	; 0x03
    1752:	90 93 c3 02 	sts	0x02C3, r25
    1756:	80 93 c2 02 	sts	0x02C2, r24
    175a:	0d c0       	rjmp	.+26     	; 0x1776 <HEXTI_voidSetCallBack+0x6a>
	              break;

	case EXTI1:   EXTI1_CALLBACK=PtrToFunc;
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	9b 81       	ldd	r25, Y+3	; 0x03
    1760:	90 93 c5 02 	sts	0x02C5, r25
    1764:	80 93 c4 02 	sts	0x02C4, r24
    1768:	06 c0       	rjmp	.+12     	; 0x1776 <HEXTI_voidSetCallBack+0x6a>
                  break;

	case EXTI2:   EXTI2_CALLBACK=PtrToFunc;
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	9b 81       	ldd	r25, Y+3	; 0x03
    176e:	90 93 c7 02 	sts	0x02C7, r25
    1772:	80 93 c6 02 	sts	0x02C6, r24
			      break;
    }
	}
}
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <__vector1>:



void __vector1(void) __attribute((signal));
void __vector1(void)
{
    1786:	1f 92       	push	r1
    1788:	0f 92       	push	r0
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	0f 92       	push	r0
    178e:	11 24       	eor	r1, r1
    1790:	2f 93       	push	r18
    1792:	3f 93       	push	r19
    1794:	4f 93       	push	r20
    1796:	5f 93       	push	r21
    1798:	6f 93       	push	r22
    179a:	7f 93       	push	r23
    179c:	8f 93       	push	r24
    179e:	9f 93       	push	r25
    17a0:	af 93       	push	r26
    17a2:	bf 93       	push	r27
    17a4:	ef 93       	push	r30
    17a6:	ff 93       	push	r31
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_CALLBACK!=NULL)
    17b0:	80 91 c2 02 	lds	r24, 0x02C2
    17b4:	90 91 c3 02 	lds	r25, 0x02C3
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	29 f0       	breq	.+10     	; 0x17c6 <__vector1+0x40>
	{
		EXTI0_CALLBACK();
    17bc:	e0 91 c2 02 	lds	r30, 0x02C2
    17c0:	f0 91 c3 02 	lds	r31, 0x02C3
    17c4:	09 95       	icall
	}
}
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	ff 91       	pop	r31
    17cc:	ef 91       	pop	r30
    17ce:	bf 91       	pop	r27
    17d0:	af 91       	pop	r26
    17d2:	9f 91       	pop	r25
    17d4:	8f 91       	pop	r24
    17d6:	7f 91       	pop	r23
    17d8:	6f 91       	pop	r22
    17da:	5f 91       	pop	r21
    17dc:	4f 91       	pop	r20
    17de:	3f 91       	pop	r19
    17e0:	2f 91       	pop	r18
    17e2:	0f 90       	pop	r0
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	0f 90       	pop	r0
    17e8:	1f 90       	pop	r1
    17ea:	18 95       	reti

000017ec <__vector2>:

void __vector2(void) __attribute((signal));
void __vector2(void)
{
    17ec:	1f 92       	push	r1
    17ee:	0f 92       	push	r0
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	0f 92       	push	r0
    17f4:	11 24       	eor	r1, r1
    17f6:	2f 93       	push	r18
    17f8:	3f 93       	push	r19
    17fa:	4f 93       	push	r20
    17fc:	5f 93       	push	r21
    17fe:	6f 93       	push	r22
    1800:	7f 93       	push	r23
    1802:	8f 93       	push	r24
    1804:	9f 93       	push	r25
    1806:	af 93       	push	r26
    1808:	bf 93       	push	r27
    180a:	ef 93       	push	r30
    180c:	ff 93       	push	r31
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
	if(EXTI1_CALLBACK!=NULL)
    1816:	80 91 c4 02 	lds	r24, 0x02C4
    181a:	90 91 c5 02 	lds	r25, 0x02C5
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	29 f0       	breq	.+10     	; 0x182c <__vector2+0x40>
	{
		EXTI1_CALLBACK();
    1822:	e0 91 c4 02 	lds	r30, 0x02C4
    1826:	f0 91 c5 02 	lds	r31, 0x02C5
    182a:	09 95       	icall
	}
}
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	ff 91       	pop	r31
    1832:	ef 91       	pop	r30
    1834:	bf 91       	pop	r27
    1836:	af 91       	pop	r26
    1838:	9f 91       	pop	r25
    183a:	8f 91       	pop	r24
    183c:	7f 91       	pop	r23
    183e:	6f 91       	pop	r22
    1840:	5f 91       	pop	r21
    1842:	4f 91       	pop	r20
    1844:	3f 91       	pop	r19
    1846:	2f 91       	pop	r18
    1848:	0f 90       	pop	r0
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	0f 90       	pop	r0
    184e:	1f 90       	pop	r1
    1850:	18 95       	reti

00001852 <__vector3>:

void __vector3(void) __attribute((signal));
void __vector3(void)
{
    1852:	1f 92       	push	r1
    1854:	0f 92       	push	r0
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	0f 92       	push	r0
    185a:	11 24       	eor	r1, r1
    185c:	2f 93       	push	r18
    185e:	3f 93       	push	r19
    1860:	4f 93       	push	r20
    1862:	5f 93       	push	r21
    1864:	6f 93       	push	r22
    1866:	7f 93       	push	r23
    1868:	8f 93       	push	r24
    186a:	9f 93       	push	r25
    186c:	af 93       	push	r26
    186e:	bf 93       	push	r27
    1870:	ef 93       	push	r30
    1872:	ff 93       	push	r31
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI2_CALLBACK!=NULL)
    187c:	80 91 c6 02 	lds	r24, 0x02C6
    1880:	90 91 c7 02 	lds	r25, 0x02C7
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	29 f0       	breq	.+10     	; 0x1892 <__vector3+0x40>
	{
		EXTI2_CALLBACK();
    1888:	e0 91 c6 02 	lds	r30, 0x02C6
    188c:	f0 91 c7 02 	lds	r31, 0x02C7
    1890:	09 95       	icall
	}
}
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	ff 91       	pop	r31
    1898:	ef 91       	pop	r30
    189a:	bf 91       	pop	r27
    189c:	af 91       	pop	r26
    189e:	9f 91       	pop	r25
    18a0:	8f 91       	pop	r24
    18a2:	7f 91       	pop	r23
    18a4:	6f 91       	pop	r22
    18a6:	5f 91       	pop	r21
    18a8:	4f 91       	pop	r20
    18aa:	3f 91       	pop	r19
    18ac:	2f 91       	pop	r18
    18ae:	0f 90       	pop	r0
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	0f 90       	pop	r0
    18b4:	1f 90       	pop	r1
    18b6:	18 95       	reti

000018b8 <MGI_voidEnable>:
#include "../include/MCAL/GI/GI_interface.h"
#include "../include/MCAL/GI/GI_private.h"
#include "../include/MCAL/GI/GI_configuration.h"

void MGI_voidEnable(void)
{
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    18c0:	af e5       	ldi	r26, 0x5F	; 95
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	ef e5       	ldi	r30, 0x5F	; 95
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	80 68       	ori	r24, 0x80	; 128
    18cc:	8c 93       	st	X, r24
}
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <MGI_voidDisable>:

void MGI_voidDisable(void)
{
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    18dc:	af e5       	ldi	r26, 0x5F	; 95
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	ef e5       	ldi	r30, 0x5F	; 95
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	8f 77       	andi	r24, 0x7F	; 127
    18e8:	8c 93       	st	X, r24
}
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <HKEYPAD_u8KeyPressed>:
u8 static global_u8SArrOfRows[ROW_NUMBER]= KEYPAD_ROWS;
u8 static global_u8SArrOfColumns[COLUMN_NUMBER]= KEYPAD_COLUMNS;


u8 HKEYPAD_u8KeyPressed(void)
{
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	63 97       	sbiw	r28, 0x13	; 19
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
u8 local_u8KeyValue=KEY_NOT_PRESSED;
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	8b 8b       	std	Y+19, r24	; 0x13
u8 local_u8RowCounter,local_u8ColumnCounter,local_u8PinValue,FLAG=FLAG_DOWN;
    1908:	1f 86       	std	Y+15, r1	; 0x0f
for(local_u8RowCounter=0;local_u8RowCounter<ROW_NUMBER;local_u8RowCounter++)
    190a:	1a 8a       	std	Y+18, r1	; 0x12
    190c:	da c0       	rjmp	.+436    	; 0x1ac2 <HKEYPAD_u8KeyPressed+0x1d2>
{
MDIO_voidSetPinValue(KEYPAD_PORT,global_u8SArrOfRows[local_u8RowCounter],DIO_LOW);
    190e:	8a 89       	ldd	r24, Y+18	; 0x12
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	fc 01       	movw	r30, r24
    1916:	ea 54       	subi	r30, 0x4A	; 74
    1918:	fd 4f       	sbci	r31, 0xFD	; 253
    191a:	90 81       	ld	r25, Z
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	69 2f       	mov	r22, r25
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
for(local_u8ColumnCounter=0;local_u8ColumnCounter<COLUMN_NUMBER;local_u8ColumnCounter++)
    1926:	19 8a       	std	Y+17, r1	; 0x11
    1928:	b6 c0       	rjmp	.+364    	; 0x1a96 <HKEYPAD_u8KeyPressed+0x1a6>
          {
	local_u8PinValue=MDIO_voidGetPinValue(KEYPAD_PORT,global_u8SArrOfColumns[local_u8ColumnCounter]);
    192a:	89 89       	ldd	r24, Y+17	; 0x11
    192c:	88 2f       	mov	r24, r24
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	fc 01       	movw	r30, r24
    1932:	e6 54       	subi	r30, 0x46	; 70
    1934:	fd 4f       	sbci	r31, 0xFD	; 253
    1936:	90 81       	ld	r25, Z
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	69 2f       	mov	r22, r25
    193c:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    1940:	88 8b       	std	Y+16, r24	; 0x10
	if(local_u8PinValue==KEY_PRESSED)
    1942:	88 89       	ldd	r24, Y+16	; 0x10
    1944:	88 23       	and	r24, r24
    1946:	09 f0       	breq	.+2      	; 0x194a <HKEYPAD_u8KeyPressed+0x5a>
    1948:	a3 c0       	rjmp	.+326    	; 0x1a90 <HKEYPAD_u8KeyPressed+0x1a0>
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a0 ef       	ldi	r26, 0xF0	; 240
    1950:	b1 e4       	ldi	r27, 0x41	; 65
    1952:	8b 87       	std	Y+11, r24	; 0x0b
    1954:	9c 87       	std	Y+12, r25	; 0x0c
    1956:	ad 87       	std	Y+13, r26	; 0x0d
    1958:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195a:	6b 85       	ldd	r22, Y+11	; 0x0b
    195c:	7c 85       	ldd	r23, Y+12	; 0x0c
    195e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1960:	9e 85       	ldd	r25, Y+14	; 0x0e
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	4a ef       	ldi	r20, 0xFA	; 250
    1968:	54 e4       	ldi	r21, 0x44	; 68
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	8f 83       	std	Y+7, r24	; 0x07
    1974:	98 87       	std	Y+8, r25	; 0x08
    1976:	a9 87       	std	Y+9, r26	; 0x09
    1978:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    197a:	6f 81       	ldd	r22, Y+7	; 0x07
    197c:	78 85       	ldd	r23, Y+8	; 0x08
    197e:	89 85       	ldd	r24, Y+9	; 0x09
    1980:	9a 85       	ldd	r25, Y+10	; 0x0a
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e8       	ldi	r20, 0x80	; 128
    1988:	5f e3       	ldi	r21, 0x3F	; 63
    198a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    198e:	88 23       	and	r24, r24
    1990:	2c f4       	brge	.+10     	; 0x199c <HKEYPAD_u8KeyPressed+0xac>
		__ticks = 1;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	3f c0       	rjmp	.+126    	; 0x1a1a <HKEYPAD_u8KeyPressed+0x12a>
	else if (__tmp > 65535)
    199c:	6f 81       	ldd	r22, Y+7	; 0x07
    199e:	78 85       	ldd	r23, Y+8	; 0x08
    19a0:	89 85       	ldd	r24, Y+9	; 0x09
    19a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	3f ef       	ldi	r19, 0xFF	; 255
    19a8:	4f e7       	ldi	r20, 0x7F	; 127
    19aa:	57 e4       	ldi	r21, 0x47	; 71
    19ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19b0:	18 16       	cp	r1, r24
    19b2:	4c f5       	brge	.+82     	; 0x1a06 <HKEYPAD_u8KeyPressed+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e2       	ldi	r20, 0x20	; 32
    19c2:	51 e4       	ldi	r21, 0x41	; 65
    19c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	bc 01       	movw	r22, r24
    19ce:	cd 01       	movw	r24, r26
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	9e 83       	std	Y+6, r25	; 0x06
    19da:	8d 83       	std	Y+5, r24	; 0x05
    19dc:	0f c0       	rjmp	.+30     	; 0x19fc <HKEYPAD_u8KeyPressed+0x10c>
    19de:	88 ec       	ldi	r24, 0xC8	; 200
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	9c 83       	std	Y+4, r25	; 0x04
    19e4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <HKEYPAD_u8KeyPressed+0xfa>
    19ee:	9c 83       	std	Y+4, r25	; 0x04
    19f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fc:	8d 81       	ldd	r24, Y+5	; 0x05
    19fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	69 f7       	brne	.-38     	; 0x19de <HKEYPAD_u8KeyPressed+0xee>
    1a04:	14 c0       	rjmp	.+40     	; 0x1a2e <HKEYPAD_u8KeyPressed+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	8d 83       	std	Y+5, r24	; 0x05
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1e:	9a 83       	std	Y+2, r25	; 0x02
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <HKEYPAD_u8KeyPressed+0x136>
    1a2a:	9a 83       	std	Y+2, r25	; 0x02
    1a2c:	89 83       	std	Y+1, r24	; 0x01
	{

		_delay_ms(KEYPAD_DEPOUNCING_EFFECT_IN_MS);
		local_u8PinValue=MDIO_voidGetPinValue(KEYPAD_PORT,global_u8SArrOfColumns[local_u8ColumnCounter]);
    1a2e:	89 89       	ldd	r24, Y+17	; 0x11
    1a30:	88 2f       	mov	r24, r24
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	fc 01       	movw	r30, r24
    1a36:	e6 54       	subi	r30, 0x46	; 70
    1a38:	fd 4f       	sbci	r31, 0xFD	; 253
    1a3a:	90 81       	ld	r25, Z
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	69 2f       	mov	r22, r25
    1a40:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    1a44:	88 8b       	std	Y+16, r24	; 0x10
    1a46:	0c c0       	rjmp	.+24     	; 0x1a60 <HKEYPAD_u8KeyPressed+0x170>
	while(local_u8PinValue==KEY_PRESSED)
	{
		local_u8PinValue=MDIO_voidGetPinValue(KEYPAD_PORT,global_u8SArrOfColumns[local_u8ColumnCounter]);
    1a48:	89 89       	ldd	r24, Y+17	; 0x11
    1a4a:	88 2f       	mov	r24, r24
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	fc 01       	movw	r30, r24
    1a50:	e6 54       	subi	r30, 0x46	; 70
    1a52:	fd 4f       	sbci	r31, 0xFD	; 253
    1a54:	90 81       	ld	r25, Z
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	69 2f       	mov	r22, r25
    1a5a:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    1a5e:	88 8b       	std	Y+16, r24	; 0x10
	if(local_u8PinValue==KEY_PRESSED)
	{

		_delay_ms(KEYPAD_DEPOUNCING_EFFECT_IN_MS);
		local_u8PinValue=MDIO_voidGetPinValue(KEYPAD_PORT,global_u8SArrOfColumns[local_u8ColumnCounter]);
	while(local_u8PinValue==KEY_PRESSED)
    1a60:	88 89       	ldd	r24, Y+16	; 0x10
    1a62:	88 23       	and	r24, r24
    1a64:	89 f3       	breq	.-30     	; 0x1a48 <HKEYPAD_u8KeyPressed+0x158>
	{
		local_u8PinValue=MDIO_voidGetPinValue(KEYPAD_PORT,global_u8SArrOfColumns[local_u8ColumnCounter]);
	}

	local_u8KeyValue=global_u8ArrOfKeyValues[local_u8RowCounter][local_u8ColumnCounter];
    1a66:	8a 89       	ldd	r24, Y+18	; 0x12
    1a68:	48 2f       	mov	r20, r24
    1a6a:	50 e0       	ldi	r21, 0x00	; 0
    1a6c:	89 89       	ldd	r24, Y+17	; 0x11
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	ca 01       	movw	r24, r20
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	82 0f       	add	r24, r18
    1a7e:	93 1f       	adc	r25, r19
    1a80:	fc 01       	movw	r30, r24
    1a82:	ea 55       	subi	r30, 0x5A	; 90
    1a84:	fd 4f       	sbci	r31, 0xFD	; 253
    1a86:	80 81       	ld	r24, Z
    1a88:	8b 8b       	std	Y+19, r24	; 0x13
	FLAG=FLAG_UP;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	8f 87       	std	Y+15, r24	; 0x0f
    1a8e:	07 c0       	rjmp	.+14     	; 0x1a9e <HKEYPAD_u8KeyPressed+0x1ae>
u8 local_u8KeyValue=KEY_NOT_PRESSED;
u8 local_u8RowCounter,local_u8ColumnCounter,local_u8PinValue,FLAG=FLAG_DOWN;
for(local_u8RowCounter=0;local_u8RowCounter<ROW_NUMBER;local_u8RowCounter++)
{
MDIO_voidSetPinValue(KEYPAD_PORT,global_u8SArrOfRows[local_u8RowCounter],DIO_LOW);
for(local_u8ColumnCounter=0;local_u8ColumnCounter<COLUMN_NUMBER;local_u8ColumnCounter++)
    1a90:	89 89       	ldd	r24, Y+17	; 0x11
    1a92:	8f 5f       	subi	r24, 0xFF	; 255
    1a94:	89 8b       	std	Y+17, r24	; 0x11
    1a96:	89 89       	ldd	r24, Y+17	; 0x11
    1a98:	84 30       	cpi	r24, 0x04	; 4
    1a9a:	08 f4       	brcc	.+2      	; 0x1a9e <HKEYPAD_u8KeyPressed+0x1ae>
    1a9c:	46 cf       	rjmp	.-372    	; 0x192a <HKEYPAD_u8KeyPressed+0x3a>
	}



          }
MDIO_voidSetPinValue(KEYPAD_PORT,global_u8SArrOfRows[local_u8RowCounter],DIO_HIGH);
    1a9e:	8a 89       	ldd	r24, Y+18	; 0x12
    1aa0:	88 2f       	mov	r24, r24
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	ea 54       	subi	r30, 0x4A	; 74
    1aa8:	fd 4f       	sbci	r31, 0xFD	; 253
    1aaa:	90 81       	ld	r25, Z
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	69 2f       	mov	r22, r25
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
if(FLAG==FLAG_UP)
    1ab6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab8:	81 30       	cpi	r24, 0x01	; 1
    1aba:	39 f0       	breq	.+14     	; 0x1aca <HKEYPAD_u8KeyPressed+0x1da>

u8 HKEYPAD_u8KeyPressed(void)
{
u8 local_u8KeyValue=KEY_NOT_PRESSED;
u8 local_u8RowCounter,local_u8ColumnCounter,local_u8PinValue,FLAG=FLAG_DOWN;
for(local_u8RowCounter=0;local_u8RowCounter<ROW_NUMBER;local_u8RowCounter++)
    1abc:	8a 89       	ldd	r24, Y+18	; 0x12
    1abe:	8f 5f       	subi	r24, 0xFF	; 255
    1ac0:	8a 8b       	std	Y+18, r24	; 0x12
    1ac2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ac4:	84 30       	cpi	r24, 0x04	; 4
    1ac6:	08 f4       	brcc	.+2      	; 0x1aca <HKEYPAD_u8KeyPressed+0x1da>
    1ac8:	22 cf       	rjmp	.-444    	; 0x190e <HKEYPAD_u8KeyPressed+0x1e>
if(FLAG==FLAG_UP)
{
break;
}
}
return local_u8KeyValue;
    1aca:	8b 89       	ldd	r24, Y+19	; 0x13
}
    1acc:	63 96       	adiw	r28, 0x13	; 19
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <HLCD_voidSendData>:
#include "../include/HAL/LCD/LCD_private.h"
#include "../include/HAL/LCD/LCD_configuration.h"
#define F_CPU 8000000UL

void HLCD_voidSendData (u8 A_u8Data)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	2f 97       	sbiw	r28, 0x0f	; 15
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	8f 87       	std	Y+15, r24	; 0x0f
//RS---->1  RW----->0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);
    1af4:	83 e0       	ldi	r24, 0x03	; 3
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	41 e0       	ldi	r20, 0x01	; 1
    1afa:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    1afe:	83 e0       	ldi	r24, 0x03	; 3
    1b00:	61 e0       	ldi	r22, 0x01	; 1
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
//Send Data To the LCD
    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    1b08:	82 e0       	ldi	r24, 0x02	; 2
    1b0a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b0c:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MDIO_voidSetPortValue>
//Set PUlse on E PIN with 2ms delay
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    1b10:	83 e0       	ldi	r24, 0x03	; 3
    1b12:	62 e0       	ldi	r22, 0x02	; 2
    1b14:	41 e0       	ldi	r20, 0x01	; 1
    1b16:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	a0 e0       	ldi	r26, 0x00	; 0
    1b20:	b0 e4       	ldi	r27, 0x40	; 64
    1b22:	8b 87       	std	Y+11, r24	; 0x0b
    1b24:	9c 87       	std	Y+12, r25	; 0x0c
    1b26:	ad 87       	std	Y+13, r26	; 0x0d
    1b28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	4a ef       	ldi	r20, 0xFA	; 250
    1b38:	54 e4       	ldi	r21, 0x44	; 68
    1b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	8f 83       	std	Y+7, r24	; 0x07
    1b44:	98 87       	std	Y+8, r25	; 0x08
    1b46:	a9 87       	std	Y+9, r26	; 0x09
    1b48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4c:	78 85       	ldd	r23, Y+8	; 0x08
    1b4e:	89 85       	ldd	r24, Y+9	; 0x09
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e8       	ldi	r20, 0x80	; 128
    1b58:	5f e3       	ldi	r21, 0x3F	; 63
    1b5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b5e:	88 23       	and	r24, r24
    1b60:	2c f4       	brge	.+10     	; 0x1b6c <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
    1b6a:	3f c0       	rjmp	.+126    	; 0x1bea <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6e:	78 85       	ldd	r23, Y+8	; 0x08
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	3f ef       	ldi	r19, 0xFF	; 255
    1b78:	4f e7       	ldi	r20, 0x7F	; 127
    1b7a:	57 e4       	ldi	r21, 0x47	; 71
    1b7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b80:	18 16       	cp	r1, r24
    1b82:	4c f5       	brge	.+82     	; 0x1bd6 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e2       	ldi	r20, 0x20	; 32
    1b92:	51 e4       	ldi	r21, 0x41	; 65
    1b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	bc 01       	movw	r22, r24
    1b9e:	cd 01       	movw	r24, r26
    1ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	9e 83       	std	Y+6, r25	; 0x06
    1baa:	8d 83       	std	Y+5, r24	; 0x05
    1bac:	0f c0       	rjmp	.+30     	; 0x1bcc <HLCD_voidSendData+0xee>
    1bae:	88 ec       	ldi	r24, 0xC8	; 200
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9c 83       	std	Y+4, r25	; 0x04
    1bb4:	8b 83       	std	Y+3, r24	; 0x03
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <HLCD_voidSendData+0xdc>
    1bbe:	9c 83       	std	Y+4, r25	; 0x04
    1bc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	9e 83       	std	Y+6, r25	; 0x06
    1bca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	69 f7       	brne	.-38     	; 0x1bae <HLCD_voidSendData+0xd0>
    1bd4:	14 c0       	rjmp	.+40     	; 0x1bfe <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd8:	78 85       	ldd	r23, Y+8	; 0x08
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	9e 83       	std	Y+6, r25	; 0x06
    1be8:	8d 83       	std	Y+5, r24	; 0x05
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	9e 81       	ldd	r25, Y+6	; 0x06
    1bee:	9a 83       	std	Y+2, r25	; 0x02
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <HLCD_voidSendData+0x118>
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1bfe:	83 e0       	ldi	r24, 0x03	; 3
    1c00:	62 e0       	ldi	r22, 0x02	; 2
    1c02:	40 e0       	ldi	r20, 0x00	; 0
    1c04:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
}
    1c08:	2f 96       	adiw	r28, 0x0f	; 15
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	cd bf       	out	0x3d, r28	; 61
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <HLCD_voidSendCommand>:
void HLCD_voidSendCommand (u8 A_u8Command)
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	2f 97       	sbiw	r28, 0x0f	; 15
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	f8 94       	cli
    1c28:	de bf       	out	0x3e, r29	; 62
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	cd bf       	out	0x3d, r28	; 61
    1c2e:	8f 87       	std	Y+15, r24	; 0x0f
//RS---->0  RW----->0
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);
    1c30:	83 e0       	ldi	r24, 0x03	; 3
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	40 e0       	ldi	r20, 0x00	; 0
    1c36:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    1c3a:	83 e0       	ldi	r24, 0x03	; 3
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	40 e0       	ldi	r20, 0x00	; 0
    1c40:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
//Send Data To the LCD
	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c48:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MDIO_voidSetPortValue>

//Set PUlse on E PIN with 2ms delay
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    1c4c:	83 e0       	ldi	r24, 0x03	; 3
    1c4e:	62 e0       	ldi	r22, 0x02	; 2
    1c50:	41 e0       	ldi	r20, 0x01	; 1
    1c52:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a0 e0       	ldi	r26, 0x00	; 0
    1c5c:	b0 e4       	ldi	r27, 0x40	; 64
    1c5e:	8b 87       	std	Y+11, r24	; 0x0b
    1c60:	9c 87       	std	Y+12, r25	; 0x0c
    1c62:	ad 87       	std	Y+13, r26	; 0x0d
    1c64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	4a ef       	ldi	r20, 0xFA	; 250
    1c74:	54 e4       	ldi	r21, 0x44	; 68
    1c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	8f 83       	std	Y+7, r24	; 0x07
    1c80:	98 87       	std	Y+8, r25	; 0x08
    1c82:	a9 87       	std	Y+9, r26	; 0x09
    1c84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c86:	6f 81       	ldd	r22, Y+7	; 0x07
    1c88:	78 85       	ldd	r23, Y+8	; 0x08
    1c8a:	89 85       	ldd	r24, Y+9	; 0x09
    1c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e8       	ldi	r20, 0x80	; 128
    1c94:	5f e3       	ldi	r21, 0x3F	; 63
    1c96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c9a:	88 23       	and	r24, r24
    1c9c:	2c f4       	brge	.+10     	; 0x1ca8 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	9e 83       	std	Y+6, r25	; 0x06
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
    1ca6:	3f c0       	rjmp	.+126    	; 0x1d26 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    1caa:	78 85       	ldd	r23, Y+8	; 0x08
    1cac:	89 85       	ldd	r24, Y+9	; 0x09
    1cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	3f ef       	ldi	r19, 0xFF	; 255
    1cb4:	4f e7       	ldi	r20, 0x7F	; 127
    1cb6:	57 e4       	ldi	r21, 0x47	; 71
    1cb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cbc:	18 16       	cp	r1, r24
    1cbe:	4c f5       	brge	.+82     	; 0x1d12 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e2       	ldi	r20, 0x20	; 32
    1cce:	51 e4       	ldi	r21, 0x41	; 65
    1cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9e 83       	std	Y+6, r25	; 0x06
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
    1ce8:	0f c0       	rjmp	.+30     	; 0x1d08 <HLCD_voidSendCommand+0xee>
    1cea:	88 ec       	ldi	r24, 0xC8	; 200
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9c 83       	std	Y+4, r25	; 0x04
    1cf0:	8b 83       	std	Y+3, r24	; 0x03
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <HLCD_voidSendCommand+0xdc>
    1cfa:	9c 83       	std	Y+4, r25	; 0x04
    1cfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1d00:	9e 81       	ldd	r25, Y+6	; 0x06
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	9e 83       	std	Y+6, r25	; 0x06
    1d06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d08:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	69 f7       	brne	.-38     	; 0x1cea <HLCD_voidSendCommand+0xd0>
    1d10:	14 c0       	rjmp	.+40     	; 0x1d3a <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d12:	6f 81       	ldd	r22, Y+7	; 0x07
    1d14:	78 85       	ldd	r23, Y+8	; 0x08
    1d16:	89 85       	ldd	r24, Y+9	; 0x09
    1d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9e 83       	std	Y+6, r25	; 0x06
    1d24:	8d 83       	std	Y+5, r24	; 0x05
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2a:	9a 83       	std	Y+2, r25	; 0x02
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <HLCD_voidSendCommand+0x118>
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1d3a:	83 e0       	ldi	r24, 0x03	; 3
    1d3c:	62 e0       	ldi	r22, 0x02	; 2
    1d3e:	40 e0       	ldi	r20, 0x00	; 0
    1d40:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
}
    1d44:	2f 96       	adiw	r28, 0x0f	; 15
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <HLCD_voidInit>:

void HLCD_voidInit(void)
{
    1d56:	0f 93       	push	r16
    1d58:	1f 93       	push	r17
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	cc 54       	subi	r28, 0x4C	; 76
    1d64:	d0 40       	sbci	r29, 0x00	; 0
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	fe 01       	movw	r30, r28
    1d72:	e7 5b       	subi	r30, 0xB7	; 183
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	a0 ef       	ldi	r26, 0xF0	; 240
    1d7c:	b1 e4       	ldi	r27, 0x41	; 65
    1d7e:	80 83       	st	Z, r24
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	a2 83       	std	Z+2, r26	; 0x02
    1d84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d86:	8e 01       	movw	r16, r28
    1d88:	0b 5b       	subi	r16, 0xBB	; 187
    1d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	e7 5b       	subi	r30, 0xB7	; 183
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	60 81       	ld	r22, Z
    1d94:	71 81       	ldd	r23, Z+1	; 0x01
    1d96:	82 81       	ldd	r24, Z+2	; 0x02
    1d98:	93 81       	ldd	r25, Z+3	; 0x03
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	4a ef       	ldi	r20, 0xFA	; 250
    1da0:	54 e4       	ldi	r21, 0x44	; 68
    1da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	f8 01       	movw	r30, r16
    1dac:	80 83       	st	Z, r24
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	a2 83       	std	Z+2, r26	; 0x02
    1db2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1db4:	fe 01       	movw	r30, r28
    1db6:	eb 5b       	subi	r30, 0xBB	; 187
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	60 81       	ld	r22, Z
    1dbc:	71 81       	ldd	r23, Z+1	; 0x01
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	93 81       	ldd	r25, Z+3	; 0x03
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e8       	ldi	r20, 0x80	; 128
    1dc8:	5f e3       	ldi	r21, 0x3F	; 63
    1dca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dce:	88 23       	and	r24, r24
    1dd0:	44 f4       	brge	.+16     	; 0x1de2 <HLCD_voidInit+0x8c>
		__ticks = 1;
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	ed 5b       	subi	r30, 0xBD	; 189
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	91 83       	std	Z+1, r25	; 0x01
    1dde:	80 83       	st	Z, r24
    1de0:	64 c0       	rjmp	.+200    	; 0x1eaa <HLCD_voidInit+0x154>
	else if (__tmp > 65535)
    1de2:	fe 01       	movw	r30, r28
    1de4:	eb 5b       	subi	r30, 0xBB	; 187
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	60 81       	ld	r22, Z
    1dea:	71 81       	ldd	r23, Z+1	; 0x01
    1dec:	82 81       	ldd	r24, Z+2	; 0x02
    1dee:	93 81       	ldd	r25, Z+3	; 0x03
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	3f ef       	ldi	r19, 0xFF	; 255
    1df4:	4f e7       	ldi	r20, 0x7F	; 127
    1df6:	57 e4       	ldi	r21, 0x47	; 71
    1df8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dfc:	18 16       	cp	r1, r24
    1dfe:	0c f0       	brlt	.+2      	; 0x1e02 <HLCD_voidInit+0xac>
    1e00:	43 c0       	rjmp	.+134    	; 0x1e88 <HLCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e02:	fe 01       	movw	r30, r28
    1e04:	e7 5b       	subi	r30, 0xB7	; 183
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	60 81       	ld	r22, Z
    1e0a:	71 81       	ldd	r23, Z+1	; 0x01
    1e0c:	82 81       	ldd	r24, Z+2	; 0x02
    1e0e:	93 81       	ldd	r25, Z+3	; 0x03
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e2       	ldi	r20, 0x20	; 32
    1e16:	51 e4       	ldi	r21, 0x41	; 65
    1e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	8e 01       	movw	r16, r28
    1e22:	0d 5b       	subi	r16, 0xBD	; 189
    1e24:	1f 4f       	sbci	r17, 0xFF	; 255
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	f8 01       	movw	r30, r16
    1e34:	91 83       	std	Z+1, r25	; 0x01
    1e36:	80 83       	st	Z, r24
    1e38:	1f c0       	rjmp	.+62     	; 0x1e78 <HLCD_voidInit+0x122>
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	ef 5b       	subi	r30, 0xBF	; 191
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	88 ec       	ldi	r24, 0xC8	; 200
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	80 83       	st	Z, r24
    1e48:	fe 01       	movw	r30, r28
    1e4a:	ef 5b       	subi	r30, 0xBF	; 191
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 81       	ld	r24, Z
    1e50:	91 81       	ldd	r25, Z+1	; 0x01
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <HLCD_voidInit+0xfc>
    1e56:	fe 01       	movw	r30, r28
    1e58:	ef 5b       	subi	r30, 0xBF	; 191
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	91 83       	std	Z+1, r25	; 0x01
    1e5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e60:	de 01       	movw	r26, r28
    1e62:	ad 5b       	subi	r26, 0xBD	; 189
    1e64:	bf 4f       	sbci	r27, 0xFF	; 255
    1e66:	fe 01       	movw	r30, r28
    1e68:	ed 5b       	subi	r30, 0xBD	; 189
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	80 81       	ld	r24, Z
    1e6e:	91 81       	ldd	r25, Z+1	; 0x01
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	11 96       	adiw	r26, 0x01	; 1
    1e74:	9c 93       	st	X, r25
    1e76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e78:	fe 01       	movw	r30, r28
    1e7a:	ed 5b       	subi	r30, 0xBD	; 189
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	80 81       	ld	r24, Z
    1e80:	91 81       	ldd	r25, Z+1	; 0x01
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	d1 f6       	brne	.-76     	; 0x1e3a <HLCD_voidInit+0xe4>
    1e86:	24 c0       	rjmp	.+72     	; 0x1ed0 <HLCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e88:	8e 01       	movw	r16, r28
    1e8a:	0d 5b       	subi	r16, 0xBD	; 189
    1e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8e:	fe 01       	movw	r30, r28
    1e90:	eb 5b       	subi	r30, 0xBB	; 187
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	60 81       	ld	r22, Z
    1e96:	71 81       	ldd	r23, Z+1	; 0x01
    1e98:	82 81       	ldd	r24, Z+2	; 0x02
    1e9a:	93 81       	ldd	r25, Z+3	; 0x03
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	f8 01       	movw	r30, r16
    1ea6:	91 83       	std	Z+1, r25	; 0x01
    1ea8:	80 83       	st	Z, r24
    1eaa:	fe 01       	movw	r30, r28
    1eac:	ed 5b       	subi	r30, 0xBD	; 189
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	80 81       	ld	r24, Z
    1eb2:	91 81       	ldd	r25, Z+1	; 0x01
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	ff 96       	adiw	r30, 0x3f	; 63
    1eb8:	91 83       	std	Z+1, r25	; 0x01
    1eba:	80 83       	st	Z, r24
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	ff 96       	adiw	r30, 0x3f	; 63
    1ec0:	80 81       	ld	r24, Z
    1ec2:	91 81       	ldd	r25, Z+1	; 0x01
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <HLCD_voidInit+0x16e>
    1ec8:	fe 01       	movw	r30, r28
    1eca:	ff 96       	adiw	r30, 0x3f	; 63
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	80 83       	st	Z, r24
	//Wait FOR more than 30ms after VDD rises to 4.5v
	_delay_ms(30);
	//Function Set
	HLCD_voidSendCommand(FUNCTION_SET);
    1ed0:	88 e3       	ldi	r24, 0x38	; 56
    1ed2:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a0 e2       	ldi	r26, 0x20	; 32
    1edc:	b2 e4       	ldi	r27, 0x42	; 66
    1ede:	8b af       	std	Y+59, r24	; 0x3b
    1ee0:	9c af       	std	Y+60, r25	; 0x3c
    1ee2:	ad af       	std	Y+61, r26	; 0x3d
    1ee4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ee6:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ee8:	7c ad       	ldd	r23, Y+60	; 0x3c
    1eea:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eec:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eee:	2b ea       	ldi	r18, 0xAB	; 171
    1ef0:	3a ea       	ldi	r19, 0xAA	; 170
    1ef2:	4a e2       	ldi	r20, 0x2A	; 42
    1ef4:	50 e4       	ldi	r21, 0x40	; 64
    1ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	8f ab       	std	Y+55, r24	; 0x37
    1f00:	98 af       	std	Y+56, r25	; 0x38
    1f02:	a9 af       	std	Y+57, r26	; 0x39
    1f04:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1f06:	6f a9       	ldd	r22, Y+55	; 0x37
    1f08:	78 ad       	ldd	r23, Y+56	; 0x38
    1f0a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f0c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e8       	ldi	r20, 0x80	; 128
    1f14:	5f e3       	ldi	r21, 0x3F	; 63
    1f16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f1a:	88 23       	and	r24, r24
    1f1c:	1c f4       	brge	.+6      	; 0x1f24 <HLCD_voidInit+0x1ce>
		__ticks = 1;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	8e ab       	std	Y+54, r24	; 0x36
    1f22:	91 c0       	rjmp	.+290    	; 0x2046 <HLCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1f24:	6f a9       	ldd	r22, Y+55	; 0x37
    1f26:	78 ad       	ldd	r23, Y+56	; 0x38
    1f28:	89 ad       	ldd	r24, Y+57	; 0x39
    1f2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4f e7       	ldi	r20, 0x7F	; 127
    1f32:	53 e4       	ldi	r21, 0x43	; 67
    1f34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f38:	18 16       	cp	r1, r24
    1f3a:	0c f0       	brlt	.+2      	; 0x1f3e <HLCD_voidInit+0x1e8>
    1f3c:	7b c0       	rjmp	.+246    	; 0x2034 <HLCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1f3e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f40:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f42:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f44:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4a e7       	ldi	r20, 0x7A	; 122
    1f4c:	54 e4       	ldi	r21, 0x44	; 68
    1f4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	8a ab       	std	Y+50, r24	; 0x32
    1f58:	9b ab       	std	Y+51, r25	; 0x33
    1f5a:	ac ab       	std	Y+52, r26	; 0x34
    1f5c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5e:	6a a9       	ldd	r22, Y+50	; 0x32
    1f60:	7b a9       	ldd	r23, Y+51	; 0x33
    1f62:	8c a9       	ldd	r24, Y+52	; 0x34
    1f64:	9d a9       	ldd	r25, Y+53	; 0x35
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	4a ef       	ldi	r20, 0xFA	; 250
    1f6c:	54 e4       	ldi	r21, 0x44	; 68
    1f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	8e a7       	std	Y+46, r24	; 0x2e
    1f78:	9f a7       	std	Y+47, r25	; 0x2f
    1f7a:	a8 ab       	std	Y+48, r26	; 0x30
    1f7c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1f7e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f80:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f82:	88 a9       	ldd	r24, Y+48	; 0x30
    1f84:	99 a9       	ldd	r25, Y+49	; 0x31
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e8       	ldi	r20, 0x80	; 128
    1f8c:	5f e3       	ldi	r21, 0x3F	; 63
    1f8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f92:	88 23       	and	r24, r24
    1f94:	2c f4       	brge	.+10     	; 0x1fa0 <HLCD_voidInit+0x24a>
		__ticks = 1;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9d a7       	std	Y+45, r25	; 0x2d
    1f9c:	8c a7       	std	Y+44, r24	; 0x2c
    1f9e:	3f c0       	rjmp	.+126    	; 0x201e <HLCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1fa0:	6e a5       	ldd	r22, Y+46	; 0x2e
    1fa2:	7f a5       	ldd	r23, Y+47	; 0x2f
    1fa4:	88 a9       	ldd	r24, Y+48	; 0x30
    1fa6:	99 a9       	ldd	r25, Y+49	; 0x31
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	3f ef       	ldi	r19, 0xFF	; 255
    1fac:	4f e7       	ldi	r20, 0x7F	; 127
    1fae:	57 e4       	ldi	r21, 0x47	; 71
    1fb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fb4:	18 16       	cp	r1, r24
    1fb6:	4c f5       	brge	.+82     	; 0x200a <HLCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb8:	6a a9       	ldd	r22, Y+50	; 0x32
    1fba:	7b a9       	ldd	r23, Y+51	; 0x33
    1fbc:	8c a9       	ldd	r24, Y+52	; 0x34
    1fbe:	9d a9       	ldd	r25, Y+53	; 0x35
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e2       	ldi	r20, 0x20	; 32
    1fc6:	51 e4       	ldi	r21, 0x41	; 65
    1fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	bc 01       	movw	r22, r24
    1fd2:	cd 01       	movw	r24, r26
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9d a7       	std	Y+45, r25	; 0x2d
    1fde:	8c a7       	std	Y+44, r24	; 0x2c
    1fe0:	0f c0       	rjmp	.+30     	; 0x2000 <HLCD_voidInit+0x2aa>
    1fe2:	88 ec       	ldi	r24, 0xC8	; 200
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	9b a7       	std	Y+43, r25	; 0x2b
    1fe8:	8a a7       	std	Y+42, r24	; 0x2a
    1fea:	8a a5       	ldd	r24, Y+42	; 0x2a
    1fec:	9b a5       	ldd	r25, Y+43	; 0x2b
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <HLCD_voidInit+0x298>
    1ff2:	9b a7       	std	Y+43, r25	; 0x2b
    1ff4:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ff8:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	9d a7       	std	Y+45, r25	; 0x2d
    1ffe:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2000:	8c a5       	ldd	r24, Y+44	; 0x2c
    2002:	9d a5       	ldd	r25, Y+45	; 0x2d
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	69 f7       	brne	.-38     	; 0x1fe2 <HLCD_voidInit+0x28c>
    2008:	24 c0       	rjmp	.+72     	; 0x2052 <HLCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200a:	6e a5       	ldd	r22, Y+46	; 0x2e
    200c:	7f a5       	ldd	r23, Y+47	; 0x2f
    200e:	88 a9       	ldd	r24, Y+48	; 0x30
    2010:	99 a9       	ldd	r25, Y+49	; 0x31
    2012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9d a7       	std	Y+45, r25	; 0x2d
    201c:	8c a7       	std	Y+44, r24	; 0x2c
    201e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2020:	9d a5       	ldd	r25, Y+45	; 0x2d
    2022:	99 a7       	std	Y+41, r25	; 0x29
    2024:	88 a7       	std	Y+40, r24	; 0x28
    2026:	88 a5       	ldd	r24, Y+40	; 0x28
    2028:	99 a5       	ldd	r25, Y+41	; 0x29
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <HLCD_voidInit+0x2d4>
    202e:	99 a7       	std	Y+41, r25	; 0x29
    2030:	88 a7       	std	Y+40, r24	; 0x28
    2032:	0f c0       	rjmp	.+30     	; 0x2052 <HLCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2034:	6f a9       	ldd	r22, Y+55	; 0x37
    2036:	78 ad       	ldd	r23, Y+56	; 0x38
    2038:	89 ad       	ldd	r24, Y+57	; 0x39
    203a:	9a ad       	ldd	r25, Y+58	; 0x3a
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	8e ab       	std	Y+54, r24	; 0x36
    2046:	8e a9       	ldd	r24, Y+54	; 0x36
    2048:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    204a:	8f a1       	ldd	r24, Y+39	; 0x27
    204c:	8a 95       	dec	r24
    204e:	f1 f7       	brne	.-4      	; 0x204c <HLCD_voidInit+0x2f6>
    2050:	8f a3       	std	Y+39, r24	; 0x27
	//Wait FOR more than 38us
	_delay_us(40);
   //DISPLAY ON/OFF
	HLCD_voidSendCommand(DISPLAY_ON_OFF_CONTROL);
    2052:	8f e0       	ldi	r24, 0x0F	; 15
    2054:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e2       	ldi	r26, 0x20	; 32
    205e:	b2 e4       	ldi	r27, 0x42	; 66
    2060:	8b a3       	std	Y+35, r24	; 0x23
    2062:	9c a3       	std	Y+36, r25	; 0x24
    2064:	ad a3       	std	Y+37, r26	; 0x25
    2066:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2068:	6b a1       	ldd	r22, Y+35	; 0x23
    206a:	7c a1       	ldd	r23, Y+36	; 0x24
    206c:	8d a1       	ldd	r24, Y+37	; 0x25
    206e:	9e a1       	ldd	r25, Y+38	; 0x26
    2070:	2b ea       	ldi	r18, 0xAB	; 171
    2072:	3a ea       	ldi	r19, 0xAA	; 170
    2074:	4a e2       	ldi	r20, 0x2A	; 42
    2076:	50 e4       	ldi	r21, 0x40	; 64
    2078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	8f 8f       	std	Y+31, r24	; 0x1f
    2082:	98 a3       	std	Y+32, r25	; 0x20
    2084:	a9 a3       	std	Y+33, r26	; 0x21
    2086:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2088:	6f 8d       	ldd	r22, Y+31	; 0x1f
    208a:	78 a1       	ldd	r23, Y+32	; 0x20
    208c:	89 a1       	ldd	r24, Y+33	; 0x21
    208e:	9a a1       	ldd	r25, Y+34	; 0x22
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	1c f4       	brge	.+6      	; 0x20a6 <HLCD_voidInit+0x350>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	8e 8f       	std	Y+30, r24	; 0x1e
    20a4:	91 c0       	rjmp	.+290    	; 0x21c8 <HLCD_voidInit+0x472>
	else if (__tmp > 255)
    20a6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    20a8:	78 a1       	ldd	r23, Y+32	; 0x20
    20aa:	89 a1       	ldd	r24, Y+33	; 0x21
    20ac:	9a a1       	ldd	r25, Y+34	; 0x22
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	4f e7       	ldi	r20, 0x7F	; 127
    20b4:	53 e4       	ldi	r21, 0x43	; 67
    20b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ba:	18 16       	cp	r1, r24
    20bc:	0c f0       	brlt	.+2      	; 0x20c0 <HLCD_voidInit+0x36a>
    20be:	7b c0       	rjmp	.+246    	; 0x21b6 <HLCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    20c0:	6b a1       	ldd	r22, Y+35	; 0x23
    20c2:	7c a1       	ldd	r23, Y+36	; 0x24
    20c4:	8d a1       	ldd	r24, Y+37	; 0x25
    20c6:	9e a1       	ldd	r25, Y+38	; 0x26
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	4a e7       	ldi	r20, 0x7A	; 122
    20ce:	54 e4       	ldi	r21, 0x44	; 68
    20d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	8a 8f       	std	Y+26, r24	; 0x1a
    20da:	9b 8f       	std	Y+27, r25	; 0x1b
    20dc:	ac 8f       	std	Y+28, r26	; 0x1c
    20de:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    20e2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    20e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	4a ef       	ldi	r20, 0xFA	; 250
    20ee:	54 e4       	ldi	r21, 0x44	; 68
    20f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	8e 8b       	std	Y+22, r24	; 0x16
    20fa:	9f 8b       	std	Y+23, r25	; 0x17
    20fc:	a8 8f       	std	Y+24, r26	; 0x18
    20fe:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2100:	6e 89       	ldd	r22, Y+22	; 0x16
    2102:	7f 89       	ldd	r23, Y+23	; 0x17
    2104:	88 8d       	ldd	r24, Y+24	; 0x18
    2106:	99 8d       	ldd	r25, Y+25	; 0x19
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e8       	ldi	r20, 0x80	; 128
    210e:	5f e3       	ldi	r21, 0x3F	; 63
    2110:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2114:	88 23       	and	r24, r24
    2116:	2c f4       	brge	.+10     	; 0x2122 <HLCD_voidInit+0x3cc>
		__ticks = 1;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	9d 8b       	std	Y+21, r25	; 0x15
    211e:	8c 8b       	std	Y+20, r24	; 0x14
    2120:	3f c0       	rjmp	.+126    	; 0x21a0 <HLCD_voidInit+0x44a>
	else if (__tmp > 65535)
    2122:	6e 89       	ldd	r22, Y+22	; 0x16
    2124:	7f 89       	ldd	r23, Y+23	; 0x17
    2126:	88 8d       	ldd	r24, Y+24	; 0x18
    2128:	99 8d       	ldd	r25, Y+25	; 0x19
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	3f ef       	ldi	r19, 0xFF	; 255
    212e:	4f e7       	ldi	r20, 0x7F	; 127
    2130:	57 e4       	ldi	r21, 0x47	; 71
    2132:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2136:	18 16       	cp	r1, r24
    2138:	4c f5       	brge	.+82     	; 0x218c <HLCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    213c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    213e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2140:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e2       	ldi	r20, 0x20	; 32
    2148:	51 e4       	ldi	r21, 0x41	; 65
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	bc 01       	movw	r22, r24
    2154:	cd 01       	movw	r24, r26
    2156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	9d 8b       	std	Y+21, r25	; 0x15
    2160:	8c 8b       	std	Y+20, r24	; 0x14
    2162:	0f c0       	rjmp	.+30     	; 0x2182 <HLCD_voidInit+0x42c>
    2164:	88 ec       	ldi	r24, 0xC8	; 200
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	9b 8b       	std	Y+19, r25	; 0x13
    216a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    216c:	8a 89       	ldd	r24, Y+18	; 0x12
    216e:	9b 89       	ldd	r25, Y+19	; 0x13
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <HLCD_voidInit+0x41a>
    2174:	9b 8b       	std	Y+19, r25	; 0x13
    2176:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2178:	8c 89       	ldd	r24, Y+20	; 0x14
    217a:	9d 89       	ldd	r25, Y+21	; 0x15
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	9d 8b       	std	Y+21, r25	; 0x15
    2180:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2182:	8c 89       	ldd	r24, Y+20	; 0x14
    2184:	9d 89       	ldd	r25, Y+21	; 0x15
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	69 f7       	brne	.-38     	; 0x2164 <HLCD_voidInit+0x40e>
    218a:	24 c0       	rjmp	.+72     	; 0x21d4 <HLCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218c:	6e 89       	ldd	r22, Y+22	; 0x16
    218e:	7f 89       	ldd	r23, Y+23	; 0x17
    2190:	88 8d       	ldd	r24, Y+24	; 0x18
    2192:	99 8d       	ldd	r25, Y+25	; 0x19
    2194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	9d 8b       	std	Y+21, r25	; 0x15
    219e:	8c 8b       	std	Y+20, r24	; 0x14
    21a0:	8c 89       	ldd	r24, Y+20	; 0x14
    21a2:	9d 89       	ldd	r25, Y+21	; 0x15
    21a4:	99 8b       	std	Y+17, r25	; 0x11
    21a6:	88 8b       	std	Y+16, r24	; 0x10
    21a8:	88 89       	ldd	r24, Y+16	; 0x10
    21aa:	99 89       	ldd	r25, Y+17	; 0x11
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <HLCD_voidInit+0x456>
    21b0:	99 8b       	std	Y+17, r25	; 0x11
    21b2:	88 8b       	std	Y+16, r24	; 0x10
    21b4:	0f c0       	rjmp	.+30     	; 0x21d4 <HLCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21b6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21b8:	78 a1       	ldd	r23, Y+32	; 0x20
    21ba:	89 a1       	ldd	r24, Y+33	; 0x21
    21bc:	9a a1       	ldd	r25, Y+34	; 0x22
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	8e 8f       	std	Y+30, r24	; 0x1e
    21c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21ca:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ce:	8a 95       	dec	r24
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <HLCD_voidInit+0x478>
    21d2:	8f 87       	std	Y+15, r24	; 0x0f
	//Wait FOR more than 38us
	_delay_us(40);
	//DISPLAY clear
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a0 e0       	ldi	r26, 0x00	; 0
    21e0:	b0 e4       	ldi	r27, 0x40	; 64
    21e2:	8b 87       	std	Y+11, r24	; 0x0b
    21e4:	9c 87       	std	Y+12, r25	; 0x0c
    21e6:	ad 87       	std	Y+13, r26	; 0x0d
    21e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	4a ef       	ldi	r20, 0xFA	; 250
    21f8:	54 e4       	ldi	r21, 0x44	; 68
    21fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	8f 83       	std	Y+7, r24	; 0x07
    2204:	98 87       	std	Y+8, r25	; 0x08
    2206:	a9 87       	std	Y+9, r26	; 0x09
    2208:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    220a:	6f 81       	ldd	r22, Y+7	; 0x07
    220c:	78 85       	ldd	r23, Y+8	; 0x08
    220e:	89 85       	ldd	r24, Y+9	; 0x09
    2210:	9a 85       	ldd	r25, Y+10	; 0x0a
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    221e:	88 23       	and	r24, r24
    2220:	2c f4       	brge	.+10     	; 0x222c <HLCD_voidInit+0x4d6>
		__ticks = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	8d 83       	std	Y+5, r24	; 0x05
    222a:	3f c0       	rjmp	.+126    	; 0x22aa <HLCD_voidInit+0x554>
	else if (__tmp > 65535)
    222c:	6f 81       	ldd	r22, Y+7	; 0x07
    222e:	78 85       	ldd	r23, Y+8	; 0x08
    2230:	89 85       	ldd	r24, Y+9	; 0x09
    2232:	9a 85       	ldd	r25, Y+10	; 0x0a
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2240:	18 16       	cp	r1, r24
    2242:	4c f5       	brge	.+82     	; 0x2296 <HLCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2244:	6b 85       	ldd	r22, Y+11	; 0x0b
    2246:	7c 85       	ldd	r23, Y+12	; 0x0c
    2248:	8d 85       	ldd	r24, Y+13	; 0x0d
    224a:	9e 85       	ldd	r25, Y+14	; 0x0e
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	8d 83       	std	Y+5, r24	; 0x05
    226c:	0f c0       	rjmp	.+30     	; 0x228c <HLCD_voidInit+0x536>
    226e:	88 ec       	ldi	r24, 0xC8	; 200
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9c 83       	std	Y+4, r25	; 0x04
    2274:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <HLCD_voidInit+0x524>
    227e:	9c 83       	std	Y+4, r25	; 0x04
    2280:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2282:	8d 81       	ldd	r24, Y+5	; 0x05
    2284:	9e 81       	ldd	r25, Y+6	; 0x06
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	9e 83       	std	Y+6, r25	; 0x06
    228a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228c:	8d 81       	ldd	r24, Y+5	; 0x05
    228e:	9e 81       	ldd	r25, Y+6	; 0x06
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	69 f7       	brne	.-38     	; 0x226e <HLCD_voidInit+0x518>
    2294:	14 c0       	rjmp	.+40     	; 0x22be <HLCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2296:	6f 81       	ldd	r22, Y+7	; 0x07
    2298:	78 85       	ldd	r23, Y+8	; 0x08
    229a:	89 85       	ldd	r24, Y+9	; 0x09
    229c:	9a 85       	ldd	r25, Y+10	; 0x0a
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9e 83       	std	Y+6, r25	; 0x06
    22a8:	8d 83       	std	Y+5, r24	; 0x05
    22aa:	8d 81       	ldd	r24, Y+5	; 0x05
    22ac:	9e 81       	ldd	r25, Y+6	; 0x06
    22ae:	9a 83       	std	Y+2, r25	; 0x02
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	9a 81       	ldd	r25, Y+2	; 0x02
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <HLCD_voidInit+0x560>
    22ba:	9a 83       	std	Y+2, r25	; 0x02
    22bc:	89 83       	std	Y+1, r24	; 0x01
	//Wait FOR more than 1.53ms
	_delay_ms(2);
	//Entry Mode set
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    22be:	86 e0       	ldi	r24, 0x06	; 6
    22c0:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>

}
    22c4:	c4 5b       	subi	r28, 0xB4	; 180
    22c6:	df 4f       	sbci	r29, 0xFF	; 255
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	cd bf       	out	0x3d, r28	; 61
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	1f 91       	pop	r17
    22d8:	0f 91       	pop	r16
    22da:	08 95       	ret

000022dc <HLCD_voidDisplayClear>:
void HLCD_voidDisplayClear(void)
{
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	2e 97       	sbiw	r28, 0x0e	; 14
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
	//DISPLAY clear
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	a0 e0       	ldi	r26, 0x00	; 0
    22fc:	b0 e4       	ldi	r27, 0x40	; 64
    22fe:	8b 87       	std	Y+11, r24	; 0x0b
    2300:	9c 87       	std	Y+12, r25	; 0x0c
    2302:	ad 87       	std	Y+13, r26	; 0x0d
    2304:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2306:	6b 85       	ldd	r22, Y+11	; 0x0b
    2308:	7c 85       	ldd	r23, Y+12	; 0x0c
    230a:	8d 85       	ldd	r24, Y+13	; 0x0d
    230c:	9e 85       	ldd	r25, Y+14	; 0x0e
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a ef       	ldi	r20, 0xFA	; 250
    2314:	54 e4       	ldi	r21, 0x44	; 68
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	8f 83       	std	Y+7, r24	; 0x07
    2320:	98 87       	std	Y+8, r25	; 0x08
    2322:	a9 87       	std	Y+9, r26	; 0x09
    2324:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2326:	6f 81       	ldd	r22, Y+7	; 0x07
    2328:	78 85       	ldd	r23, Y+8	; 0x08
    232a:	89 85       	ldd	r24, Y+9	; 0x09
    232c:	9a 85       	ldd	r25, Y+10	; 0x0a
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    233a:	88 23       	and	r24, r24
    233c:	2c f4       	brge	.+10     	; 0x2348 <HLCD_voidDisplayClear+0x6c>
		__ticks = 1;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9e 83       	std	Y+6, r25	; 0x06
    2344:	8d 83       	std	Y+5, r24	; 0x05
    2346:	3f c0       	rjmp	.+126    	; 0x23c6 <HLCD_voidDisplayClear+0xea>
	else if (__tmp > 65535)
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	3f ef       	ldi	r19, 0xFF	; 255
    2354:	4f e7       	ldi	r20, 0x7F	; 127
    2356:	57 e4       	ldi	r21, 0x47	; 71
    2358:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    235c:	18 16       	cp	r1, r24
    235e:	4c f5       	brge	.+82     	; 0x23b2 <HLCD_voidDisplayClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2360:	6b 85       	ldd	r22, Y+11	; 0x0b
    2362:	7c 85       	ldd	r23, Y+12	; 0x0c
    2364:	8d 85       	ldd	r24, Y+13	; 0x0d
    2366:	9e 85       	ldd	r25, Y+14	; 0x0e
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e2       	ldi	r20, 0x20	; 32
    236e:	51 e4       	ldi	r21, 0x41	; 65
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	0f c0       	rjmp	.+30     	; 0x23a8 <HLCD_voidDisplayClear+0xcc>
    238a:	88 ec       	ldi	r24, 0xC8	; 200
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9c 83       	std	Y+4, r25	; 0x04
    2390:	8b 83       	std	Y+3, r24	; 0x03
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <HLCD_voidDisplayClear+0xba>
    239a:	9c 83       	std	Y+4, r25	; 0x04
    239c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	69 f7       	brne	.-38     	; 0x238a <HLCD_voidDisplayClear+0xae>
    23b0:	14 c0       	rjmp	.+40     	; 0x23da <HLCD_voidDisplayClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b2:	6f 81       	ldd	r22, Y+7	; 0x07
    23b4:	78 85       	ldd	r23, Y+8	; 0x08
    23b6:	89 85       	ldd	r24, Y+9	; 0x09
    23b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9e 83       	std	Y+6, r25	; 0x06
    23c4:	8d 83       	std	Y+5, r24	; 0x05
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	9a 83       	std	Y+2, r25	; 0x02
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	9a 81       	ldd	r25, Y+2	; 0x02
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <HLCD_voidDisplayClear+0xf6>
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
	//Wait FOR more than 1.53ms
	_delay_ms(2);
}
    23da:	2e 96       	adiw	r28, 0x0e	; 14
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <HLCD_voidSendString>:
void HLCD_voidSendString(u8 *A_pu8String)
{
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <HLCD_voidSendString+0x6>
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	9a 83       	std	Y+2, r25	; 0x02
    23f8:	89 83       	std	Y+1, r24	; 0x01
    23fa:	0b c0       	rjmp	.+22     	; 0x2412 <HLCD_voidSendString+0x26>
   while(*A_pu8String>0)
  {
	   HLCD_voidSendData(*A_pu8String++);
    23fc:	e9 81       	ldd	r30, Y+1	; 0x01
    23fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2400:	20 81       	ld	r18, Z
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	9a 81       	ldd	r25, Y+2	; 0x02
    2406:	01 96       	adiw	r24, 0x01	; 1
    2408:	9a 83       	std	Y+2, r25	; 0x02
    240a:	89 83       	std	Y+1, r24	; 0x01
    240c:	82 2f       	mov	r24, r18
    240e:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <HLCD_voidSendData>
	//Wait FOR more than 1.53ms
	_delay_ms(2);
}
void HLCD_voidSendString(u8 *A_pu8String)
{
   while(*A_pu8String>0)
    2412:	e9 81       	ldd	r30, Y+1	; 0x01
    2414:	fa 81       	ldd	r31, Y+2	; 0x02
    2416:	80 81       	ld	r24, Z
    2418:	88 23       	and	r24, r24
    241a:	81 f7       	brne	.-32     	; 0x23fc <HLCD_voidSendString+0x10>
  {
	   HLCD_voidSendData(*A_pu8String++);
  }
}
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <HLCD_voidGoToPosition>:


void HLCD_voidGoToPosition(u8 A_u8Row,u8 A_u8Column)
{
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	00 d0       	rcall	.+0      	; 0x242c <HLCD_voidGoToPosition+0x6>
    242c:	00 d0       	rcall	.+0      	; 0x242e <HLCD_voidGoToPosition+0x8>
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	6a 83       	std	Y+2, r22	; 0x02
switch(A_u8Row)
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	28 2f       	mov	r18, r24
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	3c 83       	std	Y+4, r19	; 0x04
    243e:	2b 83       	std	Y+3, r18	; 0x03
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	81 30       	cpi	r24, 0x01	; 1
    2446:	91 05       	cpc	r25, r1
    2448:	31 f0       	breq	.+12     	; 0x2456 <HLCD_voidGoToPosition+0x30>
    244a:	2b 81       	ldd	r18, Y+3	; 0x03
    244c:	3c 81       	ldd	r19, Y+4	; 0x04
    244e:	22 30       	cpi	r18, 0x02	; 2
    2450:	31 05       	cpc	r19, r1
    2452:	31 f0       	breq	.+12     	; 0x2460 <HLCD_voidGoToPosition+0x3a>
    2454:	09 c0       	rjmp	.+18     	; 0x2468 <HLCD_voidGoToPosition+0x42>
{
case LCD_ROW_ONE: HLCD_voidSendCommand(LCD_ROW1_ADDRESS+A_u8Column); break;
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	81 58       	subi	r24, 0x81	; 129
    245a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>
    245e:	04 c0       	rjmp	.+8      	; 0x2468 <HLCD_voidGoToPosition+0x42>
case LCD_ROW_TWO: HLCD_voidSendCommand(LCD_ROW2_ADDRESS+A_u8Column); break;
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	81 54       	subi	r24, 0x41	; 65
    2464:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>
default: break;
}
}
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	08 95       	ret

00002476 <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber(u32 A_u32Number)
{
    2476:	df 93       	push	r29
    2478:	cf 93       	push	r28
    247a:	00 d0       	rcall	.+0      	; 0x247c <HLCD_voidDisplayNumber+0x6>
    247c:	00 d0       	rcall	.+0      	; 0x247e <HLCD_voidDisplayNumber+0x8>
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	9c 83       	std	Y+4, r25	; 0x04
    2484:	8b 83       	std	Y+3, r24	; 0x03
u32 local_u32Number=1;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9a 83       	std	Y+2, r25	; 0x02
    248c:	89 83       	std	Y+1, r24	; 0x01
if(A_u32Number==0)
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	9c 81       	ldd	r25, Y+4	; 0x04
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	31 f5       	brne	.+76     	; 0x24e2 <HLCD_voidDisplayNumber+0x6c>
{
HLCD_voidSendCommand('0');
    2496:	80 e3       	ldi	r24, 0x30	; 48
    2498:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>
    249c:	22 c0       	rjmp	.+68     	; 0x24e2 <HLCD_voidDisplayNumber+0x6c>
}
while(A_u32Number!=0)
{
	//1-->local_u32Number=(1*10)+(75%10)=10+5=15
	//2-->local_u32Number=(15*10)+(7%10)=150+7=157
	local_u32Number=((local_u32Number*10)+(A_u32Number%10));
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	9a 81       	ldd	r25, Y+2	; 0x02
    24a2:	9c 01       	movw	r18, r24
    24a4:	22 0f       	add	r18, r18
    24a6:	33 1f       	adc	r19, r19
    24a8:	c9 01       	movw	r24, r18
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	f9 01       	movw	r30, r18
    24b4:	e8 0f       	add	r30, r24
    24b6:	f9 1f       	adc	r31, r25
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	2a e0       	ldi	r18, 0x0A	; 10
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	b9 01       	movw	r22, r18
    24c2:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <__udivmodhi4>
    24c6:	8e 0f       	add	r24, r30
    24c8:	9f 1f       	adc	r25, r31
    24ca:	9a 83       	std	Y+2, r25	; 0x02
    24cc:	89 83       	std	Y+1, r24	; 0x01
	//1-->A_u32Number=75/10=7.5=7
	//2-->A_u32Number=7/10=0.7=0
	A_u32Number=A_u32Number/10;
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	9c 81       	ldd	r25, Y+4	; 0x04
    24d2:	2a e0       	ldi	r18, 0x0A	; 10
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	b9 01       	movw	r22, r18
    24d8:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <__udivmodhi4>
    24dc:	cb 01       	movw	r24, r22
    24de:	9c 83       	std	Y+4, r25	; 0x04
    24e0:	8b 83       	std	Y+3, r24	; 0x03
u32 local_u32Number=1;
if(A_u32Number==0)
{
HLCD_voidSendCommand('0');
}
while(A_u32Number!=0)
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	9c 81       	ldd	r25, Y+4	; 0x04
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	d1 f6       	brne	.-76     	; 0x249e <HLCD_voidDisplayNumber+0x28>
    24ea:	14 c0       	rjmp	.+40     	; 0x2514 <HLCD_voidDisplayNumber+0x9e>
}
while(local_u32Number!=1)
{
	//1-->(157%10)+48=7+48=55       55 by ASCII is 7
	//2-->(15% 10)+48=5+48=53       53 by ASCII is 5
	HLCD_voidSendData((local_u32Number%10)+48);
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	2a e0       	ldi	r18, 0x0A	; 10
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	b9 01       	movw	r22, r18
    24f6:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <__udivmodhi4>
    24fa:	80 5d       	subi	r24, 0xD0	; 208
    24fc:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <HLCD_voidSendData>
	//1-->157/10=15
	//2-->15/10=1.5=1
	local_u32Number=local_u32Number/10;
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	9a 81       	ldd	r25, Y+2	; 0x02
    2504:	2a e0       	ldi	r18, 0x0A	; 10
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	b9 01       	movw	r22, r18
    250a:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <__udivmodhi4>
    250e:	cb 01       	movw	r24, r22
    2510:	9a 83       	std	Y+2, r25	; 0x02
    2512:	89 83       	std	Y+1, r24	; 0x01
	local_u32Number=((local_u32Number*10)+(A_u32Number%10));
	//1-->A_u32Number=75/10=7.5=7
	//2-->A_u32Number=7/10=0.7=0
	A_u32Number=A_u32Number/10;
}
while(local_u32Number!=1)
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	9a 81       	ldd	r25, Y+2	; 0x02
    2518:	81 30       	cpi	r24, 0x01	; 1
    251a:	91 05       	cpc	r25, r1
    251c:	39 f7       	brne	.-50     	; 0x24ec <HLCD_voidDisplayNumber+0x76>
	HLCD_voidSendData((local_u32Number%10)+48);
	//1-->157/10=15
	//2-->15/10=1.5=1
	local_u32Number=local_u32Number/10;
}
}
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <HLCD_voidSpecialCharacter>:

void HLCD_voidSpecialCharacter(u8 *A_pu8CharArr,u8 A_u8PatternNumber,u8 A_u8RowNumber,u8 A_u8ColumnNumber)
{
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	27 97       	sbiw	r28, 0x07	; 7
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	9c 83       	std	Y+4, r25	; 0x04
    2542:	8b 83       	std	Y+3, r24	; 0x03
    2544:	6d 83       	std	Y+5, r22	; 0x05
    2546:	4e 83       	std	Y+6, r20	; 0x06
    2548:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8CGRAMAddress,local_u8Counter;
	/* Calculate CGRAM Address = Pattern Number * 8 */
	local_u8CGRAMAddress=A_u8PatternNumber*8;
    254a:	8d 81       	ldd	r24, Y+5	; 0x05
    254c:	88 2f       	mov	r24, r24
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	88 0f       	add	r24, r24
    2552:	99 1f       	adc	r25, r25
    2554:	88 0f       	add	r24, r24
    2556:	99 1f       	adc	r25, r25
    2558:	88 0f       	add	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(local_u8CGRAMAddress,6);
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	80 64       	ori	r24, 0x40	; 64
    2562:	8a 83       	std	Y+2, r24	; 0x02
	/* Send Command to set CGRAM Address */
	HLCD_voidSendCommand(local_u8CGRAMAddress);
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>

	for(local_u8Counter=0;local_u8Counter<8;local_u8Counter++)
    256a:	19 82       	std	Y+1, r1	; 0x01
    256c:	0e c0       	rjmp	.+28     	; 0x258a <HLCD_voidSpecialCharacter+0x5e>
	{
		/* Send byte from character array */
		HLCD_voidSendData(A_pu8CharArr[local_u8Counter]);
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	9c 81       	ldd	r25, Y+4	; 0x04
    2578:	fc 01       	movw	r30, r24
    257a:	e2 0f       	add	r30, r18
    257c:	f3 1f       	adc	r31, r19
    257e:	80 81       	ld	r24, Z
    2580:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <HLCD_voidSendData>
	local_u8CGRAMAddress=A_u8PatternNumber*8;
	SET_BIT(local_u8CGRAMAddress,6);
	/* Send Command to set CGRAM Address */
	HLCD_voidSendCommand(local_u8CGRAMAddress);

	for(local_u8Counter=0;local_u8Counter<8;local_u8Counter++)
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	8f 5f       	subi	r24, 0xFF	; 255
    2588:	89 83       	std	Y+1, r24	; 0x01
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	88 30       	cpi	r24, 0x08	; 8
    258e:	78 f3       	brcs	.-34     	; 0x256e <HLCD_voidSpecialCharacter+0x42>
	{
		/* Send byte from character array */
		HLCD_voidSendData(A_pu8CharArr[local_u8Counter]);
	}
	/* Send Command to set DDRAM Address */
	HLCD_voidGoToPosition(A_u8RowNumber,A_u8ColumnNumber);
    2590:	8e 81       	ldd	r24, Y+6	; 0x06
    2592:	6f 81       	ldd	r22, Y+7	; 0x07
    2594:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
	/* Display pattern from CGRAM */
	HLCD_voidSendData(A_u8PatternNumber);
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <HLCD_voidSendData>

}
    259e:	27 96       	adiw	r28, 0x07	; 7
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	f8 94       	cli
    25a4:	de bf       	out	0x3e, r29	; 62
    25a6:	0f be       	out	0x3f, r0	; 63
    25a8:	cd bf       	out	0x3d, r28	; 61
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <HLED_voidTurnOn>:
#include "../include/HAL/LED/LED_interface.h"
#include "../include/HAL/LED/LED_private.h"
#include "../include/HAL/LED/LED_configuration.h"

void HLED_voidTurnOn(u8 A_u8PortID, u8 A_u8PinId)
{
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <HLED_voidTurnOn+0x6>
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	89 83       	std	Y+1, r24	; 0x01
    25bc:	6a 83       	std	Y+2, r22	; 0x02
    MDIO_voidSetPinValue(A_u8PortID, A_u8PinId, LED_ON);
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	6a 81       	ldd	r22, Y+2	; 0x02
    25c2:	41 e0       	ldi	r20, 0x01	; 1
    25c4:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
}
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <HLED_voidTurnOff>:
void HLED_voidTurnOff(u8 A_u8PortID, u8 A_u8PinId)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <HLED_voidTurnOff+0x6>
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	89 83       	std	Y+1, r24	; 0x01
    25de:	6a 83       	std	Y+2, r22	; 0x02
    MDIO_voidSetPinValue(A_u8PortID, A_u8PinId, LED_OFF);
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	6a 81       	ldd	r22, Y+2	; 0x02
    25e4:	40 e0       	ldi	r20, 0x00	; 0
    25e6:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
}
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <HLED_voidSetLedStatus>:

// LED_ON - LED_OFF
void HLED_voidSetLedStatus(u8 A_u8PortID, u8 A_u8PinId, u8 A_u8LedStatus)
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <HLED_voidSetLedStatus+0x6>
    25fa:	0f 92       	push	r0
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	89 83       	std	Y+1, r24	; 0x01
    2602:	6a 83       	std	Y+2, r22	; 0x02
    2604:	4b 83       	std	Y+3, r20	; 0x03
    MDIO_voidSetPinValue(A_u8PortID, A_u8PinId, A_u8LedStatus);
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	6a 81       	ldd	r22, Y+2	; 0x02
    260a:	4b 81       	ldd	r20, Y+3	; 0x03
    260c:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
}
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	08 95       	ret

0000261c <HLED_voidToggleLed>:

void HLED_voidToggleLed(u8 A_u8PortID, u8 A_u8PinId)
{
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	00 d0       	rcall	.+0      	; 0x2622 <HLED_voidToggleLed+0x6>
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	89 83       	std	Y+1, r24	; 0x01
    2628:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogglePinValue(A_u8PortID, A_u8PinId)	;
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	6a 81       	ldd	r22, Y+2	; 0x02
    262e:	0e 94 30 0a 	call	0x1460	; 0x1460 <MDIO_voidTogglePinValue>
}
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <HSERVO_voidSetServoAngle>:
#include "../include/MCAL/TIMER1/TIMER1_interface.h"
#include "../include/MCAL/TIMER1/TIMER1_private.h"
#include "../include/MCAL/TIMER1/TIMER1_configuration.h"

void HSERVO_voidSetServoAngle(u16 A_u16Angle)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	00 d0       	rcall	.+0      	; 0x2642 <HSERVO_voidSetServoAngle+0x6>
    2642:	00 d0       	rcall	.+0      	; 0x2644 <HSERVO_voidSetServoAngle+0x8>
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	9c 83       	std	Y+4, r25	; 0x04
    264a:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16OCR1Value=((A_u16Angle*1000UL)/180)+999;
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	9c 81       	ldd	r25, Y+4	; 0x04
    2650:	cc 01       	movw	r24, r24
    2652:	a0 e0       	ldi	r26, 0x00	; 0
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	28 ee       	ldi	r18, 0xE8	; 232
    2658:	33 e0       	ldi	r19, 0x03	; 3
    265a:	40 e0       	ldi	r20, 0x00	; 0
    265c:	50 e0       	ldi	r21, 0x00	; 0
    265e:	bc 01       	movw	r22, r24
    2660:	cd 01       	movw	r24, r26
    2662:	0e 94 49 2a 	call	0x5492	; 0x5492 <__mulsi3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	24 eb       	ldi	r18, 0xB4	; 180
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e0       	ldi	r20, 0x00	; 0
    2670:	50 e0       	ldi	r21, 0x00	; 0
    2672:	bc 01       	movw	r22, r24
    2674:	cd 01       	movw	r24, r26
    2676:	0e 94 7c 2a 	call	0x54f8	; 0x54f8 <__udivmodsi4>
    267a:	da 01       	movw	r26, r20
    267c:	c9 01       	movw	r24, r18
    267e:	89 51       	subi	r24, 0x19	; 25
    2680:	9c 4f       	sbci	r25, 0xFC	; 252
    2682:	9a 83       	std	Y+2, r25	; 0x02
    2684:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_voidSetOCR1Value(local_u16OCR1Value);
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	9a 81       	ldd	r25, Y+2	; 0x02
    268a:	0e 94 a0 13 	call	0x2740	; 0x2740 <MTIMER1_voidSetOCR1Value>
}
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <MTIMER1_voidInit>:
#define NULL 0
void (*TIMER1_CALLBACK)(void) = NULL;


void MTIMER1_voidInit(void)
{
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
	//Waveform Generation Mode
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    26a4:	af e4       	ldi	r26, 0x4F	; 79
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	ef e4       	ldi	r30, 0x4F	; 79
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	8e 7f       	andi	r24, 0xFE	; 254
    26b0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    26b2:	af e4       	ldi	r26, 0x4F	; 79
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	ef e4       	ldi	r30, 0x4F	; 79
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	82 60       	ori	r24, 0x02	; 2
    26be:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    26c0:	ae e4       	ldi	r26, 0x4E	; 78
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	ee e4       	ldi	r30, 0x4E	; 78
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	88 60       	ori	r24, 0x08	; 8
    26cc:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    26ce:	ae e4       	ldi	r26, 0x4E	; 78
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	ee e4       	ldi	r30, 0x4E	; 78
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	80 61       	ori	r24, 0x10	; 16
    26da:	8c 93       	st	X, r24
	//Compare Output Mode for Compare unit A
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    26dc:	af e4       	ldi	r26, 0x4F	; 79
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	ef e4       	ldi	r30, 0x4F	; 79
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	8f 7b       	andi	r24, 0xBF	; 191
    26e8:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    26ea:	af e4       	ldi	r26, 0x4F	; 79
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	ef e4       	ldi	r30, 0x4F	; 79
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	80 68       	ori	r24, 0x80	; 128
    26f6:	8c 93       	st	X, r24
	//SET ICR1 VALUE
	ICR1=19999;
    26f8:	e6 e4       	ldi	r30, 0x46	; 70
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	8f e1       	ldi	r24, 0x1F	; 31
    26fe:	9e e4       	ldi	r25, 0x4E	; 78
    2700:	91 83       	std	Z+1, r25	; 0x01
    2702:	80 83       	st	Z, r24
	//SET OCR1A VALUE
	OCR1A=1500;
    2704:	ea e4       	ldi	r30, 0x4A	; 74
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	8c ed       	ldi	r24, 0xDC	; 220
    270a:	95 e0       	ldi	r25, 0x05	; 5
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	80 83       	st	Z, r24
	//CLK CONFIGURATION /8
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    2710:	ae e4       	ldi	r26, 0x4E	; 78
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	ee e4       	ldi	r30, 0x4E	; 78
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	8e 7f       	andi	r24, 0xFE	; 254
    271c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    271e:	ae e4       	ldi	r26, 0x4E	; 78
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	ee e4       	ldi	r30, 0x4E	; 78
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	82 60       	ori	r24, 0x02	; 2
    272a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    272c:	ae e4       	ldi	r26, 0x4E	; 78
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	ee e4       	ldi	r30, 0x4E	; 78
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	8b 7f       	andi	r24, 0xFB	; 251
    2738:	8c 93       	st	X, r24
}
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <MTIMER1_voidSetOCR1Value>:

void MTIMER1_voidSetOCR1Value(u16 A_u16Angle)
{
    2740:	df 93       	push	r29
    2742:	cf 93       	push	r28
    2744:	00 d0       	rcall	.+0      	; 0x2746 <MTIMER1_voidSetOCR1Value+0x6>
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
    274a:	9a 83       	std	Y+2, r25	; 0x02
    274c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=A_u16Angle;
    274e:	ea e4       	ldi	r30, 0x4A	; 74
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	9a 81       	ldd	r25, Y+2	; 0x02
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	80 83       	st	Z, r24
}
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <MTIMER1_voidSetTimer1Value>:

void MTIMER1_voidSetTimer1Value(u16 A_u16Value)
{
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	00 d0       	rcall	.+0      	; 0x276a <MTIMER1_voidSetTimer1Value+0x6>
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	9a 83       	std	Y+2, r25	; 0x02
    2770:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=A_u16Value;
    2772:	ec e4       	ldi	r30, 0x4C	; 76
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	9a 81       	ldd	r25, Y+2	; 0x02
    277a:	91 83       	std	Z+1, r25	; 0x01
    277c:	80 83       	st	Z, r24
}
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <MTIMER1_u16ReadTimerValue>:

u16 MTIMER1_u16ReadTimerValue(void)
{
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    2790:	ec e4       	ldi	r30, 0x4C	; 76
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	91 81       	ldd	r25, Z+1	; 0x01
}
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <MTIMER1_u16ReadTimer1Value>:

u16 MTIMER1_u16ReadTimer1Value(void)
{
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    27a6:	e6 e4       	ldi	r30, 0x46	; 70
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	91 81       	ldd	r25, Z+1	; 0x01
}
    27ae:	cf 91       	pop	r28
    27b0:	df 91       	pop	r29
    27b2:	08 95       	ret

000027b4 <MTIMER1_voidEnableICU>:

#define TIMSK_TICIE1 5
#define TCCR1B_ICES1 6

void MTIMER1_voidEnableICU (void)
{
    27b4:	df 93       	push	r29
    27b6:	cf 93       	push	r28
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
	//Input Capture Interrupt Enable
	SET_BIT(TIMSK,TIMSK_TICIE1);
    27bc:	a9 e5       	ldi	r26, 0x59	; 89
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e9 e5       	ldi	r30, 0x59	; 89
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	80 62       	ori	r24, 0x20	; 32
    27c8:	8c 93       	st	X, r24
	//Input Capture Edge Select
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    27ca:	ae e4       	ldi	r26, 0x4E	; 78
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	ee e4       	ldi	r30, 0x4E	; 78
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	80 64       	ori	r24, 0x40	; 64
    27d6:	8c 93       	st	X, r24
}
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	08 95       	ret

000027de <MTIMER1_voidDisableICU>:

void MTIMER1_voidDisableICU (void)
{
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
	//Input Capture Interrupt Enable
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    27e6:	a9 e5       	ldi	r26, 0x59	; 89
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	e9 e5       	ldi	r30, 0x59	; 89
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	8f 7d       	andi	r24, 0xDF	; 223
    27f2:	8c 93       	st	X, r24
}
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	08 95       	ret

000027fa <MTIMER1_voidSetCallBack>:

void MTIMER1_voidSetCallBack(void (*PtrToFunc)(void))
{
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	00 d0       	rcall	.+0      	; 0x2800 <MTIMER1_voidSetCallBack+0x6>
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
    2804:	9a 83       	std	Y+2, r25	; 0x02
    2806:	89 83       	std	Y+1, r24	; 0x01
	if(PtrToFunc!=NULL)
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	9a 81       	ldd	r25, Y+2	; 0x02
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	31 f0       	breq	.+12     	; 0x281c <MTIMER1_voidSetCallBack+0x22>
	{
		TIMER1_CALLBACK=PtrToFunc;
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	9a 81       	ldd	r25, Y+2	; 0x02
    2814:	90 93 c9 02 	sts	0x02C9, r25
    2818:	80 93 c8 02 	sts	0x02C8, r24
	}
}
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <__vector_6>:

void __vector_6 (void) __attribute__ ((signal));
void __vector_6 (void)
{
    2826:	1f 92       	push	r1
    2828:	0f 92       	push	r0
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	0f 92       	push	r0
    282e:	11 24       	eor	r1, r1
    2830:	2f 93       	push	r18
    2832:	3f 93       	push	r19
    2834:	4f 93       	push	r20
    2836:	5f 93       	push	r21
    2838:	6f 93       	push	r22
    283a:	7f 93       	push	r23
    283c:	8f 93       	push	r24
    283e:	9f 93       	push	r25
    2840:	af 93       	push	r26
    2842:	bf 93       	push	r27
    2844:	ef 93       	push	r30
    2846:	ff 93       	push	r31
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_CALLBACK!=NULL)
    2850:	80 91 c8 02 	lds	r24, 0x02C8
    2854:	90 91 c9 02 	lds	r25, 0x02C9
    2858:	00 97       	sbiw	r24, 0x00	; 0
    285a:	29 f0       	breq	.+10     	; 0x2866 <__vector_6+0x40>
	{
		TIMER1_CALLBACK();
    285c:	e0 91 c8 02 	lds	r30, 0x02C8
    2860:	f0 91 c9 02 	lds	r31, 0x02C9
    2864:	09 95       	icall
	}
}
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	ff 91       	pop	r31
    286c:	ef 91       	pop	r30
    286e:	bf 91       	pop	r27
    2870:	af 91       	pop	r26
    2872:	9f 91       	pop	r25
    2874:	8f 91       	pop	r24
    2876:	7f 91       	pop	r23
    2878:	6f 91       	pop	r22
    287a:	5f 91       	pop	r21
    287c:	4f 91       	pop	r20
    287e:	3f 91       	pop	r19
    2880:	2f 91       	pop	r18
    2882:	0f 90       	pop	r0
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	0f 90       	pop	r0
    2888:	1f 90       	pop	r1
    288a:	18 95       	reti

0000288c <MTIMER1_voidSetTrigger>:

#define ICU_FALLING_EDGE 0
#define ICU_RISING_EDGE  1

void MTIMER1_voidSetTrigger(u8 A_u8Trigger)
{
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	00 d0       	rcall	.+0      	; 0x2892 <MTIMER1_voidSetTrigger+0x6>
    2892:	0f 92       	push	r0
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
    2898:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8Trigger)
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	28 2f       	mov	r18, r24
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	3b 83       	std	Y+3, r19	; 0x03
    28a2:	2a 83       	std	Y+2, r18	; 0x02
    28a4:	8a 81       	ldd	r24, Y+2	; 0x02
    28a6:	9b 81       	ldd	r25, Y+3	; 0x03
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	31 f0       	breq	.+12     	; 0x28b8 <MTIMER1_voidSetTrigger+0x2c>
    28ac:	2a 81       	ldd	r18, Y+2	; 0x02
    28ae:	3b 81       	ldd	r19, Y+3	; 0x03
    28b0:	21 30       	cpi	r18, 0x01	; 1
    28b2:	31 05       	cpc	r19, r1
    28b4:	49 f0       	breq	.+18     	; 0x28c8 <MTIMER1_voidSetTrigger+0x3c>
    28b6:	0f c0       	rjmp	.+30     	; 0x28d6 <MTIMER1_voidSetTrigger+0x4a>
	{
	case ICU_FALLING_EDGE: CLR_BIT(TCCR1B,TCCR1B_ICES1); break;
    28b8:	ae e4       	ldi	r26, 0x4E	; 78
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	ee e4       	ldi	r30, 0x4E	; 78
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	8f 7b       	andi	r24, 0xBF	; 191
    28c4:	8c 93       	st	X, r24
    28c6:	07 c0       	rjmp	.+14     	; 0x28d6 <MTIMER1_voidSetTrigger+0x4a>
	case ICU_RISING_EDGE:  SET_BIT(TCCR1B,TCCR1B_ICES1); break;
    28c8:	ae e4       	ldi	r26, 0x4E	; 78
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	ee e4       	ldi	r30, 0x4E	; 78
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	80 64       	ori	r24, 0x40	; 64
    28d4:	8c 93       	st	X, r24
	}
}
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	08 95       	ret

000028e2 <main>:

#define KEY_PRESSED DIO_LOW


int main (void)
{
    28e2:	0f 93       	push	r16
    28e4:	1f 93       	push	r17
    28e6:	df 93       	push	r29
    28e8:	cf 93       	push	r28
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	c7 56       	subi	r28, 0x67	; 103
    28f0:	d1 40       	sbci	r29, 0x01	; 1
    28f2:	0f b6       	in	r0, 0x3f	; 63
    28f4:	f8 94       	cli
    28f6:	de bf       	out	0x3e, r29	; 62
    28f8:	0f be       	out	0x3f, r0	; 63
    28fa:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8PinValue=255;
    28fc:	fe 01       	movw	r30, r28
    28fe:	e5 5a       	subi	r30, 0xA5	; 165
    2900:	fe 4f       	sbci	r31, 0xFE	; 254
    2902:	8f ef       	ldi	r24, 0xFF	; 255
    2904:	80 83       	st	Z, r24
	u8 local_u8PressedKey=0xff;
    2906:	fe 01       	movw	r30, r28
    2908:	e6 5a       	subi	r30, 0xA6	; 166
    290a:	fe 4f       	sbci	r31, 0xFE	; 254
    290c:	8f ef       	ldi	r24, 0xFF	; 255
    290e:	80 83       	st	Z, r24
	static u8 local_u8Pass[4]="1234";
	u8 local_u8ClearPass[4]="CCCC";
    2910:	fe 01       	movw	r30, r28
    2912:	e4 5a       	subi	r30, 0xA4	; 164
    2914:	fe 4f       	sbci	r31, 0xFE	; 254
    2916:	80 91 99 02 	lds	r24, 0x0299
    291a:	90 91 9a 02 	lds	r25, 0x029A
    291e:	a0 91 9b 02 	lds	r26, 0x029B
    2922:	b0 91 9c 02 	lds	r27, 0x029C
    2926:	80 83       	st	Z, r24
    2928:	91 83       	std	Z+1, r25	; 0x01
    292a:	a2 83       	std	Z+2, r26	; 0x02
    292c:	b3 83       	std	Z+3, r27	; 0x03
	u8 local_u8EnteredPass[4];
	u8 local_u8NewPass[4];
	u8 local_u8TryAgain=1;
    292e:	fe 01       	movw	r30, r28
    2930:	e7 5a       	subi	r30, 0xA7	; 167
    2932:	fe 4f       	sbci	r31, 0xFE	; 254
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	80 83       	st	Z, r24
	u16 local_u16DigitalValue=0;
    2938:	fe 01       	movw	r30, r28
    293a:	e9 5a       	subi	r30, 0xA9	; 169
    293c:	fe 4f       	sbci	r31, 0xFE	; 254
    293e:	11 82       	std	Z+1, r1	; 0x01
    2940:	10 82       	st	Z, r1
	u16 local_u16AnalogValue=0;
    2942:	fe 01       	movw	r30, r28
    2944:	eb 5a       	subi	r30, 0xAB	; 171
    2946:	fe 4f       	sbci	r31, 0xFE	; 254
    2948:	11 82       	std	Z+1, r1	; 0x01
    294a:	10 82       	st	Z, r1
	u8 local_u8Flag=0;
    294c:	fe 01       	movw	r30, r28
    294e:	ec 5a       	subi	r30, 0xAC	; 172
    2950:	fe 4f       	sbci	r31, 0xFE	; 254
    2952:	10 82       	st	Z, r1

	MDIO_voidInit();
    2954:	0e 94 d0 06 	call	0xda0	; 0xda0 <MDIO_voidInit>
	HLCD_voidInit();
    2958:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <HLCD_voidInit>
	MADC_voidInit();
    295c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MADC_voidInit>
	MTIMER1_voidInit();
    2960:	0e 94 4e 13 	call	0x269c	; 0x269c <MTIMER1_voidInit>
	HSERVO_voidSetServoAngle(0);
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	0e 94 1e 13 	call	0x263c	; 0x263c <HSERVO_voidSetServoAngle>


	while(1)
	{
	local_u8PinValue=MDIO_voidGetPinValue(DIO_PORTA,PIN7);
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	67 e0       	ldi	r22, 0x07	; 7
    2970:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    2974:	fe 01       	movw	r30, r28
    2976:	e5 5a       	subi	r30, 0xA5	; 165
    2978:	fe 4f       	sbci	r31, 0xFE	; 254
    297a:	80 83       	st	Z, r24
	if(local_u8PinValue==KEY_PRESSED)
    297c:	fe 01       	movw	r30, r28
    297e:	e5 5a       	subi	r30, 0xA5	; 165
    2980:	fe 4f       	sbci	r31, 0xFE	; 254
    2982:	80 81       	ld	r24, Z
    2984:	88 23       	and	r24, r24
    2986:	11 f0       	breq	.+4      	; 0x298c <main+0xaa>
    2988:	0c 94 4d 29 	jmp	0x529a	; 0x529a <main+0x29b8>
	{
	while(1)
	{
		HLCD_voidDisplayClear();
    298c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
		HLCD_voidSendString("    WELCOME    ");
    2990:	80 e6       	ldi	r24, 0x60	; 96
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    2998:	fe 01       	movw	r30, r28
    299a:	e3 5b       	subi	r30, 0xB3	; 179
    299c:	fe 4f       	sbci	r31, 0xFE	; 254
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	aa ef       	ldi	r26, 0xFA	; 250
    29a4:	b4 e4       	ldi	r27, 0x44	; 68
    29a6:	80 83       	st	Z, r24
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	a2 83       	std	Z+2, r26	; 0x02
    29ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ae:	8e 01       	movw	r16, r28
    29b0:	07 5b       	subi	r16, 0xB7	; 183
    29b2:	1e 4f       	sbci	r17, 0xFE	; 254
    29b4:	fe 01       	movw	r30, r28
    29b6:	e3 5b       	subi	r30, 0xB3	; 179
    29b8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ba:	60 81       	ld	r22, Z
    29bc:	71 81       	ldd	r23, Z+1	; 0x01
    29be:	82 81       	ldd	r24, Z+2	; 0x02
    29c0:	93 81       	ldd	r25, Z+3	; 0x03
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	4a ef       	ldi	r20, 0xFA	; 250
    29c8:	54 e4       	ldi	r21, 0x44	; 68
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	f8 01       	movw	r30, r16
    29d4:	80 83       	st	Z, r24
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	a2 83       	std	Z+2, r26	; 0x02
    29da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29dc:	fe 01       	movw	r30, r28
    29de:	e7 5b       	subi	r30, 0xB7	; 183
    29e0:	fe 4f       	sbci	r31, 0xFE	; 254
    29e2:	60 81       	ld	r22, Z
    29e4:	71 81       	ldd	r23, Z+1	; 0x01
    29e6:	82 81       	ldd	r24, Z+2	; 0x02
    29e8:	93 81       	ldd	r25, Z+3	; 0x03
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e8       	ldi	r20, 0x80	; 128
    29f0:	5f e3       	ldi	r21, 0x3F	; 63
    29f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29f6:	88 23       	and	r24, r24
    29f8:	44 f4       	brge	.+16     	; 0x2a0a <main+0x128>
		__ticks = 1;
    29fa:	fe 01       	movw	r30, r28
    29fc:	e9 5b       	subi	r30, 0xB9	; 185
    29fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	80 83       	st	Z, r24
    2a08:	64 c0       	rjmp	.+200    	; 0x2ad2 <main+0x1f0>
	else if (__tmp > 65535)
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e7 5b       	subi	r30, 0xB7	; 183
    2a0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a10:	60 81       	ld	r22, Z
    2a12:	71 81       	ldd	r23, Z+1	; 0x01
    2a14:	82 81       	ldd	r24, Z+2	; 0x02
    2a16:	93 81       	ldd	r25, Z+3	; 0x03
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	3f ef       	ldi	r19, 0xFF	; 255
    2a1c:	4f e7       	ldi	r20, 0x7F	; 127
    2a1e:	57 e4       	ldi	r21, 0x47	; 71
    2a20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a24:	18 16       	cp	r1, r24
    2a26:	0c f0       	brlt	.+2      	; 0x2a2a <main+0x148>
    2a28:	43 c0       	rjmp	.+134    	; 0x2ab0 <main+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e3 5b       	subi	r30, 0xB3	; 179
    2a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a30:	60 81       	ld	r22, Z
    2a32:	71 81       	ldd	r23, Z+1	; 0x01
    2a34:	82 81       	ldd	r24, Z+2	; 0x02
    2a36:	93 81       	ldd	r25, Z+3	; 0x03
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e2       	ldi	r20, 0x20	; 32
    2a3e:	51 e4       	ldi	r21, 0x41	; 65
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	8e 01       	movw	r16, r28
    2a4a:	09 5b       	subi	r16, 0xB9	; 185
    2a4c:	1e 4f       	sbci	r17, 0xFE	; 254
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	f8 01       	movw	r30, r16
    2a5c:	91 83       	std	Z+1, r25	; 0x01
    2a5e:	80 83       	st	Z, r24
    2a60:	1f c0       	rjmp	.+62     	; 0x2aa0 <main+0x1be>
    2a62:	fe 01       	movw	r30, r28
    2a64:	eb 5b       	subi	r30, 0xBB	; 187
    2a66:	fe 4f       	sbci	r31, 0xFE	; 254
    2a68:	88 ec       	ldi	r24, 0xC8	; 200
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	80 83       	st	Z, r24
    2a70:	fe 01       	movw	r30, r28
    2a72:	eb 5b       	subi	r30, 0xBB	; 187
    2a74:	fe 4f       	sbci	r31, 0xFE	; 254
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	f1 f7       	brne	.-4      	; 0x2a7a <main+0x198>
    2a7e:	fe 01       	movw	r30, r28
    2a80:	eb 5b       	subi	r30, 0xBB	; 187
    2a82:	fe 4f       	sbci	r31, 0xFE	; 254
    2a84:	91 83       	std	Z+1, r25	; 0x01
    2a86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a88:	de 01       	movw	r26, r28
    2a8a:	a9 5b       	subi	r26, 0xB9	; 185
    2a8c:	be 4f       	sbci	r27, 0xFE	; 254
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e9 5b       	subi	r30, 0xB9	; 185
    2a92:	fe 4f       	sbci	r31, 0xFE	; 254
    2a94:	80 81       	ld	r24, Z
    2a96:	91 81       	ldd	r25, Z+1	; 0x01
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	11 96       	adiw	r26, 0x01	; 1
    2a9c:	9c 93       	st	X, r25
    2a9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e9 5b       	subi	r30, 0xB9	; 185
    2aa4:	fe 4f       	sbci	r31, 0xFE	; 254
    2aa6:	80 81       	ld	r24, Z
    2aa8:	91 81       	ldd	r25, Z+1	; 0x01
    2aaa:	00 97       	sbiw	r24, 0x00	; 0
    2aac:	d1 f6       	brne	.-76     	; 0x2a62 <main+0x180>
    2aae:	27 c0       	rjmp	.+78     	; 0x2afe <main+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab0:	8e 01       	movw	r16, r28
    2ab2:	09 5b       	subi	r16, 0xB9	; 185
    2ab4:	1e 4f       	sbci	r17, 0xFE	; 254
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e7 5b       	subi	r30, 0xB7	; 183
    2aba:	fe 4f       	sbci	r31, 0xFE	; 254
    2abc:	60 81       	ld	r22, Z
    2abe:	71 81       	ldd	r23, Z+1	; 0x01
    2ac0:	82 81       	ldd	r24, Z+2	; 0x02
    2ac2:	93 81       	ldd	r25, Z+3	; 0x03
    2ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	f8 01       	movw	r30, r16
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	80 83       	st	Z, r24
    2ad2:	de 01       	movw	r26, r28
    2ad4:	ad 5b       	subi	r26, 0xBD	; 189
    2ad6:	be 4f       	sbci	r27, 0xFE	; 254
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e9 5b       	subi	r30, 0xB9	; 185
    2adc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ade:	80 81       	ld	r24, Z
    2ae0:	91 81       	ldd	r25, Z+1	; 0x01
    2ae2:	8d 93       	st	X+, r24
    2ae4:	9c 93       	st	X, r25
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	ed 5b       	subi	r30, 0xBD	; 189
    2aea:	fe 4f       	sbci	r31, 0xFE	; 254
    2aec:	80 81       	ld	r24, Z
    2aee:	91 81       	ldd	r25, Z+1	; 0x01
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <main+0x20e>
    2af4:	fe 01       	movw	r30, r28
    2af6:	ed 5b       	subi	r30, 0xBD	; 189
    2af8:	fe 4f       	sbci	r31, 0xFE	; 254
    2afa:	91 83       	std	Z+1, r25	; 0x01
    2afc:	80 83       	st	Z, r24
		_delay_ms(2000);
		HLCD_voidDisplayClear();
    2afe:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
		HLCD_voidSendString("Choose Your Mode");
    2b02:	80 e7       	ldi	r24, 0x70	; 112
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	e1 5c       	subi	r30, 0xC1	; 193
    2b0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	aa ef       	ldi	r26, 0xFA	; 250
    2b16:	b4 e4       	ldi	r27, 0x44	; 68
    2b18:	80 83       	st	Z, r24
    2b1a:	91 83       	std	Z+1, r25	; 0x01
    2b1c:	a2 83       	std	Z+2, r26	; 0x02
    2b1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b20:	8e 01       	movw	r16, r28
    2b22:	05 5c       	subi	r16, 0xC5	; 197
    2b24:	1e 4f       	sbci	r17, 0xFE	; 254
    2b26:	fe 01       	movw	r30, r28
    2b28:	e1 5c       	subi	r30, 0xC1	; 193
    2b2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b2c:	60 81       	ld	r22, Z
    2b2e:	71 81       	ldd	r23, Z+1	; 0x01
    2b30:	82 81       	ldd	r24, Z+2	; 0x02
    2b32:	93 81       	ldd	r25, Z+3	; 0x03
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	4a ef       	ldi	r20, 0xFA	; 250
    2b3a:	54 e4       	ldi	r21, 0x44	; 68
    2b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	f8 01       	movw	r30, r16
    2b46:	80 83       	st	Z, r24
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	a2 83       	std	Z+2, r26	; 0x02
    2b4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b4e:	fe 01       	movw	r30, r28
    2b50:	e5 5c       	subi	r30, 0xC5	; 197
    2b52:	fe 4f       	sbci	r31, 0xFE	; 254
    2b54:	60 81       	ld	r22, Z
    2b56:	71 81       	ldd	r23, Z+1	; 0x01
    2b58:	82 81       	ldd	r24, Z+2	; 0x02
    2b5a:	93 81       	ldd	r25, Z+3	; 0x03
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	40 e8       	ldi	r20, 0x80	; 128
    2b62:	5f e3       	ldi	r21, 0x3F	; 63
    2b64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b68:	88 23       	and	r24, r24
    2b6a:	44 f4       	brge	.+16     	; 0x2b7c <main+0x29a>
		__ticks = 1;
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	e7 5c       	subi	r30, 0xC7	; 199
    2b70:	fe 4f       	sbci	r31, 0xFE	; 254
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	91 83       	std	Z+1, r25	; 0x01
    2b78:	80 83       	st	Z, r24
    2b7a:	64 c0       	rjmp	.+200    	; 0x2c44 <main+0x362>
	else if (__tmp > 65535)
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e5 5c       	subi	r30, 0xC5	; 197
    2b80:	fe 4f       	sbci	r31, 0xFE	; 254
    2b82:	60 81       	ld	r22, Z
    2b84:	71 81       	ldd	r23, Z+1	; 0x01
    2b86:	82 81       	ldd	r24, Z+2	; 0x02
    2b88:	93 81       	ldd	r25, Z+3	; 0x03
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	3f ef       	ldi	r19, 0xFF	; 255
    2b8e:	4f e7       	ldi	r20, 0x7F	; 127
    2b90:	57 e4       	ldi	r21, 0x47	; 71
    2b92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b96:	18 16       	cp	r1, r24
    2b98:	0c f0       	brlt	.+2      	; 0x2b9c <main+0x2ba>
    2b9a:	43 c0       	rjmp	.+134    	; 0x2c22 <main+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	e1 5c       	subi	r30, 0xC1	; 193
    2ba0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba2:	60 81       	ld	r22, Z
    2ba4:	71 81       	ldd	r23, Z+1	; 0x01
    2ba6:	82 81       	ldd	r24, Z+2	; 0x02
    2ba8:	93 81       	ldd	r25, Z+3	; 0x03
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	40 e2       	ldi	r20, 0x20	; 32
    2bb0:	51 e4       	ldi	r21, 0x41	; 65
    2bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	8e 01       	movw	r16, r28
    2bbc:	07 5c       	subi	r16, 0xC7	; 199
    2bbe:	1e 4f       	sbci	r17, 0xFE	; 254
    2bc0:	bc 01       	movw	r22, r24
    2bc2:	cd 01       	movw	r24, r26
    2bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	f8 01       	movw	r30, r16
    2bce:	91 83       	std	Z+1, r25	; 0x01
    2bd0:	80 83       	st	Z, r24
    2bd2:	1f c0       	rjmp	.+62     	; 0x2c12 <main+0x330>
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e9 5c       	subi	r30, 0xC9	; 201
    2bd8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bda:	88 ec       	ldi	r24, 0xC8	; 200
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	91 83       	std	Z+1, r25	; 0x01
    2be0:	80 83       	st	Z, r24
    2be2:	fe 01       	movw	r30, r28
    2be4:	e9 5c       	subi	r30, 0xC9	; 201
    2be6:	fe 4f       	sbci	r31, 0xFE	; 254
    2be8:	80 81       	ld	r24, Z
    2bea:	91 81       	ldd	r25, Z+1	; 0x01
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	f1 f7       	brne	.-4      	; 0x2bec <main+0x30a>
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	e9 5c       	subi	r30, 0xC9	; 201
    2bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf6:	91 83       	std	Z+1, r25	; 0x01
    2bf8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfa:	de 01       	movw	r26, r28
    2bfc:	a7 5c       	subi	r26, 0xC7	; 199
    2bfe:	be 4f       	sbci	r27, 0xFE	; 254
    2c00:	fe 01       	movw	r30, r28
    2c02:	e7 5c       	subi	r30, 0xC7	; 199
    2c04:	fe 4f       	sbci	r31, 0xFE	; 254
    2c06:	80 81       	ld	r24, Z
    2c08:	91 81       	ldd	r25, Z+1	; 0x01
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	11 96       	adiw	r26, 0x01	; 1
    2c0e:	9c 93       	st	X, r25
    2c10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c12:	fe 01       	movw	r30, r28
    2c14:	e7 5c       	subi	r30, 0xC7	; 199
    2c16:	fe 4f       	sbci	r31, 0xFE	; 254
    2c18:	80 81       	ld	r24, Z
    2c1a:	91 81       	ldd	r25, Z+1	; 0x01
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	d1 f6       	brne	.-76     	; 0x2bd4 <main+0x2f2>
    2c20:	27 c0       	rjmp	.+78     	; 0x2c70 <main+0x38e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c22:	8e 01       	movw	r16, r28
    2c24:	07 5c       	subi	r16, 0xC7	; 199
    2c26:	1e 4f       	sbci	r17, 0xFE	; 254
    2c28:	fe 01       	movw	r30, r28
    2c2a:	e5 5c       	subi	r30, 0xC5	; 197
    2c2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c2e:	60 81       	ld	r22, Z
    2c30:	71 81       	ldd	r23, Z+1	; 0x01
    2c32:	82 81       	ldd	r24, Z+2	; 0x02
    2c34:	93 81       	ldd	r25, Z+3	; 0x03
    2c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	f8 01       	movw	r30, r16
    2c40:	91 83       	std	Z+1, r25	; 0x01
    2c42:	80 83       	st	Z, r24
    2c44:	de 01       	movw	r26, r28
    2c46:	ab 5c       	subi	r26, 0xCB	; 203
    2c48:	be 4f       	sbci	r27, 0xFE	; 254
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	e7 5c       	subi	r30, 0xC7	; 199
    2c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c50:	80 81       	ld	r24, Z
    2c52:	91 81       	ldd	r25, Z+1	; 0x01
    2c54:	8d 93       	st	X+, r24
    2c56:	9c 93       	st	X, r25
    2c58:	fe 01       	movw	r30, r28
    2c5a:	eb 5c       	subi	r30, 0xCB	; 203
    2c5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c5e:	80 81       	ld	r24, Z
    2c60:	91 81       	ldd	r25, Z+1	; 0x01
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	f1 f7       	brne	.-4      	; 0x2c62 <main+0x380>
    2c66:	fe 01       	movw	r30, r28
    2c68:	eb 5c       	subi	r30, 0xCB	; 203
    2c6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c6c:	91 83       	std	Z+1, r25	; 0x01
    2c6e:	80 83       	st	Z, r24
		_delay_ms(2000);
		HLCD_voidDisplayClear();
    2c70:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
		HLCD_voidSendString("1-Enter Pass");
    2c74:	81 e8       	ldi	r24, 0x81	; 129
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
		HLCD_voidGoToPosition(2,1);
    2c7c:	82 e0       	ldi	r24, 0x02	; 2
    2c7e:	61 e0       	ldi	r22, 0x01	; 1
    2c80:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
		HLCD_voidSendString("2-Change Pass");
    2c84:	8e e8       	ldi	r24, 0x8E	; 142
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    2c8c:	06 c0       	rjmp	.+12     	; 0x2c9a <main+0x3b8>

		while(local_u8PressedKey==0xff)
		{
			local_u8PressedKey=HKEYPAD_u8KeyPressed();
    2c8e:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <HKEYPAD_u8KeyPressed>
    2c92:	fe 01       	movw	r30, r28
    2c94:	e6 5a       	subi	r30, 0xA6	; 166
    2c96:	fe 4f       	sbci	r31, 0xFE	; 254
    2c98:	80 83       	st	Z, r24
		HLCD_voidDisplayClear();
		HLCD_voidSendString("1-Enter Pass");
		HLCD_voidGoToPosition(2,1);
		HLCD_voidSendString("2-Change Pass");

		while(local_u8PressedKey==0xff)
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	e6 5a       	subi	r30, 0xA6	; 166
    2c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca0:	80 81       	ld	r24, Z
    2ca2:	8f 3f       	cpi	r24, 0xFF	; 255
    2ca4:	a1 f3       	breq	.-24     	; 0x2c8e <main+0x3ac>
		{
			local_u8PressedKey=HKEYPAD_u8KeyPressed();
		}

		if(local_u8PressedKey == '1')
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	e6 5a       	subi	r30, 0xA6	; 166
    2caa:	fe 4f       	sbci	r31, 0xFE	; 254
    2cac:	80 81       	ld	r24, Z
    2cae:	81 33       	cpi	r24, 0x31	; 49
    2cb0:	11 f0       	breq	.+4      	; 0x2cb6 <main+0x3d4>
    2cb2:	0c 94 a0 25 	jmp	0x4b40	; 0x4b40 <main+0x225e>
		{
			while(1)
			{
			local_u8PressedKey=0xff;
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	e6 5a       	subi	r30, 0xA6	; 166
    2cba:	fe 4f       	sbci	r31, 0xFE	; 254
    2cbc:	8f ef       	ldi	r24, 0xFF	; 255
    2cbe:	80 83       	st	Z, r24
			HLCD_voidDisplayClear();
    2cc0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
			HLCD_voidSendString("Enter Ur Pass");
    2cc4:	8c e9       	ldi	r24, 0x9C	; 156
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
			HLCD_voidGoToPosition(2,1);
    2ccc:	82 e0       	ldi	r24, 0x02	; 2
    2cce:	61 e0       	ldi	r22, 0x01	; 1
    2cd0:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>

			for(u8 i=0;i<4;i++)
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	ed 5a       	subi	r30, 0xAD	; 173
    2cd8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cda:	10 82       	st	Z, r1
    2cdc:	2f c0       	rjmp	.+94     	; 0x2d3c <main+0x45a>
			{
				while(local_u8PressedKey==0xff)
				{
					local_u8PressedKey=HKEYPAD_u8KeyPressed();
    2cde:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <HKEYPAD_u8KeyPressed>
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	e6 5a       	subi	r30, 0xA6	; 166
    2ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce8:	80 83       	st	Z, r24
			HLCD_voidSendString("Enter Ur Pass");
			HLCD_voidGoToPosition(2,1);

			for(u8 i=0;i<4;i++)
			{
				while(local_u8PressedKey==0xff)
    2cea:	fe 01       	movw	r30, r28
    2cec:	e6 5a       	subi	r30, 0xA6	; 166
    2cee:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf0:	80 81       	ld	r24, Z
    2cf2:	8f 3f       	cpi	r24, 0xFF	; 255
    2cf4:	a1 f3       	breq	.-24     	; 0x2cde <main+0x3fc>
				{
					local_u8PressedKey=HKEYPAD_u8KeyPressed();
				}
				local_u8EnteredPass[i]=local_u8PressedKey;
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	ed 5a       	subi	r30, 0xAD	; 173
    2cfa:	fe 4f       	sbci	r31, 0xFE	; 254
    2cfc:	80 81       	ld	r24, Z
    2cfe:	28 2f       	mov	r18, r24
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	ce 01       	movw	r24, r28
    2d04:	80 5a       	subi	r24, 0xA0	; 160
    2d06:	9e 4f       	sbci	r25, 0xFE	; 254
    2d08:	dc 01       	movw	r26, r24
    2d0a:	a2 0f       	add	r26, r18
    2d0c:	b3 1f       	adc	r27, r19
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e6 5a       	subi	r30, 0xA6	; 166
    2d12:	fe 4f       	sbci	r31, 0xFE	; 254
    2d14:	80 81       	ld	r24, Z
    2d16:	8c 93       	st	X, r24
				HLCD_voidSendString("*");
    2d18:	8a ea       	ldi	r24, 0xAA	; 170
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
				local_u8PressedKey=0xff;
    2d20:	fe 01       	movw	r30, r28
    2d22:	e6 5a       	subi	r30, 0xA6	; 166
    2d24:	fe 4f       	sbci	r31, 0xFE	; 254
    2d26:	8f ef       	ldi	r24, 0xFF	; 255
    2d28:	80 83       	st	Z, r24
			local_u8PressedKey=0xff;
			HLCD_voidDisplayClear();
			HLCD_voidSendString("Enter Ur Pass");
			HLCD_voidGoToPosition(2,1);

			for(u8 i=0;i<4;i++)
    2d2a:	de 01       	movw	r26, r28
    2d2c:	ad 5a       	subi	r26, 0xAD	; 173
    2d2e:	be 4f       	sbci	r27, 0xFE	; 254
    2d30:	fe 01       	movw	r30, r28
    2d32:	ed 5a       	subi	r30, 0xAD	; 173
    2d34:	fe 4f       	sbci	r31, 0xFE	; 254
    2d36:	80 81       	ld	r24, Z
    2d38:	8f 5f       	subi	r24, 0xFF	; 255
    2d3a:	8c 93       	st	X, r24
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	ed 5a       	subi	r30, 0xAD	; 173
    2d40:	fe 4f       	sbci	r31, 0xFE	; 254
    2d42:	80 81       	ld	r24, Z
    2d44:	84 30       	cpi	r24, 0x04	; 4
    2d46:	88 f2       	brcs	.-94     	; 0x2cea <main+0x408>
				local_u8EnteredPass[i]=local_u8PressedKey;
				HLCD_voidSendString("*");
				local_u8PressedKey=0xff;
			}

			if(local_u8EnteredPass[0]==local_u8Pass[0] &&
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e0 5a       	subi	r30, 0xA0	; 160
    2d4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d4e:	90 81       	ld	r25, Z
    2d50:	80 91 be 02 	lds	r24, 0x02BE
    2d54:	98 17       	cp	r25, r24
    2d56:	11 f0       	breq	.+4      	; 0x2d5c <main+0x47a>
    2d58:	0c 94 53 21 	jmp	0x42a6	; 0x42a6 <main+0x19c4>
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	e0 5a       	subi	r30, 0xA0	; 160
    2d60:	fe 4f       	sbci	r31, 0xFE	; 254
    2d62:	91 81       	ldd	r25, Z+1	; 0x01
    2d64:	80 91 bf 02 	lds	r24, 0x02BF
    2d68:	98 17       	cp	r25, r24
    2d6a:	11 f0       	breq	.+4      	; 0x2d70 <main+0x48e>
    2d6c:	0c 94 53 21 	jmp	0x42a6	; 0x42a6 <main+0x19c4>
    2d70:	fe 01       	movw	r30, r28
    2d72:	e0 5a       	subi	r30, 0xA0	; 160
    2d74:	fe 4f       	sbci	r31, 0xFE	; 254
    2d76:	92 81       	ldd	r25, Z+2	; 0x02
    2d78:	80 91 c0 02 	lds	r24, 0x02C0
    2d7c:	98 17       	cp	r25, r24
    2d7e:	11 f0       	breq	.+4      	; 0x2d84 <main+0x4a2>
    2d80:	0c 94 53 21 	jmp	0x42a6	; 0x42a6 <main+0x19c4>
    2d84:	fe 01       	movw	r30, r28
    2d86:	e0 5a       	subi	r30, 0xA0	; 160
    2d88:	fe 4f       	sbci	r31, 0xFE	; 254
    2d8a:	93 81       	ldd	r25, Z+3	; 0x03
    2d8c:	80 91 c1 02 	lds	r24, 0x02C1
    2d90:	98 17       	cp	r25, r24
    2d92:	11 f0       	breq	.+4      	; 0x2d98 <main+0x4b6>
    2d94:	0c 94 53 21 	jmp	0x42a6	; 0x42a6 <main+0x19c4>
			   local_u8EnteredPass[1]==local_u8Pass[1] &&
			   local_u8EnteredPass[2]==local_u8Pass[2] &&
			   local_u8EnteredPass[3]==local_u8Pass[3] )
			{
				HLCD_voidDisplayClear();
    2d98:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
				HLCD_voidSendString(" WELCOME BACK ");
    2d9c:	8c ea       	ldi	r24, 0xAC	; 172
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    2da4:	fe 01       	movw	r30, r28
    2da6:	ef 5c       	subi	r30, 0xCF	; 207
    2da8:	fe 4f       	sbci	r31, 0xFE	; 254
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	aa e7       	ldi	r26, 0x7A	; 122
    2db0:	b4 e4       	ldi	r27, 0x44	; 68
    2db2:	80 83       	st	Z, r24
    2db4:	91 83       	std	Z+1, r25	; 0x01
    2db6:	a2 83       	std	Z+2, r26	; 0x02
    2db8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dba:	8e 01       	movw	r16, r28
    2dbc:	03 5d       	subi	r16, 0xD3	; 211
    2dbe:	1e 4f       	sbci	r17, 0xFE	; 254
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	ef 5c       	subi	r30, 0xCF	; 207
    2dc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc6:	60 81       	ld	r22, Z
    2dc8:	71 81       	ldd	r23, Z+1	; 0x01
    2dca:	82 81       	ldd	r24, Z+2	; 0x02
    2dcc:	93 81       	ldd	r25, Z+3	; 0x03
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	4a ef       	ldi	r20, 0xFA	; 250
    2dd4:	54 e4       	ldi	r21, 0x44	; 68
    2dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	f8 01       	movw	r30, r16
    2de0:	80 83       	st	Z, r24
    2de2:	91 83       	std	Z+1, r25	; 0x01
    2de4:	a2 83       	std	Z+2, r26	; 0x02
    2de6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2de8:	fe 01       	movw	r30, r28
    2dea:	e3 5d       	subi	r30, 0xD3	; 211
    2dec:	fe 4f       	sbci	r31, 0xFE	; 254
    2dee:	60 81       	ld	r22, Z
    2df0:	71 81       	ldd	r23, Z+1	; 0x01
    2df2:	82 81       	ldd	r24, Z+2	; 0x02
    2df4:	93 81       	ldd	r25, Z+3	; 0x03
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e8       	ldi	r20, 0x80	; 128
    2dfc:	5f e3       	ldi	r21, 0x3F	; 63
    2dfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e02:	88 23       	and	r24, r24
    2e04:	44 f4       	brge	.+16     	; 0x2e16 <main+0x534>
		__ticks = 1;
    2e06:	fe 01       	movw	r30, r28
    2e08:	e5 5d       	subi	r30, 0xD5	; 213
    2e0a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	91 83       	std	Z+1, r25	; 0x01
    2e12:	80 83       	st	Z, r24
    2e14:	64 c0       	rjmp	.+200    	; 0x2ede <main+0x5fc>
	else if (__tmp > 65535)
    2e16:	fe 01       	movw	r30, r28
    2e18:	e3 5d       	subi	r30, 0xD3	; 211
    2e1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e1c:	60 81       	ld	r22, Z
    2e1e:	71 81       	ldd	r23, Z+1	; 0x01
    2e20:	82 81       	ldd	r24, Z+2	; 0x02
    2e22:	93 81       	ldd	r25, Z+3	; 0x03
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	3f ef       	ldi	r19, 0xFF	; 255
    2e28:	4f e7       	ldi	r20, 0x7F	; 127
    2e2a:	57 e4       	ldi	r21, 0x47	; 71
    2e2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e30:	18 16       	cp	r1, r24
    2e32:	0c f0       	brlt	.+2      	; 0x2e36 <main+0x554>
    2e34:	43 c0       	rjmp	.+134    	; 0x2ebc <main+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e36:	fe 01       	movw	r30, r28
    2e38:	ef 5c       	subi	r30, 0xCF	; 207
    2e3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e3c:	60 81       	ld	r22, Z
    2e3e:	71 81       	ldd	r23, Z+1	; 0x01
    2e40:	82 81       	ldd	r24, Z+2	; 0x02
    2e42:	93 81       	ldd	r25, Z+3	; 0x03
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e2       	ldi	r20, 0x20	; 32
    2e4a:	51 e4       	ldi	r21, 0x41	; 65
    2e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	8e 01       	movw	r16, r28
    2e56:	05 5d       	subi	r16, 0xD5	; 213
    2e58:	1e 4f       	sbci	r17, 0xFE	; 254
    2e5a:	bc 01       	movw	r22, r24
    2e5c:	cd 01       	movw	r24, r26
    2e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	f8 01       	movw	r30, r16
    2e68:	91 83       	std	Z+1, r25	; 0x01
    2e6a:	80 83       	st	Z, r24
    2e6c:	1f c0       	rjmp	.+62     	; 0x2eac <main+0x5ca>
    2e6e:	fe 01       	movw	r30, r28
    2e70:	e7 5d       	subi	r30, 0xD7	; 215
    2e72:	fe 4f       	sbci	r31, 0xFE	; 254
    2e74:	88 ec       	ldi	r24, 0xC8	; 200
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	91 83       	std	Z+1, r25	; 0x01
    2e7a:	80 83       	st	Z, r24
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	e7 5d       	subi	r30, 0xD7	; 215
    2e80:	fe 4f       	sbci	r31, 0xFE	; 254
    2e82:	80 81       	ld	r24, Z
    2e84:	91 81       	ldd	r25, Z+1	; 0x01
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	f1 f7       	brne	.-4      	; 0x2e86 <main+0x5a4>
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	e7 5d       	subi	r30, 0xD7	; 215
    2e8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e90:	91 83       	std	Z+1, r25	; 0x01
    2e92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e94:	de 01       	movw	r26, r28
    2e96:	a5 5d       	subi	r26, 0xD5	; 213
    2e98:	be 4f       	sbci	r27, 0xFE	; 254
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	e5 5d       	subi	r30, 0xD5	; 213
    2e9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea0:	80 81       	ld	r24, Z
    2ea2:	91 81       	ldd	r25, Z+1	; 0x01
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	11 96       	adiw	r26, 0x01	; 1
    2ea8:	9c 93       	st	X, r25
    2eaa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eac:	fe 01       	movw	r30, r28
    2eae:	e5 5d       	subi	r30, 0xD5	; 213
    2eb0:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb2:	80 81       	ld	r24, Z
    2eb4:	91 81       	ldd	r25, Z+1	; 0x01
    2eb6:	00 97       	sbiw	r24, 0x00	; 0
    2eb8:	d1 f6       	brne	.-76     	; 0x2e6e <main+0x58c>
    2eba:	27 c0       	rjmp	.+78     	; 0x2f0a <main+0x628>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ebc:	8e 01       	movw	r16, r28
    2ebe:	05 5d       	subi	r16, 0xD5	; 213
    2ec0:	1e 4f       	sbci	r17, 0xFE	; 254
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	e3 5d       	subi	r30, 0xD3	; 211
    2ec6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec8:	60 81       	ld	r22, Z
    2eca:	71 81       	ldd	r23, Z+1	; 0x01
    2ecc:	82 81       	ldd	r24, Z+2	; 0x02
    2ece:	93 81       	ldd	r25, Z+3	; 0x03
    2ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	f8 01       	movw	r30, r16
    2eda:	91 83       	std	Z+1, r25	; 0x01
    2edc:	80 83       	st	Z, r24
    2ede:	de 01       	movw	r26, r28
    2ee0:	a9 5d       	subi	r26, 0xD9	; 217
    2ee2:	be 4f       	sbci	r27, 0xFE	; 254
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	e5 5d       	subi	r30, 0xD5	; 213
    2ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eea:	80 81       	ld	r24, Z
    2eec:	91 81       	ldd	r25, Z+1	; 0x01
    2eee:	8d 93       	st	X+, r24
    2ef0:	9c 93       	st	X, r25
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	e9 5d       	subi	r30, 0xD9	; 217
    2ef6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef8:	80 81       	ld	r24, Z
    2efa:	91 81       	ldd	r25, Z+1	; 0x01
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	f1 f7       	brne	.-4      	; 0x2efc <main+0x61a>
    2f00:	fe 01       	movw	r30, r28
    2f02:	e9 5d       	subi	r30, 0xD9	; 217
    2f04:	fe 4f       	sbci	r31, 0xFE	; 254
    2f06:	91 83       	std	Z+1, r25	; 0x01
    2f08:	80 83       	st	Z, r24
				_delay_ms(1000);
				HLCD_voidDisplayClear();
    2f0a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
				HLCD_voidSendString("Happy To See U");
    2f0e:	8b eb       	ldi	r24, 0xBB	; 187
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    2f16:	fe 01       	movw	r30, r28
    2f18:	ed 5d       	subi	r30, 0xDD	; 221
    2f1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	aa e7       	ldi	r26, 0x7A	; 122
    2f22:	b4 e4       	ldi	r27, 0x44	; 68
    2f24:	80 83       	st	Z, r24
    2f26:	91 83       	std	Z+1, r25	; 0x01
    2f28:	a2 83       	std	Z+2, r26	; 0x02
    2f2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2c:	8e 01       	movw	r16, r28
    2f2e:	01 5e       	subi	r16, 0xE1	; 225
    2f30:	1e 4f       	sbci	r17, 0xFE	; 254
    2f32:	fe 01       	movw	r30, r28
    2f34:	ed 5d       	subi	r30, 0xDD	; 221
    2f36:	fe 4f       	sbci	r31, 0xFE	; 254
    2f38:	60 81       	ld	r22, Z
    2f3a:	71 81       	ldd	r23, Z+1	; 0x01
    2f3c:	82 81       	ldd	r24, Z+2	; 0x02
    2f3e:	93 81       	ldd	r25, Z+3	; 0x03
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	4a ef       	ldi	r20, 0xFA	; 250
    2f46:	54 e4       	ldi	r21, 0x44	; 68
    2f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	f8 01       	movw	r30, r16
    2f52:	80 83       	st	Z, r24
    2f54:	91 83       	std	Z+1, r25	; 0x01
    2f56:	a2 83       	std	Z+2, r26	; 0x02
    2f58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	e1 5e       	subi	r30, 0xE1	; 225
    2f5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f60:	60 81       	ld	r22, Z
    2f62:	71 81       	ldd	r23, Z+1	; 0x01
    2f64:	82 81       	ldd	r24, Z+2	; 0x02
    2f66:	93 81       	ldd	r25, Z+3	; 0x03
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	40 e8       	ldi	r20, 0x80	; 128
    2f6e:	5f e3       	ldi	r21, 0x3F	; 63
    2f70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f74:	88 23       	and	r24, r24
    2f76:	44 f4       	brge	.+16     	; 0x2f88 <main+0x6a6>
		__ticks = 1;
    2f78:	fe 01       	movw	r30, r28
    2f7a:	e3 5e       	subi	r30, 0xE3	; 227
    2f7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	91 83       	std	Z+1, r25	; 0x01
    2f84:	80 83       	st	Z, r24
    2f86:	64 c0       	rjmp	.+200    	; 0x3050 <main+0x76e>
	else if (__tmp > 65535)
    2f88:	fe 01       	movw	r30, r28
    2f8a:	e1 5e       	subi	r30, 0xE1	; 225
    2f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f8e:	60 81       	ld	r22, Z
    2f90:	71 81       	ldd	r23, Z+1	; 0x01
    2f92:	82 81       	ldd	r24, Z+2	; 0x02
    2f94:	93 81       	ldd	r25, Z+3	; 0x03
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	3f ef       	ldi	r19, 0xFF	; 255
    2f9a:	4f e7       	ldi	r20, 0x7F	; 127
    2f9c:	57 e4       	ldi	r21, 0x47	; 71
    2f9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fa2:	18 16       	cp	r1, r24
    2fa4:	0c f0       	brlt	.+2      	; 0x2fa8 <main+0x6c6>
    2fa6:	43 c0       	rjmp	.+134    	; 0x302e <main+0x74c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa8:	fe 01       	movw	r30, r28
    2faa:	ed 5d       	subi	r30, 0xDD	; 221
    2fac:	fe 4f       	sbci	r31, 0xFE	; 254
    2fae:	60 81       	ld	r22, Z
    2fb0:	71 81       	ldd	r23, Z+1	; 0x01
    2fb2:	82 81       	ldd	r24, Z+2	; 0x02
    2fb4:	93 81       	ldd	r25, Z+3	; 0x03
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 e2       	ldi	r20, 0x20	; 32
    2fbc:	51 e4       	ldi	r21, 0x41	; 65
    2fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	8e 01       	movw	r16, r28
    2fc8:	03 5e       	subi	r16, 0xE3	; 227
    2fca:	1e 4f       	sbci	r17, 0xFE	; 254
    2fcc:	bc 01       	movw	r22, r24
    2fce:	cd 01       	movw	r24, r26
    2fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	f8 01       	movw	r30, r16
    2fda:	91 83       	std	Z+1, r25	; 0x01
    2fdc:	80 83       	st	Z, r24
    2fde:	1f c0       	rjmp	.+62     	; 0x301e <main+0x73c>
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	e5 5e       	subi	r30, 0xE5	; 229
    2fe4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fe6:	88 ec       	ldi	r24, 0xC8	; 200
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	91 83       	std	Z+1, r25	; 0x01
    2fec:	80 83       	st	Z, r24
    2fee:	fe 01       	movw	r30, r28
    2ff0:	e5 5e       	subi	r30, 0xE5	; 229
    2ff2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ff4:	80 81       	ld	r24, Z
    2ff6:	91 81       	ldd	r25, Z+1	; 0x01
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	f1 f7       	brne	.-4      	; 0x2ff8 <main+0x716>
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	e5 5e       	subi	r30, 0xE5	; 229
    3000:	fe 4f       	sbci	r31, 0xFE	; 254
    3002:	91 83       	std	Z+1, r25	; 0x01
    3004:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3006:	de 01       	movw	r26, r28
    3008:	a3 5e       	subi	r26, 0xE3	; 227
    300a:	be 4f       	sbci	r27, 0xFE	; 254
    300c:	fe 01       	movw	r30, r28
    300e:	e3 5e       	subi	r30, 0xE3	; 227
    3010:	fe 4f       	sbci	r31, 0xFE	; 254
    3012:	80 81       	ld	r24, Z
    3014:	91 81       	ldd	r25, Z+1	; 0x01
    3016:	01 97       	sbiw	r24, 0x01	; 1
    3018:	11 96       	adiw	r26, 0x01	; 1
    301a:	9c 93       	st	X, r25
    301c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    301e:	fe 01       	movw	r30, r28
    3020:	e3 5e       	subi	r30, 0xE3	; 227
    3022:	fe 4f       	sbci	r31, 0xFE	; 254
    3024:	80 81       	ld	r24, Z
    3026:	91 81       	ldd	r25, Z+1	; 0x01
    3028:	00 97       	sbiw	r24, 0x00	; 0
    302a:	d1 f6       	brne	.-76     	; 0x2fe0 <main+0x6fe>
    302c:	27 c0       	rjmp	.+78     	; 0x307c <main+0x79a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    302e:	8e 01       	movw	r16, r28
    3030:	03 5e       	subi	r16, 0xE3	; 227
    3032:	1e 4f       	sbci	r17, 0xFE	; 254
    3034:	fe 01       	movw	r30, r28
    3036:	e1 5e       	subi	r30, 0xE1	; 225
    3038:	fe 4f       	sbci	r31, 0xFE	; 254
    303a:	60 81       	ld	r22, Z
    303c:	71 81       	ldd	r23, Z+1	; 0x01
    303e:	82 81       	ldd	r24, Z+2	; 0x02
    3040:	93 81       	ldd	r25, Z+3	; 0x03
    3042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	f8 01       	movw	r30, r16
    304c:	91 83       	std	Z+1, r25	; 0x01
    304e:	80 83       	st	Z, r24
    3050:	de 01       	movw	r26, r28
    3052:	a7 5e       	subi	r26, 0xE7	; 231
    3054:	be 4f       	sbci	r27, 0xFE	; 254
    3056:	fe 01       	movw	r30, r28
    3058:	e3 5e       	subi	r30, 0xE3	; 227
    305a:	fe 4f       	sbci	r31, 0xFE	; 254
    305c:	80 81       	ld	r24, Z
    305e:	91 81       	ldd	r25, Z+1	; 0x01
    3060:	8d 93       	st	X+, r24
    3062:	9c 93       	st	X, r25
    3064:	fe 01       	movw	r30, r28
    3066:	e7 5e       	subi	r30, 0xE7	; 231
    3068:	fe 4f       	sbci	r31, 0xFE	; 254
    306a:	80 81       	ld	r24, Z
    306c:	91 81       	ldd	r25, Z+1	; 0x01
    306e:	01 97       	sbiw	r24, 0x01	; 1
    3070:	f1 f7       	brne	.-4      	; 0x306e <main+0x78c>
    3072:	fe 01       	movw	r30, r28
    3074:	e7 5e       	subi	r30, 0xE7	; 231
    3076:	fe 4f       	sbci	r31, 0xFE	; 254
    3078:	91 83       	std	Z+1, r25	; 0x01
    307a:	80 83       	st	Z, r24
				_delay_ms(1000);
				HLCD_voidDisplayClear();
    307c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
				HLCD_voidSendString("Door Is Opening");
    3080:	8a ec       	ldi	r24, 0xCA	; 202
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    3088:	fe 01       	movw	r30, r28
    308a:	eb 5e       	subi	r30, 0xEB	; 235
    308c:	fe 4f       	sbci	r31, 0xFE	; 254
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	aa e7       	ldi	r26, 0x7A	; 122
    3094:	b4 e4       	ldi	r27, 0x44	; 68
    3096:	80 83       	st	Z, r24
    3098:	91 83       	std	Z+1, r25	; 0x01
    309a:	a2 83       	std	Z+2, r26	; 0x02
    309c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    309e:	8e 01       	movw	r16, r28
    30a0:	0f 5e       	subi	r16, 0xEF	; 239
    30a2:	1e 4f       	sbci	r17, 0xFE	; 254
    30a4:	fe 01       	movw	r30, r28
    30a6:	eb 5e       	subi	r30, 0xEB	; 235
    30a8:	fe 4f       	sbci	r31, 0xFE	; 254
    30aa:	60 81       	ld	r22, Z
    30ac:	71 81       	ldd	r23, Z+1	; 0x01
    30ae:	82 81       	ldd	r24, Z+2	; 0x02
    30b0:	93 81       	ldd	r25, Z+3	; 0x03
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	4a ef       	ldi	r20, 0xFA	; 250
    30b8:	54 e4       	ldi	r21, 0x44	; 68
    30ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	f8 01       	movw	r30, r16
    30c4:	80 83       	st	Z, r24
    30c6:	91 83       	std	Z+1, r25	; 0x01
    30c8:	a2 83       	std	Z+2, r26	; 0x02
    30ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30cc:	fe 01       	movw	r30, r28
    30ce:	ef 5e       	subi	r30, 0xEF	; 239
    30d0:	fe 4f       	sbci	r31, 0xFE	; 254
    30d2:	60 81       	ld	r22, Z
    30d4:	71 81       	ldd	r23, Z+1	; 0x01
    30d6:	82 81       	ldd	r24, Z+2	; 0x02
    30d8:	93 81       	ldd	r25, Z+3	; 0x03
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 e8       	ldi	r20, 0x80	; 128
    30e0:	5f e3       	ldi	r21, 0x3F	; 63
    30e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30e6:	88 23       	and	r24, r24
    30e8:	44 f4       	brge	.+16     	; 0x30fa <main+0x818>
		__ticks = 1;
    30ea:	fe 01       	movw	r30, r28
    30ec:	e1 5f       	subi	r30, 0xF1	; 241
    30ee:	fe 4f       	sbci	r31, 0xFE	; 254
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	91 83       	std	Z+1, r25	; 0x01
    30f6:	80 83       	st	Z, r24
    30f8:	64 c0       	rjmp	.+200    	; 0x31c2 <main+0x8e0>
	else if (__tmp > 65535)
    30fa:	fe 01       	movw	r30, r28
    30fc:	ef 5e       	subi	r30, 0xEF	; 239
    30fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3100:	60 81       	ld	r22, Z
    3102:	71 81       	ldd	r23, Z+1	; 0x01
    3104:	82 81       	ldd	r24, Z+2	; 0x02
    3106:	93 81       	ldd	r25, Z+3	; 0x03
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	3f ef       	ldi	r19, 0xFF	; 255
    310c:	4f e7       	ldi	r20, 0x7F	; 127
    310e:	57 e4       	ldi	r21, 0x47	; 71
    3110:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3114:	18 16       	cp	r1, r24
    3116:	0c f0       	brlt	.+2      	; 0x311a <main+0x838>
    3118:	43 c0       	rjmp	.+134    	; 0x31a0 <main+0x8be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    311a:	fe 01       	movw	r30, r28
    311c:	eb 5e       	subi	r30, 0xEB	; 235
    311e:	fe 4f       	sbci	r31, 0xFE	; 254
    3120:	60 81       	ld	r22, Z
    3122:	71 81       	ldd	r23, Z+1	; 0x01
    3124:	82 81       	ldd	r24, Z+2	; 0x02
    3126:	93 81       	ldd	r25, Z+3	; 0x03
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	40 e2       	ldi	r20, 0x20	; 32
    312e:	51 e4       	ldi	r21, 0x41	; 65
    3130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	8e 01       	movw	r16, r28
    313a:	01 5f       	subi	r16, 0xF1	; 241
    313c:	1e 4f       	sbci	r17, 0xFE	; 254
    313e:	bc 01       	movw	r22, r24
    3140:	cd 01       	movw	r24, r26
    3142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	f8 01       	movw	r30, r16
    314c:	91 83       	std	Z+1, r25	; 0x01
    314e:	80 83       	st	Z, r24
    3150:	1f c0       	rjmp	.+62     	; 0x3190 <main+0x8ae>
    3152:	fe 01       	movw	r30, r28
    3154:	e3 5f       	subi	r30, 0xF3	; 243
    3156:	fe 4f       	sbci	r31, 0xFE	; 254
    3158:	88 ec       	ldi	r24, 0xC8	; 200
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	91 83       	std	Z+1, r25	; 0x01
    315e:	80 83       	st	Z, r24
    3160:	fe 01       	movw	r30, r28
    3162:	e3 5f       	subi	r30, 0xF3	; 243
    3164:	fe 4f       	sbci	r31, 0xFE	; 254
    3166:	80 81       	ld	r24, Z
    3168:	91 81       	ldd	r25, Z+1	; 0x01
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	f1 f7       	brne	.-4      	; 0x316a <main+0x888>
    316e:	fe 01       	movw	r30, r28
    3170:	e3 5f       	subi	r30, 0xF3	; 243
    3172:	fe 4f       	sbci	r31, 0xFE	; 254
    3174:	91 83       	std	Z+1, r25	; 0x01
    3176:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3178:	de 01       	movw	r26, r28
    317a:	a1 5f       	subi	r26, 0xF1	; 241
    317c:	be 4f       	sbci	r27, 0xFE	; 254
    317e:	fe 01       	movw	r30, r28
    3180:	e1 5f       	subi	r30, 0xF1	; 241
    3182:	fe 4f       	sbci	r31, 0xFE	; 254
    3184:	80 81       	ld	r24, Z
    3186:	91 81       	ldd	r25, Z+1	; 0x01
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	11 96       	adiw	r26, 0x01	; 1
    318c:	9c 93       	st	X, r25
    318e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3190:	fe 01       	movw	r30, r28
    3192:	e1 5f       	subi	r30, 0xF1	; 241
    3194:	fe 4f       	sbci	r31, 0xFE	; 254
    3196:	80 81       	ld	r24, Z
    3198:	91 81       	ldd	r25, Z+1	; 0x01
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	d1 f6       	brne	.-76     	; 0x3152 <main+0x870>
    319e:	27 c0       	rjmp	.+78     	; 0x31ee <main+0x90c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a0:	8e 01       	movw	r16, r28
    31a2:	01 5f       	subi	r16, 0xF1	; 241
    31a4:	1e 4f       	sbci	r17, 0xFE	; 254
    31a6:	fe 01       	movw	r30, r28
    31a8:	ef 5e       	subi	r30, 0xEF	; 239
    31aa:	fe 4f       	sbci	r31, 0xFE	; 254
    31ac:	60 81       	ld	r22, Z
    31ae:	71 81       	ldd	r23, Z+1	; 0x01
    31b0:	82 81       	ldd	r24, Z+2	; 0x02
    31b2:	93 81       	ldd	r25, Z+3	; 0x03
    31b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	f8 01       	movw	r30, r16
    31be:	91 83       	std	Z+1, r25	; 0x01
    31c0:	80 83       	st	Z, r24
    31c2:	de 01       	movw	r26, r28
    31c4:	a5 5f       	subi	r26, 0xF5	; 245
    31c6:	be 4f       	sbci	r27, 0xFE	; 254
    31c8:	fe 01       	movw	r30, r28
    31ca:	e1 5f       	subi	r30, 0xF1	; 241
    31cc:	fe 4f       	sbci	r31, 0xFE	; 254
    31ce:	80 81       	ld	r24, Z
    31d0:	91 81       	ldd	r25, Z+1	; 0x01
    31d2:	8d 93       	st	X+, r24
    31d4:	9c 93       	st	X, r25
    31d6:	fe 01       	movw	r30, r28
    31d8:	e5 5f       	subi	r30, 0xF5	; 245
    31da:	fe 4f       	sbci	r31, 0xFE	; 254
    31dc:	80 81       	ld	r24, Z
    31de:	91 81       	ldd	r25, Z+1	; 0x01
    31e0:	01 97       	sbiw	r24, 0x01	; 1
    31e2:	f1 f7       	brne	.-4      	; 0x31e0 <main+0x8fe>
    31e4:	fe 01       	movw	r30, r28
    31e6:	e5 5f       	subi	r30, 0xF5	; 245
    31e8:	fe 4f       	sbci	r31, 0xFE	; 254
    31ea:	91 83       	std	Z+1, r25	; 0x01
    31ec:	80 83       	st	Z, r24

				do{
					_delay_ms(1000);
					HSERVO_voidSetServoAngle(90);
    31ee:	8a e5       	ldi	r24, 0x5A	; 90
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	0e 94 1e 13 	call	0x263c	; 0x263c <HSERVO_voidSetServoAngle>
					MDIO_voidSetPinValue(DIO_PORTD,PIN4,DIO_HIGH);
    31f6:	83 e0       	ldi	r24, 0x03	; 3
    31f8:	64 e0       	ldi	r22, 0x04	; 4
    31fa:	41 e0       	ldi	r20, 0x01	; 1
    31fc:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    3200:	fe 01       	movw	r30, r28
    3202:	e9 5f       	subi	r30, 0xF9	; 249
    3204:	fe 4f       	sbci	r31, 0xFE	; 254
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	90 e4       	ldi	r25, 0x40	; 64
    320a:	ac e9       	ldi	r26, 0x9C	; 156
    320c:	b5 e4       	ldi	r27, 0x45	; 69
    320e:	80 83       	st	Z, r24
    3210:	91 83       	std	Z+1, r25	; 0x01
    3212:	a2 83       	std	Z+2, r26	; 0x02
    3214:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3216:	8e 01       	movw	r16, r28
    3218:	0d 5f       	subi	r16, 0xFD	; 253
    321a:	1e 4f       	sbci	r17, 0xFE	; 254
    321c:	fe 01       	movw	r30, r28
    321e:	e9 5f       	subi	r30, 0xF9	; 249
    3220:	fe 4f       	sbci	r31, 0xFE	; 254
    3222:	60 81       	ld	r22, Z
    3224:	71 81       	ldd	r23, Z+1	; 0x01
    3226:	82 81       	ldd	r24, Z+2	; 0x02
    3228:	93 81       	ldd	r25, Z+3	; 0x03
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	4a ef       	ldi	r20, 0xFA	; 250
    3230:	54 e4       	ldi	r21, 0x44	; 68
    3232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	f8 01       	movw	r30, r16
    323c:	80 83       	st	Z, r24
    323e:	91 83       	std	Z+1, r25	; 0x01
    3240:	a2 83       	std	Z+2, r26	; 0x02
    3242:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3244:	fe 01       	movw	r30, r28
    3246:	ed 5f       	subi	r30, 0xFD	; 253
    3248:	fe 4f       	sbci	r31, 0xFE	; 254
    324a:	60 81       	ld	r22, Z
    324c:	71 81       	ldd	r23, Z+1	; 0x01
    324e:	82 81       	ldd	r24, Z+2	; 0x02
    3250:	93 81       	ldd	r25, Z+3	; 0x03
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	40 e8       	ldi	r20, 0x80	; 128
    3258:	5f e3       	ldi	r21, 0x3F	; 63
    325a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    325e:	88 23       	and	r24, r24
    3260:	44 f4       	brge	.+16     	; 0x3272 <main+0x990>
		__ticks = 1;
    3262:	fe 01       	movw	r30, r28
    3264:	ef 5f       	subi	r30, 0xFF	; 255
    3266:	fe 4f       	sbci	r31, 0xFE	; 254
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	91 83       	std	Z+1, r25	; 0x01
    326e:	80 83       	st	Z, r24
    3270:	64 c0       	rjmp	.+200    	; 0x333a <main+0xa58>
	else if (__tmp > 65535)
    3272:	fe 01       	movw	r30, r28
    3274:	ed 5f       	subi	r30, 0xFD	; 253
    3276:	fe 4f       	sbci	r31, 0xFE	; 254
    3278:	60 81       	ld	r22, Z
    327a:	71 81       	ldd	r23, Z+1	; 0x01
    327c:	82 81       	ldd	r24, Z+2	; 0x02
    327e:	93 81       	ldd	r25, Z+3	; 0x03
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	3f ef       	ldi	r19, 0xFF	; 255
    3284:	4f e7       	ldi	r20, 0x7F	; 127
    3286:	57 e4       	ldi	r21, 0x47	; 71
    3288:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    328c:	18 16       	cp	r1, r24
    328e:	0c f0       	brlt	.+2      	; 0x3292 <main+0x9b0>
    3290:	43 c0       	rjmp	.+134    	; 0x3318 <main+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3292:	fe 01       	movw	r30, r28
    3294:	e9 5f       	subi	r30, 0xF9	; 249
    3296:	fe 4f       	sbci	r31, 0xFE	; 254
    3298:	60 81       	ld	r22, Z
    329a:	71 81       	ldd	r23, Z+1	; 0x01
    329c:	82 81       	ldd	r24, Z+2	; 0x02
    329e:	93 81       	ldd	r25, Z+3	; 0x03
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	40 e2       	ldi	r20, 0x20	; 32
    32a6:	51 e4       	ldi	r21, 0x41	; 65
    32a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	8e 01       	movw	r16, r28
    32b2:	0f 5f       	subi	r16, 0xFF	; 255
    32b4:	1e 4f       	sbci	r17, 0xFE	; 254
    32b6:	bc 01       	movw	r22, r24
    32b8:	cd 01       	movw	r24, r26
    32ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	f8 01       	movw	r30, r16
    32c4:	91 83       	std	Z+1, r25	; 0x01
    32c6:	80 83       	st	Z, r24
    32c8:	1f c0       	rjmp	.+62     	; 0x3308 <main+0xa26>
    32ca:	fe 01       	movw	r30, r28
    32cc:	e1 50       	subi	r30, 0x01	; 1
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	88 ec       	ldi	r24, 0xC8	; 200
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	91 83       	std	Z+1, r25	; 0x01
    32d6:	80 83       	st	Z, r24
    32d8:	fe 01       	movw	r30, r28
    32da:	e1 50       	subi	r30, 0x01	; 1
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	80 81       	ld	r24, Z
    32e0:	91 81       	ldd	r25, Z+1	; 0x01
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	f1 f7       	brne	.-4      	; 0x32e2 <main+0xa00>
    32e6:	fe 01       	movw	r30, r28
    32e8:	e1 50       	subi	r30, 0x01	; 1
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	91 83       	std	Z+1, r25	; 0x01
    32ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f0:	de 01       	movw	r26, r28
    32f2:	af 5f       	subi	r26, 0xFF	; 255
    32f4:	be 4f       	sbci	r27, 0xFE	; 254
    32f6:	fe 01       	movw	r30, r28
    32f8:	ef 5f       	subi	r30, 0xFF	; 255
    32fa:	fe 4f       	sbci	r31, 0xFE	; 254
    32fc:	80 81       	ld	r24, Z
    32fe:	91 81       	ldd	r25, Z+1	; 0x01
    3300:	01 97       	sbiw	r24, 0x01	; 1
    3302:	11 96       	adiw	r26, 0x01	; 1
    3304:	9c 93       	st	X, r25
    3306:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3308:	fe 01       	movw	r30, r28
    330a:	ef 5f       	subi	r30, 0xFF	; 255
    330c:	fe 4f       	sbci	r31, 0xFE	; 254
    330e:	80 81       	ld	r24, Z
    3310:	91 81       	ldd	r25, Z+1	; 0x01
    3312:	00 97       	sbiw	r24, 0x00	; 0
    3314:	d1 f6       	brne	.-76     	; 0x32ca <main+0x9e8>
    3316:	27 c0       	rjmp	.+78     	; 0x3366 <main+0xa84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3318:	8e 01       	movw	r16, r28
    331a:	0f 5f       	subi	r16, 0xFF	; 255
    331c:	1e 4f       	sbci	r17, 0xFE	; 254
    331e:	fe 01       	movw	r30, r28
    3320:	ed 5f       	subi	r30, 0xFD	; 253
    3322:	fe 4f       	sbci	r31, 0xFE	; 254
    3324:	60 81       	ld	r22, Z
    3326:	71 81       	ldd	r23, Z+1	; 0x01
    3328:	82 81       	ldd	r24, Z+2	; 0x02
    332a:	93 81       	ldd	r25, Z+3	; 0x03
    332c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3330:	dc 01       	movw	r26, r24
    3332:	cb 01       	movw	r24, r22
    3334:	f8 01       	movw	r30, r16
    3336:	91 83       	std	Z+1, r25	; 0x01
    3338:	80 83       	st	Z, r24
    333a:	de 01       	movw	r26, r28
    333c:	a3 50       	subi	r26, 0x03	; 3
    333e:	bf 4f       	sbci	r27, 0xFF	; 255
    3340:	fe 01       	movw	r30, r28
    3342:	ef 5f       	subi	r30, 0xFF	; 255
    3344:	fe 4f       	sbci	r31, 0xFE	; 254
    3346:	80 81       	ld	r24, Z
    3348:	91 81       	ldd	r25, Z+1	; 0x01
    334a:	8d 93       	st	X+, r24
    334c:	9c 93       	st	X, r25
    334e:	fe 01       	movw	r30, r28
    3350:	e3 50       	subi	r30, 0x03	; 3
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	80 81       	ld	r24, Z
    3356:	91 81       	ldd	r25, Z+1	; 0x01
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	f1 f7       	brne	.-4      	; 0x3358 <main+0xa76>
    335c:	fe 01       	movw	r30, r28
    335e:	e3 50       	subi	r30, 0x03	; 3
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	91 83       	std	Z+1, r25	; 0x01
    3364:	80 83       	st	Z, r24
					_delay_ms(5000);
					HSERVO_voidSetServoAngle(0);
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	0e 94 1e 13 	call	0x263c	; 0x263c <HSERVO_voidSetServoAngle>
					MDIO_voidSetPinValue(DIO_PORTD,PIN4,DIO_LOW);
    336e:	83 e0       	ldi	r24, 0x03	; 3
    3370:	64 e0       	ldi	r22, 0x04	; 4
    3372:	40 e0       	ldi	r20, 0x00	; 0
    3374:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
				  } while(local_u8Flag==1);
    3378:	fe 01       	movw	r30, r28
    337a:	ec 5a       	subi	r30, 0xAC	; 172
    337c:	fe 4f       	sbci	r31, 0xFE	; 254
    337e:	80 81       	ld	r24, Z
    3380:	81 30       	cpi	r24, 0x01	; 1
    3382:	09 f4       	brne	.+2      	; 0x3386 <main+0xaa4>
    3384:	81 ce       	rjmp	.-766    	; 0x3088 <main+0x7a6>

				while(1)
				{
				HLCD_voidDisplayClear();
    3386:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
				HLCD_voidSendString("1-AC");
    338a:	8a ed       	ldi	r24, 0xDA	; 218
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
				HLCD_voidGoToPosition(1,6);
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	66 e0       	ldi	r22, 0x06	; 6
    3396:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
				HLCD_voidSendString("2-LDR");
    339a:	8f ed       	ldi	r24, 0xDF	; 223
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
				HLCD_voidGoToPosition(1,12);
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	6c e0       	ldi	r22, 0x0C	; 12
    33a6:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
				HLCD_voidSendString("3-Fan");
    33aa:	85 ee       	ldi	r24, 0xE5	; 229
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
				HLCD_voidGoToPosition(2,1);
    33b2:	82 e0       	ldi	r24, 0x02	; 2
    33b4:	61 e0       	ldi	r22, 0x01	; 1
    33b6:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
				HLCD_voidSendString("4-Light");
    33ba:	8b ee       	ldi	r24, 0xEB	; 235
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
				HLCD_voidGoToPosition(2,9);
    33c2:	82 e0       	ldi	r24, 0x02	; 2
    33c4:	69 e0       	ldi	r22, 0x09	; 9
    33c6:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
				HLCD_voidSendString("5-LM35");
    33ca:	83 ef       	ldi	r24, 0xF3	; 243
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    33d2:	06 c0       	rjmp	.+12     	; 0x33e0 <main+0xafe>

				while(local_u8PressedKey==0xff)
				{
					local_u8PressedKey=HKEYPAD_u8KeyPressed();
    33d4:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <HKEYPAD_u8KeyPressed>
    33d8:	fe 01       	movw	r30, r28
    33da:	e6 5a       	subi	r30, 0xA6	; 166
    33dc:	fe 4f       	sbci	r31, 0xFE	; 254
    33de:	80 83       	st	Z, r24
				HLCD_voidGoToPosition(2,1);
				HLCD_voidSendString("4-Light");
				HLCD_voidGoToPosition(2,9);
				HLCD_voidSendString("5-LM35");

				while(local_u8PressedKey==0xff)
    33e0:	fe 01       	movw	r30, r28
    33e2:	e6 5a       	subi	r30, 0xA6	; 166
    33e4:	fe 4f       	sbci	r31, 0xFE	; 254
    33e6:	80 81       	ld	r24, Z
    33e8:	8f 3f       	cpi	r24, 0xFF	; 255
    33ea:	a1 f3       	breq	.-24     	; 0x33d4 <main+0xaf2>
				{
					local_u8PressedKey=HKEYPAD_u8KeyPressed();
				}

				if(local_u8PressedKey == '1')
    33ec:	fe 01       	movw	r30, r28
    33ee:	e6 5a       	subi	r30, 0xA6	; 166
    33f0:	fe 4f       	sbci	r31, 0xFE	; 254
    33f2:	80 81       	ld	r24, Z
    33f4:	81 33       	cpi	r24, 0x31	; 49
    33f6:	09 f0       	breq	.+2      	; 0x33fa <main+0xb18>
    33f8:	16 c1       	rjmp	.+556    	; 0x3626 <main+0xd44>
				{
					while(1)
					{
					local_u8PressedKey=0xff;
    33fa:	fe 01       	movw	r30, r28
    33fc:	e6 5a       	subi	r30, 0xA6	; 166
    33fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3400:	8f ef       	ldi	r24, 0xFF	; 255
    3402:	80 83       	st	Z, r24
					HLCD_voidDisplayClear();
    3404:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
					HLCD_voidSendString("1-AC ON");
    3408:	8a ef       	ldi	r24, 0xFA	; 250
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
					HLCD_voidGoToPosition(2,1);
    3410:	82 e0       	ldi	r24, 0x02	; 2
    3412:	61 e0       	ldi	r22, 0x01	; 1
    3414:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
					HLCD_voidSendString("2-AC OFF");
    3418:	82 e0       	ldi	r24, 0x02	; 2
    341a:	91 e0       	ldi	r25, 0x01	; 1
    341c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    3420:	06 c0       	rjmp	.+12     	; 0x342e <main+0xb4c>

					while(local_u8PressedKey==0xff)
					{
						local_u8PressedKey=HKEYPAD_u8KeyPressed();
    3422:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <HKEYPAD_u8KeyPressed>
    3426:	fe 01       	movw	r30, r28
    3428:	e6 5a       	subi	r30, 0xA6	; 166
    342a:	fe 4f       	sbci	r31, 0xFE	; 254
    342c:	80 83       	st	Z, r24
					HLCD_voidDisplayClear();
					HLCD_voidSendString("1-AC ON");
					HLCD_voidGoToPosition(2,1);
					HLCD_voidSendString("2-AC OFF");

					while(local_u8PressedKey==0xff)
    342e:	fe 01       	movw	r30, r28
    3430:	e6 5a       	subi	r30, 0xA6	; 166
    3432:	fe 4f       	sbci	r31, 0xFE	; 254
    3434:	80 81       	ld	r24, Z
    3436:	8f 3f       	cpi	r24, 0xFF	; 255
    3438:	a1 f3       	breq	.-24     	; 0x3422 <main+0xb40>
					{
						local_u8PressedKey=HKEYPAD_u8KeyPressed();
					}
					if(local_u8PressedKey== '1')
    343a:	fe 01       	movw	r30, r28
    343c:	e6 5a       	subi	r30, 0xA6	; 166
    343e:	fe 4f       	sbci	r31, 0xFE	; 254
    3440:	80 81       	ld	r24, Z
    3442:	81 33       	cpi	r24, 0x31	; 49
    3444:	59 f4       	brne	.+22     	; 0x345c <main+0xb7a>
					{
						local_u8PressedKey=0xff;
    3446:	fe 01       	movw	r30, r28
    3448:	e6 5a       	subi	r30, 0xA6	; 166
    344a:	fe 4f       	sbci	r31, 0xFE	; 254
    344c:	8f ef       	ldi	r24, 0xFF	; 255
    344e:	80 83       	st	Z, r24
						MDIO_voidSetPinValue(DIO_PORTA,PIN2,DIO_HIGH);
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	62 e0       	ldi	r22, 0x02	; 2
    3454:	41 e0       	ldi	r20, 0x01	; 1
    3456:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    345a:	95 cf       	rjmp	.-214    	; 0x3386 <main+0xaa4>
						break;
					}
					else if(local_u8PressedKey == '2')
    345c:	fe 01       	movw	r30, r28
    345e:	e6 5a       	subi	r30, 0xA6	; 166
    3460:	fe 4f       	sbci	r31, 0xFE	; 254
    3462:	80 81       	ld	r24, Z
    3464:	82 33       	cpi	r24, 0x32	; 50
    3466:	59 f4       	brne	.+22     	; 0x347e <main+0xb9c>
					{
						local_u8PressedKey=0xff;
    3468:	fe 01       	movw	r30, r28
    346a:	e6 5a       	subi	r30, 0xA6	; 166
    346c:	fe 4f       	sbci	r31, 0xFE	; 254
    346e:	8f ef       	ldi	r24, 0xFF	; 255
    3470:	80 83       	st	Z, r24
						MDIO_voidSetPinValue(DIO_PORTA,PIN2,DIO_LOW);
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	62 e0       	ldi	r22, 0x02	; 2
    3476:	40 e0       	ldi	r20, 0x00	; 0
    3478:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    347c:	84 cf       	rjmp	.-248    	; 0x3386 <main+0xaa4>
						break;
					}
					else if(local_u8PressedKey=='C')
    347e:	fe 01       	movw	r30, r28
    3480:	e6 5a       	subi	r30, 0xA6	; 166
    3482:	fe 4f       	sbci	r31, 0xFE	; 254
    3484:	80 81       	ld	r24, Z
    3486:	83 34       	cpi	r24, 0x43	; 67
    3488:	31 f4       	brne	.+12     	; 0x3496 <main+0xbb4>
					{
						local_u8PressedKey=0xff;
    348a:	fe 01       	movw	r30, r28
    348c:	e6 5a       	subi	r30, 0xA6	; 166
    348e:	fe 4f       	sbci	r31, 0xFE	; 254
    3490:	8f ef       	ldi	r24, 0xFF	; 255
    3492:	80 83       	st	Z, r24
    3494:	78 cf       	rjmp	.-272    	; 0x3386 <main+0xaa4>
						break;
					}
					else
					{
						local_u8PressedKey=0xff;
    3496:	fe 01       	movw	r30, r28
    3498:	e6 5a       	subi	r30, 0xA6	; 166
    349a:	fe 4f       	sbci	r31, 0xFE	; 254
    349c:	8f ef       	ldi	r24, 0xFF	; 255
    349e:	80 83       	st	Z, r24
						HLCD_voidDisplayClear();
    34a0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
						HLCD_voidSendString(" Invalid Input ");
    34a4:	8b e0       	ldi	r24, 0x0B	; 11
    34a6:	91 e0       	ldi	r25, 0x01	; 1
    34a8:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
						HLCD_voidGoToPosition(2,4);
    34ac:	82 e0       	ldi	r24, 0x02	; 2
    34ae:	64 e0       	ldi	r22, 0x04	; 4
    34b0:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
						HLCD_voidSendString("Try Again");
    34b4:	8b e1       	ldi	r24, 0x1B	; 27
    34b6:	91 e0       	ldi	r25, 0x01	; 1
    34b8:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    34bc:	fe 01       	movw	r30, r28
    34be:	e7 50       	subi	r30, 0x07	; 7
    34c0:	ff 4f       	sbci	r31, 0xFF	; 255
    34c2:	80 e0       	ldi	r24, 0x00	; 0
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	aa e7       	ldi	r26, 0x7A	; 122
    34c8:	b4 e4       	ldi	r27, 0x44	; 68
    34ca:	80 83       	st	Z, r24
    34cc:	91 83       	std	Z+1, r25	; 0x01
    34ce:	a2 83       	std	Z+2, r26	; 0x02
    34d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d2:	8e 01       	movw	r16, r28
    34d4:	0b 50       	subi	r16, 0x0B	; 11
    34d6:	1f 4f       	sbci	r17, 0xFF	; 255
    34d8:	fe 01       	movw	r30, r28
    34da:	e7 50       	subi	r30, 0x07	; 7
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	60 81       	ld	r22, Z
    34e0:	71 81       	ldd	r23, Z+1	; 0x01
    34e2:	82 81       	ldd	r24, Z+2	; 0x02
    34e4:	93 81       	ldd	r25, Z+3	; 0x03
    34e6:	20 e0       	ldi	r18, 0x00	; 0
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	4a ef       	ldi	r20, 0xFA	; 250
    34ec:	54 e4       	ldi	r21, 0x44	; 68
    34ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f2:	dc 01       	movw	r26, r24
    34f4:	cb 01       	movw	r24, r22
    34f6:	f8 01       	movw	r30, r16
    34f8:	80 83       	st	Z, r24
    34fa:	91 83       	std	Z+1, r25	; 0x01
    34fc:	a2 83       	std	Z+2, r26	; 0x02
    34fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3500:	fe 01       	movw	r30, r28
    3502:	eb 50       	subi	r30, 0x0B	; 11
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	60 81       	ld	r22, Z
    3508:	71 81       	ldd	r23, Z+1	; 0x01
    350a:	82 81       	ldd	r24, Z+2	; 0x02
    350c:	93 81       	ldd	r25, Z+3	; 0x03
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	40 e8       	ldi	r20, 0x80	; 128
    3514:	5f e3       	ldi	r21, 0x3F	; 63
    3516:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    351a:	88 23       	and	r24, r24
    351c:	44 f4       	brge	.+16     	; 0x352e <main+0xc4c>
		__ticks = 1;
    351e:	fe 01       	movw	r30, r28
    3520:	ed 50       	subi	r30, 0x0D	; 13
    3522:	ff 4f       	sbci	r31, 0xFF	; 255
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	91 83       	std	Z+1, r25	; 0x01
    352a:	80 83       	st	Z, r24
    352c:	64 c0       	rjmp	.+200    	; 0x35f6 <main+0xd14>
	else if (__tmp > 65535)
    352e:	fe 01       	movw	r30, r28
    3530:	eb 50       	subi	r30, 0x0B	; 11
    3532:	ff 4f       	sbci	r31, 0xFF	; 255
    3534:	60 81       	ld	r22, Z
    3536:	71 81       	ldd	r23, Z+1	; 0x01
    3538:	82 81       	ldd	r24, Z+2	; 0x02
    353a:	93 81       	ldd	r25, Z+3	; 0x03
    353c:	20 e0       	ldi	r18, 0x00	; 0
    353e:	3f ef       	ldi	r19, 0xFF	; 255
    3540:	4f e7       	ldi	r20, 0x7F	; 127
    3542:	57 e4       	ldi	r21, 0x47	; 71
    3544:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3548:	18 16       	cp	r1, r24
    354a:	0c f0       	brlt	.+2      	; 0x354e <main+0xc6c>
    354c:	43 c0       	rjmp	.+134    	; 0x35d4 <main+0xcf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354e:	fe 01       	movw	r30, r28
    3550:	e7 50       	subi	r30, 0x07	; 7
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	60 81       	ld	r22, Z
    3556:	71 81       	ldd	r23, Z+1	; 0x01
    3558:	82 81       	ldd	r24, Z+2	; 0x02
    355a:	93 81       	ldd	r25, Z+3	; 0x03
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	40 e2       	ldi	r20, 0x20	; 32
    3562:	51 e4       	ldi	r21, 0x41	; 65
    3564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3568:	dc 01       	movw	r26, r24
    356a:	cb 01       	movw	r24, r22
    356c:	8e 01       	movw	r16, r28
    356e:	0d 50       	subi	r16, 0x0D	; 13
    3570:	1f 4f       	sbci	r17, 0xFF	; 255
    3572:	bc 01       	movw	r22, r24
    3574:	cd 01       	movw	r24, r26
    3576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	f8 01       	movw	r30, r16
    3580:	91 83       	std	Z+1, r25	; 0x01
    3582:	80 83       	st	Z, r24
    3584:	1f c0       	rjmp	.+62     	; 0x35c4 <main+0xce2>
    3586:	fe 01       	movw	r30, r28
    3588:	ef 50       	subi	r30, 0x0F	; 15
    358a:	ff 4f       	sbci	r31, 0xFF	; 255
    358c:	88 ec       	ldi	r24, 0xC8	; 200
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	91 83       	std	Z+1, r25	; 0x01
    3592:	80 83       	st	Z, r24
    3594:	fe 01       	movw	r30, r28
    3596:	ef 50       	subi	r30, 0x0F	; 15
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	80 81       	ld	r24, Z
    359c:	91 81       	ldd	r25, Z+1	; 0x01
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	f1 f7       	brne	.-4      	; 0x359e <main+0xcbc>
    35a2:	fe 01       	movw	r30, r28
    35a4:	ef 50       	subi	r30, 0x0F	; 15
    35a6:	ff 4f       	sbci	r31, 0xFF	; 255
    35a8:	91 83       	std	Z+1, r25	; 0x01
    35aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ac:	de 01       	movw	r26, r28
    35ae:	ad 50       	subi	r26, 0x0D	; 13
    35b0:	bf 4f       	sbci	r27, 0xFF	; 255
    35b2:	fe 01       	movw	r30, r28
    35b4:	ed 50       	subi	r30, 0x0D	; 13
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	80 81       	ld	r24, Z
    35ba:	91 81       	ldd	r25, Z+1	; 0x01
    35bc:	01 97       	sbiw	r24, 0x01	; 1
    35be:	11 96       	adiw	r26, 0x01	; 1
    35c0:	9c 93       	st	X, r25
    35c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c4:	fe 01       	movw	r30, r28
    35c6:	ed 50       	subi	r30, 0x0D	; 13
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	80 81       	ld	r24, Z
    35cc:	91 81       	ldd	r25, Z+1	; 0x01
    35ce:	00 97       	sbiw	r24, 0x00	; 0
    35d0:	d1 f6       	brne	.-76     	; 0x3586 <main+0xca4>
    35d2:	13 cf       	rjmp	.-474    	; 0x33fa <main+0xb18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d4:	8e 01       	movw	r16, r28
    35d6:	0d 50       	subi	r16, 0x0D	; 13
    35d8:	1f 4f       	sbci	r17, 0xFF	; 255
    35da:	fe 01       	movw	r30, r28
    35dc:	eb 50       	subi	r30, 0x0B	; 11
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	60 81       	ld	r22, Z
    35e2:	71 81       	ldd	r23, Z+1	; 0x01
    35e4:	82 81       	ldd	r24, Z+2	; 0x02
    35e6:	93 81       	ldd	r25, Z+3	; 0x03
    35e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	f8 01       	movw	r30, r16
    35f2:	91 83       	std	Z+1, r25	; 0x01
    35f4:	80 83       	st	Z, r24
    35f6:	de 01       	movw	r26, r28
    35f8:	a1 51       	subi	r26, 0x11	; 17
    35fa:	bf 4f       	sbci	r27, 0xFF	; 255
    35fc:	fe 01       	movw	r30, r28
    35fe:	ed 50       	subi	r30, 0x0D	; 13
    3600:	ff 4f       	sbci	r31, 0xFF	; 255
    3602:	80 81       	ld	r24, Z
    3604:	91 81       	ldd	r25, Z+1	; 0x01
    3606:	11 96       	adiw	r26, 0x01	; 1
    3608:	9c 93       	st	X, r25
    360a:	8e 93       	st	-X, r24
    360c:	fe 01       	movw	r30, r28
    360e:	e1 51       	subi	r30, 0x11	; 17
    3610:	ff 4f       	sbci	r31, 0xFF	; 255
    3612:	80 81       	ld	r24, Z
    3614:	91 81       	ldd	r25, Z+1	; 0x01
    3616:	01 97       	sbiw	r24, 0x01	; 1
    3618:	f1 f7       	brne	.-4      	; 0x3616 <main+0xd34>
    361a:	fe 01       	movw	r30, r28
    361c:	e1 51       	subi	r30, 0x11	; 17
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	91 83       	std	Z+1, r25	; 0x01
    3622:	80 83       	st	Z, r24
    3624:	ea ce       	rjmp	.-556    	; 0x33fa <main+0xb18>
					}
					}

				}

				else if(local_u8PressedKey == '2')
    3626:	fe 01       	movw	r30, r28
    3628:	e6 5a       	subi	r30, 0xA6	; 166
    362a:	fe 4f       	sbci	r31, 0xFE	; 254
    362c:	80 81       	ld	r24, Z
    362e:	82 33       	cpi	r24, 0x32	; 50
    3630:	09 f0       	breq	.+2      	; 0x3634 <main+0xd52>
    3632:	34 c1       	rjmp	.+616    	; 0x389c <main+0xfba>
				{
					local_u8PressedKey=0xff;
    3634:	fe 01       	movw	r30, r28
    3636:	e6 5a       	subi	r30, 0xA6	; 166
    3638:	fe 4f       	sbci	r31, 0xFE	; 254
    363a:	8f ef       	ldi	r24, 0xFF	; 255
    363c:	80 83       	st	Z, r24
					HLCD_voidDisplayClear();
    363e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
					HLCD_voidSendString("LDR IS CHECKING");
    3642:	85 e2       	ldi	r24, 0x25	; 37
    3644:	91 e0       	ldi	r25, 0x01	; 1
    3646:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
					HLCD_voidGoToPosition(2,1);
    364a:	82 e0       	ldi	r24, 0x02	; 2
    364c:	61 e0       	ldi	r22, 0x01	; 1
    364e:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
					HLCD_voidSendString("Please Wait...");
    3652:	85 e3       	ldi	r24, 0x35	; 53
    3654:	91 e0       	ldi	r25, 0x01	; 1
    3656:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    365a:	fe 01       	movw	r30, r28
    365c:	e5 51       	subi	r30, 0x15	; 21
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	aa e7       	ldi	r26, 0x7A	; 122
    3666:	b4 e4       	ldi	r27, 0x44	; 68
    3668:	80 83       	st	Z, r24
    366a:	91 83       	std	Z+1, r25	; 0x01
    366c:	a2 83       	std	Z+2, r26	; 0x02
    366e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3670:	8e 01       	movw	r16, r28
    3672:	09 51       	subi	r16, 0x19	; 25
    3674:	1f 4f       	sbci	r17, 0xFF	; 255
    3676:	fe 01       	movw	r30, r28
    3678:	e5 51       	subi	r30, 0x15	; 21
    367a:	ff 4f       	sbci	r31, 0xFF	; 255
    367c:	60 81       	ld	r22, Z
    367e:	71 81       	ldd	r23, Z+1	; 0x01
    3680:	82 81       	ldd	r24, Z+2	; 0x02
    3682:	93 81       	ldd	r25, Z+3	; 0x03
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	4a ef       	ldi	r20, 0xFA	; 250
    368a:	54 e4       	ldi	r21, 0x44	; 68
    368c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	f8 01       	movw	r30, r16
    3696:	80 83       	st	Z, r24
    3698:	91 83       	std	Z+1, r25	; 0x01
    369a:	a2 83       	std	Z+2, r26	; 0x02
    369c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    369e:	fe 01       	movw	r30, r28
    36a0:	e9 51       	subi	r30, 0x19	; 25
    36a2:	ff 4f       	sbci	r31, 0xFF	; 255
    36a4:	60 81       	ld	r22, Z
    36a6:	71 81       	ldd	r23, Z+1	; 0x01
    36a8:	82 81       	ldd	r24, Z+2	; 0x02
    36aa:	93 81       	ldd	r25, Z+3	; 0x03
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	40 e8       	ldi	r20, 0x80	; 128
    36b2:	5f e3       	ldi	r21, 0x3F	; 63
    36b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36b8:	88 23       	and	r24, r24
    36ba:	44 f4       	brge	.+16     	; 0x36cc <main+0xdea>
		__ticks = 1;
    36bc:	fe 01       	movw	r30, r28
    36be:	eb 51       	subi	r30, 0x1B	; 27
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	91 83       	std	Z+1, r25	; 0x01
    36c8:	80 83       	st	Z, r24
    36ca:	64 c0       	rjmp	.+200    	; 0x3794 <main+0xeb2>
	else if (__tmp > 65535)
    36cc:	fe 01       	movw	r30, r28
    36ce:	e9 51       	subi	r30, 0x19	; 25
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	60 81       	ld	r22, Z
    36d4:	71 81       	ldd	r23, Z+1	; 0x01
    36d6:	82 81       	ldd	r24, Z+2	; 0x02
    36d8:	93 81       	ldd	r25, Z+3	; 0x03
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	3f ef       	ldi	r19, 0xFF	; 255
    36de:	4f e7       	ldi	r20, 0x7F	; 127
    36e0:	57 e4       	ldi	r21, 0x47	; 71
    36e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36e6:	18 16       	cp	r1, r24
    36e8:	0c f0       	brlt	.+2      	; 0x36ec <main+0xe0a>
    36ea:	43 c0       	rjmp	.+134    	; 0x3772 <main+0xe90>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ec:	fe 01       	movw	r30, r28
    36ee:	e5 51       	subi	r30, 0x15	; 21
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	60 81       	ld	r22, Z
    36f4:	71 81       	ldd	r23, Z+1	; 0x01
    36f6:	82 81       	ldd	r24, Z+2	; 0x02
    36f8:	93 81       	ldd	r25, Z+3	; 0x03
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	40 e2       	ldi	r20, 0x20	; 32
    3700:	51 e4       	ldi	r21, 0x41	; 65
    3702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3706:	dc 01       	movw	r26, r24
    3708:	cb 01       	movw	r24, r22
    370a:	8e 01       	movw	r16, r28
    370c:	0b 51       	subi	r16, 0x1B	; 27
    370e:	1f 4f       	sbci	r17, 0xFF	; 255
    3710:	bc 01       	movw	r22, r24
    3712:	cd 01       	movw	r24, r26
    3714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	f8 01       	movw	r30, r16
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	80 83       	st	Z, r24
    3722:	1f c0       	rjmp	.+62     	; 0x3762 <main+0xe80>
    3724:	fe 01       	movw	r30, r28
    3726:	ed 51       	subi	r30, 0x1D	; 29
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	88 ec       	ldi	r24, 0xC8	; 200
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	91 83       	std	Z+1, r25	; 0x01
    3730:	80 83       	st	Z, r24
    3732:	fe 01       	movw	r30, r28
    3734:	ed 51       	subi	r30, 0x1D	; 29
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	80 81       	ld	r24, Z
    373a:	91 81       	ldd	r25, Z+1	; 0x01
    373c:	01 97       	sbiw	r24, 0x01	; 1
    373e:	f1 f7       	brne	.-4      	; 0x373c <main+0xe5a>
    3740:	fe 01       	movw	r30, r28
    3742:	ed 51       	subi	r30, 0x1D	; 29
    3744:	ff 4f       	sbci	r31, 0xFF	; 255
    3746:	91 83       	std	Z+1, r25	; 0x01
    3748:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    374a:	de 01       	movw	r26, r28
    374c:	ab 51       	subi	r26, 0x1B	; 27
    374e:	bf 4f       	sbci	r27, 0xFF	; 255
    3750:	fe 01       	movw	r30, r28
    3752:	eb 51       	subi	r30, 0x1B	; 27
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	80 81       	ld	r24, Z
    3758:	91 81       	ldd	r25, Z+1	; 0x01
    375a:	01 97       	sbiw	r24, 0x01	; 1
    375c:	11 96       	adiw	r26, 0x01	; 1
    375e:	9c 93       	st	X, r25
    3760:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3762:	fe 01       	movw	r30, r28
    3764:	eb 51       	subi	r30, 0x1B	; 27
    3766:	ff 4f       	sbci	r31, 0xFF	; 255
    3768:	80 81       	ld	r24, Z
    376a:	91 81       	ldd	r25, Z+1	; 0x01
    376c:	00 97       	sbiw	r24, 0x00	; 0
    376e:	d1 f6       	brne	.-76     	; 0x3724 <main+0xe42>
    3770:	27 c0       	rjmp	.+78     	; 0x37c0 <main+0xede>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3772:	8e 01       	movw	r16, r28
    3774:	0b 51       	subi	r16, 0x1B	; 27
    3776:	1f 4f       	sbci	r17, 0xFF	; 255
    3778:	fe 01       	movw	r30, r28
    377a:	e9 51       	subi	r30, 0x19	; 25
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	60 81       	ld	r22, Z
    3780:	71 81       	ldd	r23, Z+1	; 0x01
    3782:	82 81       	ldd	r24, Z+2	; 0x02
    3784:	93 81       	ldd	r25, Z+3	; 0x03
    3786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378a:	dc 01       	movw	r26, r24
    378c:	cb 01       	movw	r24, r22
    378e:	f8 01       	movw	r30, r16
    3790:	91 83       	std	Z+1, r25	; 0x01
    3792:	80 83       	st	Z, r24
    3794:	de 01       	movw	r26, r28
    3796:	af 51       	subi	r26, 0x1F	; 31
    3798:	bf 4f       	sbci	r27, 0xFF	; 255
    379a:	fe 01       	movw	r30, r28
    379c:	eb 51       	subi	r30, 0x1B	; 27
    379e:	ff 4f       	sbci	r31, 0xFF	; 255
    37a0:	80 81       	ld	r24, Z
    37a2:	91 81       	ldd	r25, Z+1	; 0x01
    37a4:	8d 93       	st	X+, r24
    37a6:	9c 93       	st	X, r25
    37a8:	fe 01       	movw	r30, r28
    37aa:	ef 51       	subi	r30, 0x1F	; 31
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	80 81       	ld	r24, Z
    37b0:	91 81       	ldd	r25, Z+1	; 0x01
    37b2:	01 97       	sbiw	r24, 0x01	; 1
    37b4:	f1 f7       	brne	.-4      	; 0x37b2 <main+0xed0>
    37b6:	fe 01       	movw	r30, r28
    37b8:	ef 51       	subi	r30, 0x1F	; 31
    37ba:	ff 4f       	sbci	r31, 0xFF	; 255
    37bc:	91 83       	std	Z+1, r25	; 0x01
    37be:	80 83       	st	Z, r24
					_delay_ms(1000);

					local_u16DigitalValue=MADC_u16GetDigitalValue(ADC1);
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <MADC_u16GetDigitalValue>
    37c6:	fe 01       	movw	r30, r28
    37c8:	e9 5a       	subi	r30, 0xA9	; 169
    37ca:	fe 4f       	sbci	r31, 0xFE	; 254
    37cc:	91 83       	std	Z+1, r25	; 0x01
    37ce:	80 83       	st	Z, r24
					local_u16AnalogValue=(local_u16DigitalValue*5)/1024;
    37d0:	fe 01       	movw	r30, r28
    37d2:	e9 5a       	subi	r30, 0xA9	; 169
    37d4:	fe 4f       	sbci	r31, 0xFE	; 254
    37d6:	20 81       	ld	r18, Z
    37d8:	31 81       	ldd	r19, Z+1	; 0x01
    37da:	c9 01       	movw	r24, r18
    37dc:	88 0f       	add	r24, r24
    37de:	99 1f       	adc	r25, r25
    37e0:	88 0f       	add	r24, r24
    37e2:	99 1f       	adc	r25, r25
    37e4:	82 0f       	add	r24, r18
    37e6:	93 1f       	adc	r25, r19
    37e8:	fe 01       	movw	r30, r28
    37ea:	eb 5a       	subi	r30, 0xAB	; 171
    37ec:	fe 4f       	sbci	r31, 0xFE	; 254
    37ee:	89 2f       	mov	r24, r25
    37f0:	99 27       	eor	r25, r25
    37f2:	86 95       	lsr	r24
    37f4:	86 95       	lsr	r24
    37f6:	91 83       	std	Z+1, r25	; 0x01
    37f8:	80 83       	st	Z, r24

					if(local_u16AnalogValue<2)
    37fa:	fe 01       	movw	r30, r28
    37fc:	eb 5a       	subi	r30, 0xAB	; 171
    37fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3800:	80 81       	ld	r24, Z
    3802:	91 81       	ldd	r25, Z+1	; 0x01
    3804:	82 30       	cpi	r24, 0x02	; 2
    3806:	91 05       	cpc	r25, r1
    3808:	80 f4       	brcc	.+32     	; 0x382a <main+0xf48>
					{
						MDIO_voidSetPinValue(DIO_PORTA,PIN3,DIO_HIGH);
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	63 e0       	ldi	r22, 0x03	; 3
    380e:	41 e0       	ldi	r20, 0x01	; 1
    3810:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
						MDIO_voidSetPinValue(DIO_PORTA,PIN4,DIO_HIGH);
    3814:	80 e0       	ldi	r24, 0x00	; 0
    3816:	64 e0       	ldi	r22, 0x04	; 4
    3818:	41 e0       	ldi	r20, 0x01	; 1
    381a:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
						MDIO_voidSetPinValue(DIO_PORTA,PIN5,DIO_HIGH);
    381e:	80 e0       	ldi	r24, 0x00	; 0
    3820:	65 e0       	ldi	r22, 0x05	; 5
    3822:	41 e0       	ldi	r20, 0x01	; 1
    3824:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    3828:	ae cd       	rjmp	.-1188   	; 0x3386 <main+0xaa4>
					}
					else if (local_u16AnalogValue>=2 && local_u16AnalogValue<3)
    382a:	fe 01       	movw	r30, r28
    382c:	eb 5a       	subi	r30, 0xAB	; 171
    382e:	fe 4f       	sbci	r31, 0xFE	; 254
    3830:	80 81       	ld	r24, Z
    3832:	91 81       	ldd	r25, Z+1	; 0x01
    3834:	82 30       	cpi	r24, 0x02	; 2
    3836:	91 05       	cpc	r25, r1
    3838:	c0 f0       	brcs	.+48     	; 0x386a <main+0xf88>
    383a:	fe 01       	movw	r30, r28
    383c:	eb 5a       	subi	r30, 0xAB	; 171
    383e:	fe 4f       	sbci	r31, 0xFE	; 254
    3840:	80 81       	ld	r24, Z
    3842:	91 81       	ldd	r25, Z+1	; 0x01
    3844:	83 30       	cpi	r24, 0x03	; 3
    3846:	91 05       	cpc	r25, r1
    3848:	80 f4       	brcc	.+32     	; 0x386a <main+0xf88>
					{
						MDIO_voidSetPinValue(DIO_PORTA,PIN3,DIO_HIGH);
    384a:	80 e0       	ldi	r24, 0x00	; 0
    384c:	63 e0       	ldi	r22, 0x03	; 3
    384e:	41 e0       	ldi	r20, 0x01	; 1
    3850:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
						MDIO_voidSetPinValue(DIO_PORTA,PIN4,DIO_HIGH);
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	64 e0       	ldi	r22, 0x04	; 4
    3858:	41 e0       	ldi	r20, 0x01	; 1
    385a:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
						MDIO_voidSetPinValue(DIO_PORTA,PIN5,DIO_LOW);
    385e:	80 e0       	ldi	r24, 0x00	; 0
    3860:	65 e0       	ldi	r22, 0x05	; 5
    3862:	40 e0       	ldi	r20, 0x00	; 0
    3864:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    3868:	8e cd       	rjmp	.-1252   	; 0x3386 <main+0xaa4>
					}
					else if(local_u16AnalogValue>=4)
    386a:	fe 01       	movw	r30, r28
    386c:	eb 5a       	subi	r30, 0xAB	; 171
    386e:	fe 4f       	sbci	r31, 0xFE	; 254
    3870:	80 81       	ld	r24, Z
    3872:	91 81       	ldd	r25, Z+1	; 0x01
    3874:	84 30       	cpi	r24, 0x04	; 4
    3876:	91 05       	cpc	r25, r1
    3878:	08 f4       	brcc	.+2      	; 0x387c <main+0xf9a>
    387a:	85 cd       	rjmp	.-1270   	; 0x3386 <main+0xaa4>
					{
						MDIO_voidSetPinValue(DIO_PORTA,PIN3,DIO_HIGH);
    387c:	80 e0       	ldi	r24, 0x00	; 0
    387e:	63 e0       	ldi	r22, 0x03	; 3
    3880:	41 e0       	ldi	r20, 0x01	; 1
    3882:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
						MDIO_voidSetPinValue(DIO_PORTA,PIN4,DIO_LOW);
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	64 e0       	ldi	r22, 0x04	; 4
    388a:	40 e0       	ldi	r20, 0x00	; 0
    388c:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
						MDIO_voidSetPinValue(DIO_PORTA,PIN5,DIO_LOW);
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	65 e0       	ldi	r22, 0x05	; 5
    3894:	40 e0       	ldi	r20, 0x00	; 0
    3896:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    389a:	75 cd       	rjmp	.-1302   	; 0x3386 <main+0xaa4>
					}
				}

				else if(local_u8PressedKey == '3')
    389c:	fe 01       	movw	r30, r28
    389e:	e6 5a       	subi	r30, 0xA6	; 166
    38a0:	fe 4f       	sbci	r31, 0xFE	; 254
    38a2:	80 81       	ld	r24, Z
    38a4:	83 33       	cpi	r24, 0x33	; 51
    38a6:	09 f0       	breq	.+2      	; 0x38aa <main+0xfc8>
    38a8:	16 c1       	rjmp	.+556    	; 0x3ad6 <main+0x11f4>
				{
					while(1)
					{
					local_u8PressedKey=0xff;
    38aa:	fe 01       	movw	r30, r28
    38ac:	e6 5a       	subi	r30, 0xA6	; 166
    38ae:	fe 4f       	sbci	r31, 0xFE	; 254
    38b0:	8f ef       	ldi	r24, 0xFF	; 255
    38b2:	80 83       	st	Z, r24
					HLCD_voidDisplayClear();
    38b4:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
					HLCD_voidSendString("1-FAN ON");
    38b8:	84 e4       	ldi	r24, 0x44	; 68
    38ba:	91 e0       	ldi	r25, 0x01	; 1
    38bc:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
					HLCD_voidGoToPosition(2,1);
    38c0:	82 e0       	ldi	r24, 0x02	; 2
    38c2:	61 e0       	ldi	r22, 0x01	; 1
    38c4:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
					HLCD_voidSendString("2-FAN OFF");
    38c8:	8d e4       	ldi	r24, 0x4D	; 77
    38ca:	91 e0       	ldi	r25, 0x01	; 1
    38cc:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    38d0:	06 c0       	rjmp	.+12     	; 0x38de <main+0xffc>

					while(local_u8PressedKey==0xff)
					{
						local_u8PressedKey=HKEYPAD_u8KeyPressed();
    38d2:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <HKEYPAD_u8KeyPressed>
    38d6:	fe 01       	movw	r30, r28
    38d8:	e6 5a       	subi	r30, 0xA6	; 166
    38da:	fe 4f       	sbci	r31, 0xFE	; 254
    38dc:	80 83       	st	Z, r24
					HLCD_voidDisplayClear();
					HLCD_voidSendString("1-FAN ON");
					HLCD_voidGoToPosition(2,1);
					HLCD_voidSendString("2-FAN OFF");

					while(local_u8PressedKey==0xff)
    38de:	fe 01       	movw	r30, r28
    38e0:	e6 5a       	subi	r30, 0xA6	; 166
    38e2:	fe 4f       	sbci	r31, 0xFE	; 254
    38e4:	80 81       	ld	r24, Z
    38e6:	8f 3f       	cpi	r24, 0xFF	; 255
    38e8:	a1 f3       	breq	.-24     	; 0x38d2 <main+0xff0>
					{
						local_u8PressedKey=HKEYPAD_u8KeyPressed();
					}
					if(local_u8PressedKey== '1')
    38ea:	fe 01       	movw	r30, r28
    38ec:	e6 5a       	subi	r30, 0xA6	; 166
    38ee:	fe 4f       	sbci	r31, 0xFE	; 254
    38f0:	80 81       	ld	r24, Z
    38f2:	81 33       	cpi	r24, 0x31	; 49
    38f4:	59 f4       	brne	.+22     	; 0x390c <main+0x102a>
					{
						local_u8PressedKey=0xff;
    38f6:	fe 01       	movw	r30, r28
    38f8:	e6 5a       	subi	r30, 0xA6	; 166
    38fa:	fe 4f       	sbci	r31, 0xFE	; 254
    38fc:	8f ef       	ldi	r24, 0xFF	; 255
    38fe:	80 83       	st	Z, r24
						MDIO_voidSetPinValue(DIO_PORTA,PIN6,DIO_HIGH);
    3900:	80 e0       	ldi	r24, 0x00	; 0
    3902:	66 e0       	ldi	r22, 0x06	; 6
    3904:	41 e0       	ldi	r20, 0x01	; 1
    3906:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    390a:	3d cd       	rjmp	.-1414   	; 0x3386 <main+0xaa4>
						break;
					}
					else if(local_u8PressedKey == '2')
    390c:	fe 01       	movw	r30, r28
    390e:	e6 5a       	subi	r30, 0xA6	; 166
    3910:	fe 4f       	sbci	r31, 0xFE	; 254
    3912:	80 81       	ld	r24, Z
    3914:	82 33       	cpi	r24, 0x32	; 50
    3916:	59 f4       	brne	.+22     	; 0x392e <main+0x104c>
					{
						local_u8PressedKey=0xff;
    3918:	fe 01       	movw	r30, r28
    391a:	e6 5a       	subi	r30, 0xA6	; 166
    391c:	fe 4f       	sbci	r31, 0xFE	; 254
    391e:	8f ef       	ldi	r24, 0xFF	; 255
    3920:	80 83       	st	Z, r24
						MDIO_voidSetPinValue(DIO_PORTA,PIN6,DIO_LOW);
    3922:	80 e0       	ldi	r24, 0x00	; 0
    3924:	66 e0       	ldi	r22, 0x06	; 6
    3926:	40 e0       	ldi	r20, 0x00	; 0
    3928:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    392c:	2c cd       	rjmp	.-1448   	; 0x3386 <main+0xaa4>
						break;
					}
					else if(local_u8PressedKey=='C')
    392e:	fe 01       	movw	r30, r28
    3930:	e6 5a       	subi	r30, 0xA6	; 166
    3932:	fe 4f       	sbci	r31, 0xFE	; 254
    3934:	80 81       	ld	r24, Z
    3936:	83 34       	cpi	r24, 0x43	; 67
    3938:	31 f4       	brne	.+12     	; 0x3946 <main+0x1064>
					{
						local_u8PressedKey=0xff;
    393a:	fe 01       	movw	r30, r28
    393c:	e6 5a       	subi	r30, 0xA6	; 166
    393e:	fe 4f       	sbci	r31, 0xFE	; 254
    3940:	8f ef       	ldi	r24, 0xFF	; 255
    3942:	80 83       	st	Z, r24
    3944:	20 cd       	rjmp	.-1472   	; 0x3386 <main+0xaa4>
						break;
					}
					else
					{
						local_u8PressedKey=0xff;
    3946:	fe 01       	movw	r30, r28
    3948:	e6 5a       	subi	r30, 0xA6	; 166
    394a:	fe 4f       	sbci	r31, 0xFE	; 254
    394c:	8f ef       	ldi	r24, 0xFF	; 255
    394e:	80 83       	st	Z, r24
						HLCD_voidDisplayClear();
    3950:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
						HLCD_voidSendString(" Invalid Input ");
    3954:	8b e0       	ldi	r24, 0x0B	; 11
    3956:	91 e0       	ldi	r25, 0x01	; 1
    3958:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
						HLCD_voidGoToPosition(2,4);
    395c:	82 e0       	ldi	r24, 0x02	; 2
    395e:	64 e0       	ldi	r22, 0x04	; 4
    3960:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
						HLCD_voidSendString("Try Again");
    3964:	8b e1       	ldi	r24, 0x1B	; 27
    3966:	91 e0       	ldi	r25, 0x01	; 1
    3968:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    396c:	fe 01       	movw	r30, r28
    396e:	e3 52       	subi	r30, 0x23	; 35
    3970:	ff 4f       	sbci	r31, 0xFF	; 255
    3972:	80 e0       	ldi	r24, 0x00	; 0
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	aa e7       	ldi	r26, 0x7A	; 122
    3978:	b4 e4       	ldi	r27, 0x44	; 68
    397a:	80 83       	st	Z, r24
    397c:	91 83       	std	Z+1, r25	; 0x01
    397e:	a2 83       	std	Z+2, r26	; 0x02
    3980:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3982:	8e 01       	movw	r16, r28
    3984:	07 52       	subi	r16, 0x27	; 39
    3986:	1f 4f       	sbci	r17, 0xFF	; 255
    3988:	fe 01       	movw	r30, r28
    398a:	e3 52       	subi	r30, 0x23	; 35
    398c:	ff 4f       	sbci	r31, 0xFF	; 255
    398e:	60 81       	ld	r22, Z
    3990:	71 81       	ldd	r23, Z+1	; 0x01
    3992:	82 81       	ldd	r24, Z+2	; 0x02
    3994:	93 81       	ldd	r25, Z+3	; 0x03
    3996:	20 e0       	ldi	r18, 0x00	; 0
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	4a ef       	ldi	r20, 0xFA	; 250
    399c:	54 e4       	ldi	r21, 0x44	; 68
    399e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a2:	dc 01       	movw	r26, r24
    39a4:	cb 01       	movw	r24, r22
    39a6:	f8 01       	movw	r30, r16
    39a8:	80 83       	st	Z, r24
    39aa:	91 83       	std	Z+1, r25	; 0x01
    39ac:	a2 83       	std	Z+2, r26	; 0x02
    39ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39b0:	fe 01       	movw	r30, r28
    39b2:	e7 52       	subi	r30, 0x27	; 39
    39b4:	ff 4f       	sbci	r31, 0xFF	; 255
    39b6:	60 81       	ld	r22, Z
    39b8:	71 81       	ldd	r23, Z+1	; 0x01
    39ba:	82 81       	ldd	r24, Z+2	; 0x02
    39bc:	93 81       	ldd	r25, Z+3	; 0x03
    39be:	20 e0       	ldi	r18, 0x00	; 0
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	40 e8       	ldi	r20, 0x80	; 128
    39c4:	5f e3       	ldi	r21, 0x3F	; 63
    39c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39ca:	88 23       	and	r24, r24
    39cc:	44 f4       	brge	.+16     	; 0x39de <main+0x10fc>
		__ticks = 1;
    39ce:	fe 01       	movw	r30, r28
    39d0:	e9 52       	subi	r30, 0x29	; 41
    39d2:	ff 4f       	sbci	r31, 0xFF	; 255
    39d4:	81 e0       	ldi	r24, 0x01	; 1
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	91 83       	std	Z+1, r25	; 0x01
    39da:	80 83       	st	Z, r24
    39dc:	64 c0       	rjmp	.+200    	; 0x3aa6 <main+0x11c4>
	else if (__tmp > 65535)
    39de:	fe 01       	movw	r30, r28
    39e0:	e7 52       	subi	r30, 0x27	; 39
    39e2:	ff 4f       	sbci	r31, 0xFF	; 255
    39e4:	60 81       	ld	r22, Z
    39e6:	71 81       	ldd	r23, Z+1	; 0x01
    39e8:	82 81       	ldd	r24, Z+2	; 0x02
    39ea:	93 81       	ldd	r25, Z+3	; 0x03
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	3f ef       	ldi	r19, 0xFF	; 255
    39f0:	4f e7       	ldi	r20, 0x7F	; 127
    39f2:	57 e4       	ldi	r21, 0x47	; 71
    39f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39f8:	18 16       	cp	r1, r24
    39fa:	0c f0       	brlt	.+2      	; 0x39fe <main+0x111c>
    39fc:	43 c0       	rjmp	.+134    	; 0x3a84 <main+0x11a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39fe:	fe 01       	movw	r30, r28
    3a00:	e3 52       	subi	r30, 0x23	; 35
    3a02:	ff 4f       	sbci	r31, 0xFF	; 255
    3a04:	60 81       	ld	r22, Z
    3a06:	71 81       	ldd	r23, Z+1	; 0x01
    3a08:	82 81       	ldd	r24, Z+2	; 0x02
    3a0a:	93 81       	ldd	r25, Z+3	; 0x03
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	40 e2       	ldi	r20, 0x20	; 32
    3a12:	51 e4       	ldi	r21, 0x41	; 65
    3a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	8e 01       	movw	r16, r28
    3a1e:	09 52       	subi	r16, 0x29	; 41
    3a20:	1f 4f       	sbci	r17, 0xFF	; 255
    3a22:	bc 01       	movw	r22, r24
    3a24:	cd 01       	movw	r24, r26
    3a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	f8 01       	movw	r30, r16
    3a30:	91 83       	std	Z+1, r25	; 0x01
    3a32:	80 83       	st	Z, r24
    3a34:	1f c0       	rjmp	.+62     	; 0x3a74 <main+0x1192>
    3a36:	fe 01       	movw	r30, r28
    3a38:	eb 52       	subi	r30, 0x2B	; 43
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	88 ec       	ldi	r24, 0xC8	; 200
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	91 83       	std	Z+1, r25	; 0x01
    3a42:	80 83       	st	Z, r24
    3a44:	fe 01       	movw	r30, r28
    3a46:	eb 52       	subi	r30, 0x2B	; 43
    3a48:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4a:	80 81       	ld	r24, Z
    3a4c:	91 81       	ldd	r25, Z+1	; 0x01
    3a4e:	01 97       	sbiw	r24, 0x01	; 1
    3a50:	f1 f7       	brne	.-4      	; 0x3a4e <main+0x116c>
    3a52:	fe 01       	movw	r30, r28
    3a54:	eb 52       	subi	r30, 0x2B	; 43
    3a56:	ff 4f       	sbci	r31, 0xFF	; 255
    3a58:	91 83       	std	Z+1, r25	; 0x01
    3a5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a5c:	de 01       	movw	r26, r28
    3a5e:	a9 52       	subi	r26, 0x29	; 41
    3a60:	bf 4f       	sbci	r27, 0xFF	; 255
    3a62:	fe 01       	movw	r30, r28
    3a64:	e9 52       	subi	r30, 0x29	; 41
    3a66:	ff 4f       	sbci	r31, 0xFF	; 255
    3a68:	80 81       	ld	r24, Z
    3a6a:	91 81       	ldd	r25, Z+1	; 0x01
    3a6c:	01 97       	sbiw	r24, 0x01	; 1
    3a6e:	11 96       	adiw	r26, 0x01	; 1
    3a70:	9c 93       	st	X, r25
    3a72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a74:	fe 01       	movw	r30, r28
    3a76:	e9 52       	subi	r30, 0x29	; 41
    3a78:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7a:	80 81       	ld	r24, Z
    3a7c:	91 81       	ldd	r25, Z+1	; 0x01
    3a7e:	00 97       	sbiw	r24, 0x00	; 0
    3a80:	d1 f6       	brne	.-76     	; 0x3a36 <main+0x1154>
    3a82:	13 cf       	rjmp	.-474    	; 0x38aa <main+0xfc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a84:	8e 01       	movw	r16, r28
    3a86:	09 52       	subi	r16, 0x29	; 41
    3a88:	1f 4f       	sbci	r17, 0xFF	; 255
    3a8a:	fe 01       	movw	r30, r28
    3a8c:	e7 52       	subi	r30, 0x27	; 39
    3a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a90:	60 81       	ld	r22, Z
    3a92:	71 81       	ldd	r23, Z+1	; 0x01
    3a94:	82 81       	ldd	r24, Z+2	; 0x02
    3a96:	93 81       	ldd	r25, Z+3	; 0x03
    3a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a9c:	dc 01       	movw	r26, r24
    3a9e:	cb 01       	movw	r24, r22
    3aa0:	f8 01       	movw	r30, r16
    3aa2:	91 83       	std	Z+1, r25	; 0x01
    3aa4:	80 83       	st	Z, r24
    3aa6:	de 01       	movw	r26, r28
    3aa8:	ad 52       	subi	r26, 0x2D	; 45
    3aaa:	bf 4f       	sbci	r27, 0xFF	; 255
    3aac:	fe 01       	movw	r30, r28
    3aae:	e9 52       	subi	r30, 0x29	; 41
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	80 81       	ld	r24, Z
    3ab4:	91 81       	ldd	r25, Z+1	; 0x01
    3ab6:	11 96       	adiw	r26, 0x01	; 1
    3ab8:	9c 93       	st	X, r25
    3aba:	8e 93       	st	-X, r24
    3abc:	fe 01       	movw	r30, r28
    3abe:	ed 52       	subi	r30, 0x2D	; 45
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	80 81       	ld	r24, Z
    3ac4:	91 81       	ldd	r25, Z+1	; 0x01
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	f1 f7       	brne	.-4      	; 0x3ac6 <main+0x11e4>
    3aca:	fe 01       	movw	r30, r28
    3acc:	ed 52       	subi	r30, 0x2D	; 45
    3ace:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad0:	91 83       	std	Z+1, r25	; 0x01
    3ad2:	80 83       	st	Z, r24
    3ad4:	ea ce       	rjmp	.-556    	; 0x38aa <main+0xfc8>
						_delay_ms(1000);
					}
					}
				}

				else if(local_u8PressedKey == '4')
    3ad6:	fe 01       	movw	r30, r28
    3ad8:	e6 5a       	subi	r30, 0xA6	; 166
    3ada:	fe 4f       	sbci	r31, 0xFE	; 254
    3adc:	80 81       	ld	r24, Z
    3ade:	84 33       	cpi	r24, 0x34	; 52
    3ae0:	09 f0       	breq	.+2      	; 0x3ae4 <main+0x1202>
    3ae2:	2a c1       	rjmp	.+596    	; 0x3d38 <main+0x1456>
				{
					while(1)
					{
					local_u8PressedKey=0xff;
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	e6 5a       	subi	r30, 0xA6	; 166
    3ae8:	fe 4f       	sbci	r31, 0xFE	; 254
    3aea:	8f ef       	ldi	r24, 0xFF	; 255
    3aec:	80 83       	st	Z, r24
					HLCD_voidDisplayClear();
    3aee:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
					HLCD_voidSendString("1-Light ON");
    3af2:	87 e5       	ldi	r24, 0x57	; 87
    3af4:	91 e0       	ldi	r25, 0x01	; 1
    3af6:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
					HLCD_voidGoToPosition(2,1);
    3afa:	82 e0       	ldi	r24, 0x02	; 2
    3afc:	61 e0       	ldi	r22, 0x01	; 1
    3afe:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
					HLCD_voidSendString("2-Light OFF");
    3b02:	82 e6       	ldi	r24, 0x62	; 98
    3b04:	91 e0       	ldi	r25, 0x01	; 1
    3b06:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    3b0a:	06 c0       	rjmp	.+12     	; 0x3b18 <main+0x1236>

					while(local_u8PressedKey==0xff)
					{
						local_u8PressedKey=HKEYPAD_u8KeyPressed();
    3b0c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <HKEYPAD_u8KeyPressed>
    3b10:	fe 01       	movw	r30, r28
    3b12:	e6 5a       	subi	r30, 0xA6	; 166
    3b14:	fe 4f       	sbci	r31, 0xFE	; 254
    3b16:	80 83       	st	Z, r24
					HLCD_voidDisplayClear();
					HLCD_voidSendString("1-Light ON");
					HLCD_voidGoToPosition(2,1);
					HLCD_voidSendString("2-Light OFF");

					while(local_u8PressedKey==0xff)
    3b18:	fe 01       	movw	r30, r28
    3b1a:	e6 5a       	subi	r30, 0xA6	; 166
    3b1c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b1e:	80 81       	ld	r24, Z
    3b20:	8f 3f       	cpi	r24, 0xFF	; 255
    3b22:	a1 f3       	breq	.-24     	; 0x3b0c <main+0x122a>
					{
						local_u8PressedKey=HKEYPAD_u8KeyPressed();
					}

					if(local_u8PressedKey == '1')
    3b24:	fe 01       	movw	r30, r28
    3b26:	e6 5a       	subi	r30, 0xA6	; 166
    3b28:	fe 4f       	sbci	r31, 0xFE	; 254
    3b2a:	80 81       	ld	r24, Z
    3b2c:	81 33       	cpi	r24, 0x31	; 49
    3b2e:	a9 f4       	brne	.+42     	; 0x3b5a <main+0x1278>
					{
						local_u8PressedKey=0xff;
    3b30:	fe 01       	movw	r30, r28
    3b32:	e6 5a       	subi	r30, 0xA6	; 166
    3b34:	fe 4f       	sbci	r31, 0xFE	; 254
    3b36:	8f ef       	ldi	r24, 0xFF	; 255
    3b38:	80 83       	st	Z, r24
						MDIO_voidSetPinValue(DIO_PORTA,PIN3,DIO_HIGH);
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	63 e0       	ldi	r22, 0x03	; 3
    3b3e:	41 e0       	ldi	r20, 0x01	; 1
    3b40:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
						MDIO_voidSetPinValue(DIO_PORTA,PIN4,DIO_HIGH);
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    3b46:	64 e0       	ldi	r22, 0x04	; 4
    3b48:	41 e0       	ldi	r20, 0x01	; 1
    3b4a:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
						MDIO_voidSetPinValue(DIO_PORTA,PIN5,DIO_HIGH);
    3b4e:	80 e0       	ldi	r24, 0x00	; 0
    3b50:	65 e0       	ldi	r22, 0x05	; 5
    3b52:	41 e0       	ldi	r20, 0x01	; 1
    3b54:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    3b58:	16 cc       	rjmp	.-2004   	; 0x3386 <main+0xaa4>
						break;
					}
					else if(local_u8PressedKey == '2')
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	e6 5a       	subi	r30, 0xA6	; 166
    3b5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b60:	80 81       	ld	r24, Z
    3b62:	82 33       	cpi	r24, 0x32	; 50
    3b64:	a9 f4       	brne	.+42     	; 0x3b90 <main+0x12ae>
					{
						local_u8PressedKey=0xff;
    3b66:	fe 01       	movw	r30, r28
    3b68:	e6 5a       	subi	r30, 0xA6	; 166
    3b6a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b6c:	8f ef       	ldi	r24, 0xFF	; 255
    3b6e:	80 83       	st	Z, r24
						MDIO_voidSetPinValue(DIO_PORTA,PIN3,DIO_LOW);
    3b70:	80 e0       	ldi	r24, 0x00	; 0
    3b72:	63 e0       	ldi	r22, 0x03	; 3
    3b74:	40 e0       	ldi	r20, 0x00	; 0
    3b76:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
						MDIO_voidSetPinValue(DIO_PORTA,PIN4,DIO_LOW);
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
    3b7c:	64 e0       	ldi	r22, 0x04	; 4
    3b7e:	40 e0       	ldi	r20, 0x00	; 0
    3b80:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
						MDIO_voidSetPinValue(DIO_PORTA,PIN5,DIO_LOW);
    3b84:	80 e0       	ldi	r24, 0x00	; 0
    3b86:	65 e0       	ldi	r22, 0x05	; 5
    3b88:	40 e0       	ldi	r20, 0x00	; 0
    3b8a:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    3b8e:	fb cb       	rjmp	.-2058   	; 0x3386 <main+0xaa4>
						break;
					}
					else if(local_u8PressedKey=='C')
    3b90:	fe 01       	movw	r30, r28
    3b92:	e6 5a       	subi	r30, 0xA6	; 166
    3b94:	fe 4f       	sbci	r31, 0xFE	; 254
    3b96:	80 81       	ld	r24, Z
    3b98:	83 34       	cpi	r24, 0x43	; 67
    3b9a:	31 f4       	brne	.+12     	; 0x3ba8 <main+0x12c6>
					{
						local_u8PressedKey=0xff;
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	e6 5a       	subi	r30, 0xA6	; 166
    3ba0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ba2:	8f ef       	ldi	r24, 0xFF	; 255
    3ba4:	80 83       	st	Z, r24
    3ba6:	ef cb       	rjmp	.-2082   	; 0x3386 <main+0xaa4>
						break;
					}
					else
					{
						local_u8PressedKey=0xff;
    3ba8:	fe 01       	movw	r30, r28
    3baa:	e6 5a       	subi	r30, 0xA6	; 166
    3bac:	fe 4f       	sbci	r31, 0xFE	; 254
    3bae:	8f ef       	ldi	r24, 0xFF	; 255
    3bb0:	80 83       	st	Z, r24
						HLCD_voidDisplayClear();
    3bb2:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
						HLCD_voidSendString(" Invalid Input ");
    3bb6:	8b e0       	ldi	r24, 0x0B	; 11
    3bb8:	91 e0       	ldi	r25, 0x01	; 1
    3bba:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
						HLCD_voidGoToPosition(2,4);
    3bbe:	82 e0       	ldi	r24, 0x02	; 2
    3bc0:	64 e0       	ldi	r22, 0x04	; 4
    3bc2:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
						HLCD_voidSendString("Try Again");
    3bc6:	8b e1       	ldi	r24, 0x1B	; 27
    3bc8:	91 e0       	ldi	r25, 0x01	; 1
    3bca:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    3bce:	fe 01       	movw	r30, r28
    3bd0:	e1 53       	subi	r30, 0x31	; 49
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	aa e7       	ldi	r26, 0x7A	; 122
    3bda:	b4 e4       	ldi	r27, 0x44	; 68
    3bdc:	80 83       	st	Z, r24
    3bde:	91 83       	std	Z+1, r25	; 0x01
    3be0:	a2 83       	std	Z+2, r26	; 0x02
    3be2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3be4:	8e 01       	movw	r16, r28
    3be6:	05 53       	subi	r16, 0x35	; 53
    3be8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bea:	fe 01       	movw	r30, r28
    3bec:	e1 53       	subi	r30, 0x31	; 49
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	60 81       	ld	r22, Z
    3bf2:	71 81       	ldd	r23, Z+1	; 0x01
    3bf4:	82 81       	ldd	r24, Z+2	; 0x02
    3bf6:	93 81       	ldd	r25, Z+3	; 0x03
    3bf8:	20 e0       	ldi	r18, 0x00	; 0
    3bfa:	30 e0       	ldi	r19, 0x00	; 0
    3bfc:	4a ef       	ldi	r20, 0xFA	; 250
    3bfe:	54 e4       	ldi	r21, 0x44	; 68
    3c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c04:	dc 01       	movw	r26, r24
    3c06:	cb 01       	movw	r24, r22
    3c08:	f8 01       	movw	r30, r16
    3c0a:	80 83       	st	Z, r24
    3c0c:	91 83       	std	Z+1, r25	; 0x01
    3c0e:	a2 83       	std	Z+2, r26	; 0x02
    3c10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c12:	fe 01       	movw	r30, r28
    3c14:	e5 53       	subi	r30, 0x35	; 53
    3c16:	ff 4f       	sbci	r31, 0xFF	; 255
    3c18:	60 81       	ld	r22, Z
    3c1a:	71 81       	ldd	r23, Z+1	; 0x01
    3c1c:	82 81       	ldd	r24, Z+2	; 0x02
    3c1e:	93 81       	ldd	r25, Z+3	; 0x03
    3c20:	20 e0       	ldi	r18, 0x00	; 0
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	40 e8       	ldi	r20, 0x80	; 128
    3c26:	5f e3       	ldi	r21, 0x3F	; 63
    3c28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c2c:	88 23       	and	r24, r24
    3c2e:	44 f4       	brge	.+16     	; 0x3c40 <main+0x135e>
		__ticks = 1;
    3c30:	fe 01       	movw	r30, r28
    3c32:	e7 53       	subi	r30, 0x37	; 55
    3c34:	ff 4f       	sbci	r31, 0xFF	; 255
    3c36:	81 e0       	ldi	r24, 0x01	; 1
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	91 83       	std	Z+1, r25	; 0x01
    3c3c:	80 83       	st	Z, r24
    3c3e:	64 c0       	rjmp	.+200    	; 0x3d08 <main+0x1426>
	else if (__tmp > 65535)
    3c40:	fe 01       	movw	r30, r28
    3c42:	e5 53       	subi	r30, 0x35	; 53
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	60 81       	ld	r22, Z
    3c48:	71 81       	ldd	r23, Z+1	; 0x01
    3c4a:	82 81       	ldd	r24, Z+2	; 0x02
    3c4c:	93 81       	ldd	r25, Z+3	; 0x03
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	3f ef       	ldi	r19, 0xFF	; 255
    3c52:	4f e7       	ldi	r20, 0x7F	; 127
    3c54:	57 e4       	ldi	r21, 0x47	; 71
    3c56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c5a:	18 16       	cp	r1, r24
    3c5c:	0c f0       	brlt	.+2      	; 0x3c60 <main+0x137e>
    3c5e:	43 c0       	rjmp	.+134    	; 0x3ce6 <main+0x1404>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c60:	fe 01       	movw	r30, r28
    3c62:	e1 53       	subi	r30, 0x31	; 49
    3c64:	ff 4f       	sbci	r31, 0xFF	; 255
    3c66:	60 81       	ld	r22, Z
    3c68:	71 81       	ldd	r23, Z+1	; 0x01
    3c6a:	82 81       	ldd	r24, Z+2	; 0x02
    3c6c:	93 81       	ldd	r25, Z+3	; 0x03
    3c6e:	20 e0       	ldi	r18, 0x00	; 0
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	40 e2       	ldi	r20, 0x20	; 32
    3c74:	51 e4       	ldi	r21, 0x41	; 65
    3c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c7a:	dc 01       	movw	r26, r24
    3c7c:	cb 01       	movw	r24, r22
    3c7e:	8e 01       	movw	r16, r28
    3c80:	07 53       	subi	r16, 0x37	; 55
    3c82:	1f 4f       	sbci	r17, 0xFF	; 255
    3c84:	bc 01       	movw	r22, r24
    3c86:	cd 01       	movw	r24, r26
    3c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	f8 01       	movw	r30, r16
    3c92:	91 83       	std	Z+1, r25	; 0x01
    3c94:	80 83       	st	Z, r24
    3c96:	1f c0       	rjmp	.+62     	; 0x3cd6 <main+0x13f4>
    3c98:	fe 01       	movw	r30, r28
    3c9a:	e9 53       	subi	r30, 0x39	; 57
    3c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9e:	88 ec       	ldi	r24, 0xC8	; 200
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	91 83       	std	Z+1, r25	; 0x01
    3ca4:	80 83       	st	Z, r24
    3ca6:	fe 01       	movw	r30, r28
    3ca8:	e9 53       	subi	r30, 0x39	; 57
    3caa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cac:	80 81       	ld	r24, Z
    3cae:	91 81       	ldd	r25, Z+1	; 0x01
    3cb0:	01 97       	sbiw	r24, 0x01	; 1
    3cb2:	f1 f7       	brne	.-4      	; 0x3cb0 <main+0x13ce>
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	e9 53       	subi	r30, 0x39	; 57
    3cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cba:	91 83       	std	Z+1, r25	; 0x01
    3cbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cbe:	de 01       	movw	r26, r28
    3cc0:	a7 53       	subi	r26, 0x37	; 55
    3cc2:	bf 4f       	sbci	r27, 0xFF	; 255
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	e7 53       	subi	r30, 0x37	; 55
    3cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cca:	80 81       	ld	r24, Z
    3ccc:	91 81       	ldd	r25, Z+1	; 0x01
    3cce:	01 97       	sbiw	r24, 0x01	; 1
    3cd0:	11 96       	adiw	r26, 0x01	; 1
    3cd2:	9c 93       	st	X, r25
    3cd4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd6:	fe 01       	movw	r30, r28
    3cd8:	e7 53       	subi	r30, 0x37	; 55
    3cda:	ff 4f       	sbci	r31, 0xFF	; 255
    3cdc:	80 81       	ld	r24, Z
    3cde:	91 81       	ldd	r25, Z+1	; 0x01
    3ce0:	00 97       	sbiw	r24, 0x00	; 0
    3ce2:	d1 f6       	brne	.-76     	; 0x3c98 <main+0x13b6>
    3ce4:	ff ce       	rjmp	.-514    	; 0x3ae4 <main+0x1202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce6:	8e 01       	movw	r16, r28
    3ce8:	07 53       	subi	r16, 0x37	; 55
    3cea:	1f 4f       	sbci	r17, 0xFF	; 255
    3cec:	fe 01       	movw	r30, r28
    3cee:	e5 53       	subi	r30, 0x35	; 53
    3cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf2:	60 81       	ld	r22, Z
    3cf4:	71 81       	ldd	r23, Z+1	; 0x01
    3cf6:	82 81       	ldd	r24, Z+2	; 0x02
    3cf8:	93 81       	ldd	r25, Z+3	; 0x03
    3cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	f8 01       	movw	r30, r16
    3d04:	91 83       	std	Z+1, r25	; 0x01
    3d06:	80 83       	st	Z, r24
    3d08:	de 01       	movw	r26, r28
    3d0a:	ab 53       	subi	r26, 0x3B	; 59
    3d0c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d0e:	fe 01       	movw	r30, r28
    3d10:	e7 53       	subi	r30, 0x37	; 55
    3d12:	ff 4f       	sbci	r31, 0xFF	; 255
    3d14:	80 81       	ld	r24, Z
    3d16:	91 81       	ldd	r25, Z+1	; 0x01
    3d18:	11 96       	adiw	r26, 0x01	; 1
    3d1a:	9c 93       	st	X, r25
    3d1c:	8e 93       	st	-X, r24
    3d1e:	fe 01       	movw	r30, r28
    3d20:	eb 53       	subi	r30, 0x3B	; 59
    3d22:	ff 4f       	sbci	r31, 0xFF	; 255
    3d24:	80 81       	ld	r24, Z
    3d26:	91 81       	ldd	r25, Z+1	; 0x01
    3d28:	01 97       	sbiw	r24, 0x01	; 1
    3d2a:	f1 f7       	brne	.-4      	; 0x3d28 <main+0x1446>
    3d2c:	fe 01       	movw	r30, r28
    3d2e:	eb 53       	subi	r30, 0x3B	; 59
    3d30:	ff 4f       	sbci	r31, 0xFF	; 255
    3d32:	91 83       	std	Z+1, r25	; 0x01
    3d34:	80 83       	st	Z, r24
    3d36:	d6 ce       	rjmp	.-596    	; 0x3ae4 <main+0x1202>
					}
					}

				}

				else if(local_u8PressedKey == '5')
    3d38:	fe 01       	movw	r30, r28
    3d3a:	e6 5a       	subi	r30, 0xA6	; 166
    3d3c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d3e:	80 81       	ld	r24, Z
    3d40:	85 33       	cpi	r24, 0x35	; 53
    3d42:	09 f0       	breq	.+2      	; 0x3d46 <main+0x1464>
    3d44:	db c1       	rjmp	.+950    	; 0x40fc <main+0x181a>
				{
					local_u8PressedKey=0xff;
    3d46:	fe 01       	movw	r30, r28
    3d48:	e6 5a       	subi	r30, 0xA6	; 166
    3d4a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d4c:	8f ef       	ldi	r24, 0xFF	; 255
    3d4e:	80 83       	st	Z, r24
					HLCD_voidDisplayClear();
    3d50:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
					HLCD_voidSendString("LM35 Is Checking");
    3d54:	8e e6       	ldi	r24, 0x6E	; 110
    3d56:	91 e0       	ldi	r25, 0x01	; 1
    3d58:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
					HLCD_voidGoToPosition(2,1);
    3d5c:	82 e0       	ldi	r24, 0x02	; 2
    3d5e:	61 e0       	ldi	r22, 0x01	; 1
    3d60:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
					HLCD_voidSendString("Please wait...");
    3d64:	8f e7       	ldi	r24, 0x7F	; 127
    3d66:	91 e0       	ldi	r25, 0x01	; 1
    3d68:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>

					local_u16DigitalValue=MADC_u16GetDigitalValue(ADC0);
    3d6c:	80 e0       	ldi	r24, 0x00	; 0
    3d6e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <MADC_u16GetDigitalValue>
    3d72:	fe 01       	movw	r30, r28
    3d74:	e9 5a       	subi	r30, 0xA9	; 169
    3d76:	fe 4f       	sbci	r31, 0xFE	; 254
    3d78:	91 83       	std	Z+1, r25	; 0x01
    3d7a:	80 83       	st	Z, r24
					local_u16AnalogValue=(local_u16DigitalValue*500UL)/1024;
    3d7c:	fe 01       	movw	r30, r28
    3d7e:	e9 5a       	subi	r30, 0xA9	; 169
    3d80:	fe 4f       	sbci	r31, 0xFE	; 254
    3d82:	80 81       	ld	r24, Z
    3d84:	91 81       	ldd	r25, Z+1	; 0x01
    3d86:	cc 01       	movw	r24, r24
    3d88:	a0 e0       	ldi	r26, 0x00	; 0
    3d8a:	b0 e0       	ldi	r27, 0x00	; 0
    3d8c:	24 ef       	ldi	r18, 0xF4	; 244
    3d8e:	31 e0       	ldi	r19, 0x01	; 1
    3d90:	40 e0       	ldi	r20, 0x00	; 0
    3d92:	50 e0       	ldi	r21, 0x00	; 0
    3d94:	bc 01       	movw	r22, r24
    3d96:	cd 01       	movw	r24, r26
    3d98:	0e 94 49 2a 	call	0x5492	; 0x5492 <__mulsi3>
    3d9c:	dc 01       	movw	r26, r24
    3d9e:	cb 01       	movw	r24, r22
    3da0:	07 2e       	mov	r0, r23
    3da2:	7a e0       	ldi	r23, 0x0A	; 10
    3da4:	b6 95       	lsr	r27
    3da6:	a7 95       	ror	r26
    3da8:	97 95       	ror	r25
    3daa:	87 95       	ror	r24
    3dac:	7a 95       	dec	r23
    3dae:	d1 f7       	brne	.-12     	; 0x3da4 <main+0x14c2>
    3db0:	70 2d       	mov	r23, r0
    3db2:	fe 01       	movw	r30, r28
    3db4:	eb 5a       	subi	r30, 0xAB	; 171
    3db6:	fe 4f       	sbci	r31, 0xFE	; 254
    3db8:	91 83       	std	Z+1, r25	; 0x01
    3dba:	80 83       	st	Z, r24

					if(local_u16AnalogValue<=30)
    3dbc:	fe 01       	movw	r30, r28
    3dbe:	eb 5a       	subi	r30, 0xAB	; 171
    3dc0:	fe 4f       	sbci	r31, 0xFE	; 254
    3dc2:	80 81       	ld	r24, Z
    3dc4:	91 81       	ldd	r25, Z+1	; 0x01
    3dc6:	8f 31       	cpi	r24, 0x1F	; 31
    3dc8:	91 05       	cpc	r25, r1
    3dca:	08 f0       	brcs	.+2      	; 0x3dce <main+0x14ec>
    3dcc:	c7 c0       	rjmp	.+398    	; 0x3f5c <main+0x167a>
					{
						HLCD_voidDisplayClear();
    3dce:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
						HLCD_voidSendString("GOOD WEATHER");
    3dd2:	8e e8       	ldi	r24, 0x8E	; 142
    3dd4:	91 e0       	ldi	r25, 0x01	; 1
    3dd6:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
						HLCD_voidGoToPosition(2,1);
    3dda:	82 e0       	ldi	r24, 0x02	; 2
    3ddc:	61 e0       	ldi	r22, 0x01	; 1
    3dde:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
						HLCD_voidSendString("AC OFF");
    3de2:	8b e9       	ldi	r24, 0x9B	; 155
    3de4:	91 e0       	ldi	r25, 0x01	; 1
    3de6:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    3dea:	fe 01       	movw	r30, r28
    3dec:	ef 53       	subi	r30, 0x3F	; 63
    3dee:	ff 4f       	sbci	r31, 0xFF	; 255
    3df0:	80 e0       	ldi	r24, 0x00	; 0
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	aa e7       	ldi	r26, 0x7A	; 122
    3df6:	b4 e4       	ldi	r27, 0x44	; 68
    3df8:	80 83       	st	Z, r24
    3dfa:	91 83       	std	Z+1, r25	; 0x01
    3dfc:	a2 83       	std	Z+2, r26	; 0x02
    3dfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e00:	8e 01       	movw	r16, r28
    3e02:	03 54       	subi	r16, 0x43	; 67
    3e04:	1f 4f       	sbci	r17, 0xFF	; 255
    3e06:	fe 01       	movw	r30, r28
    3e08:	ef 53       	subi	r30, 0x3F	; 63
    3e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0c:	60 81       	ld	r22, Z
    3e0e:	71 81       	ldd	r23, Z+1	; 0x01
    3e10:	82 81       	ldd	r24, Z+2	; 0x02
    3e12:	93 81       	ldd	r25, Z+3	; 0x03
    3e14:	20 e0       	ldi	r18, 0x00	; 0
    3e16:	30 e0       	ldi	r19, 0x00	; 0
    3e18:	4a ef       	ldi	r20, 0xFA	; 250
    3e1a:	54 e4       	ldi	r21, 0x44	; 68
    3e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e20:	dc 01       	movw	r26, r24
    3e22:	cb 01       	movw	r24, r22
    3e24:	f8 01       	movw	r30, r16
    3e26:	80 83       	st	Z, r24
    3e28:	91 83       	std	Z+1, r25	; 0x01
    3e2a:	a2 83       	std	Z+2, r26	; 0x02
    3e2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e2e:	fe 01       	movw	r30, r28
    3e30:	e3 54       	subi	r30, 0x43	; 67
    3e32:	ff 4f       	sbci	r31, 0xFF	; 255
    3e34:	60 81       	ld	r22, Z
    3e36:	71 81       	ldd	r23, Z+1	; 0x01
    3e38:	82 81       	ldd	r24, Z+2	; 0x02
    3e3a:	93 81       	ldd	r25, Z+3	; 0x03
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	40 e8       	ldi	r20, 0x80	; 128
    3e42:	5f e3       	ldi	r21, 0x3F	; 63
    3e44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e48:	88 23       	and	r24, r24
    3e4a:	44 f4       	brge	.+16     	; 0x3e5c <main+0x157a>
		__ticks = 1;
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	e5 54       	subi	r30, 0x45	; 69
    3e50:	ff 4f       	sbci	r31, 0xFF	; 255
    3e52:	81 e0       	ldi	r24, 0x01	; 1
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	91 83       	std	Z+1, r25	; 0x01
    3e58:	80 83       	st	Z, r24
    3e5a:	64 c0       	rjmp	.+200    	; 0x3f24 <main+0x1642>
	else if (__tmp > 65535)
    3e5c:	fe 01       	movw	r30, r28
    3e5e:	e3 54       	subi	r30, 0x43	; 67
    3e60:	ff 4f       	sbci	r31, 0xFF	; 255
    3e62:	60 81       	ld	r22, Z
    3e64:	71 81       	ldd	r23, Z+1	; 0x01
    3e66:	82 81       	ldd	r24, Z+2	; 0x02
    3e68:	93 81       	ldd	r25, Z+3	; 0x03
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	3f ef       	ldi	r19, 0xFF	; 255
    3e6e:	4f e7       	ldi	r20, 0x7F	; 127
    3e70:	57 e4       	ldi	r21, 0x47	; 71
    3e72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e76:	18 16       	cp	r1, r24
    3e78:	0c f0       	brlt	.+2      	; 0x3e7c <main+0x159a>
    3e7a:	43 c0       	rjmp	.+134    	; 0x3f02 <main+0x1620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	ef 53       	subi	r30, 0x3F	; 63
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	60 81       	ld	r22, Z
    3e84:	71 81       	ldd	r23, Z+1	; 0x01
    3e86:	82 81       	ldd	r24, Z+2	; 0x02
    3e88:	93 81       	ldd	r25, Z+3	; 0x03
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	40 e2       	ldi	r20, 0x20	; 32
    3e90:	51 e4       	ldi	r21, 0x41	; 65
    3e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e96:	dc 01       	movw	r26, r24
    3e98:	cb 01       	movw	r24, r22
    3e9a:	8e 01       	movw	r16, r28
    3e9c:	05 54       	subi	r16, 0x45	; 69
    3e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea0:	bc 01       	movw	r22, r24
    3ea2:	cd 01       	movw	r24, r26
    3ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	cb 01       	movw	r24, r22
    3eac:	f8 01       	movw	r30, r16
    3eae:	91 83       	std	Z+1, r25	; 0x01
    3eb0:	80 83       	st	Z, r24
    3eb2:	1f c0       	rjmp	.+62     	; 0x3ef2 <main+0x1610>
    3eb4:	fe 01       	movw	r30, r28
    3eb6:	e7 54       	subi	r30, 0x47	; 71
    3eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eba:	88 ec       	ldi	r24, 0xC8	; 200
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	91 83       	std	Z+1, r25	; 0x01
    3ec0:	80 83       	st	Z, r24
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	e7 54       	subi	r30, 0x47	; 71
    3ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec8:	80 81       	ld	r24, Z
    3eca:	91 81       	ldd	r25, Z+1	; 0x01
    3ecc:	01 97       	sbiw	r24, 0x01	; 1
    3ece:	f1 f7       	brne	.-4      	; 0x3ecc <main+0x15ea>
    3ed0:	fe 01       	movw	r30, r28
    3ed2:	e7 54       	subi	r30, 0x47	; 71
    3ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed6:	91 83       	std	Z+1, r25	; 0x01
    3ed8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eda:	de 01       	movw	r26, r28
    3edc:	a5 54       	subi	r26, 0x45	; 69
    3ede:	bf 4f       	sbci	r27, 0xFF	; 255
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	e5 54       	subi	r30, 0x45	; 69
    3ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee6:	80 81       	ld	r24, Z
    3ee8:	91 81       	ldd	r25, Z+1	; 0x01
    3eea:	01 97       	sbiw	r24, 0x01	; 1
    3eec:	11 96       	adiw	r26, 0x01	; 1
    3eee:	9c 93       	st	X, r25
    3ef0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef2:	fe 01       	movw	r30, r28
    3ef4:	e5 54       	subi	r30, 0x45	; 69
    3ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef8:	80 81       	ld	r24, Z
    3efa:	91 81       	ldd	r25, Z+1	; 0x01
    3efc:	00 97       	sbiw	r24, 0x00	; 0
    3efe:	d1 f6       	brne	.-76     	; 0x3eb4 <main+0x15d2>
    3f00:	27 c0       	rjmp	.+78     	; 0x3f50 <main+0x166e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f02:	8e 01       	movw	r16, r28
    3f04:	05 54       	subi	r16, 0x45	; 69
    3f06:	1f 4f       	sbci	r17, 0xFF	; 255
    3f08:	fe 01       	movw	r30, r28
    3f0a:	e3 54       	subi	r30, 0x43	; 67
    3f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0e:	60 81       	ld	r22, Z
    3f10:	71 81       	ldd	r23, Z+1	; 0x01
    3f12:	82 81       	ldd	r24, Z+2	; 0x02
    3f14:	93 81       	ldd	r25, Z+3	; 0x03
    3f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f1a:	dc 01       	movw	r26, r24
    3f1c:	cb 01       	movw	r24, r22
    3f1e:	f8 01       	movw	r30, r16
    3f20:	91 83       	std	Z+1, r25	; 0x01
    3f22:	80 83       	st	Z, r24
    3f24:	de 01       	movw	r26, r28
    3f26:	a9 54       	subi	r26, 0x49	; 73
    3f28:	bf 4f       	sbci	r27, 0xFF	; 255
    3f2a:	fe 01       	movw	r30, r28
    3f2c:	e5 54       	subi	r30, 0x45	; 69
    3f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f30:	80 81       	ld	r24, Z
    3f32:	91 81       	ldd	r25, Z+1	; 0x01
    3f34:	8d 93       	st	X+, r24
    3f36:	9c 93       	st	X, r25
    3f38:	fe 01       	movw	r30, r28
    3f3a:	e9 54       	subi	r30, 0x49	; 73
    3f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3e:	80 81       	ld	r24, Z
    3f40:	91 81       	ldd	r25, Z+1	; 0x01
    3f42:	01 97       	sbiw	r24, 0x01	; 1
    3f44:	f1 f7       	brne	.-4      	; 0x3f42 <main+0x1660>
    3f46:	fe 01       	movw	r30, r28
    3f48:	e9 54       	subi	r30, 0x49	; 73
    3f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4c:	91 83       	std	Z+1, r25	; 0x01
    3f4e:	80 83       	st	Z, r24
						_delay_ms(1000);
						MDIO_voidSetPinValue(DIO_PORTA,PIN2,DIO_LOW);
    3f50:	80 e0       	ldi	r24, 0x00	; 0
    3f52:	62 e0       	ldi	r22, 0x02	; 2
    3f54:	40 e0       	ldi	r20, 0x00	; 0
    3f56:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    3f5a:	15 ca       	rjmp	.-3030   	; 0x3386 <main+0xaa4>
					}
					else if(local_u16AnalogValue>=31)
    3f5c:	fe 01       	movw	r30, r28
    3f5e:	eb 5a       	subi	r30, 0xAB	; 171
    3f60:	fe 4f       	sbci	r31, 0xFE	; 254
    3f62:	80 81       	ld	r24, Z
    3f64:	91 81       	ldd	r25, Z+1	; 0x01
    3f66:	8f 31       	cpi	r24, 0x1F	; 31
    3f68:	91 05       	cpc	r25, r1
    3f6a:	08 f4       	brcc	.+2      	; 0x3f6e <main+0x168c>
    3f6c:	0c ca       	rjmp	.-3048   	; 0x3386 <main+0xaa4>
					{
						HLCD_voidDisplayClear();
    3f6e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
						HLCD_voidSendString("HOT WEATHER");
    3f72:	82 ea       	ldi	r24, 0xA2	; 162
    3f74:	91 e0       	ldi	r25, 0x01	; 1
    3f76:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
						HLCD_voidGoToPosition(2,1);
    3f7a:	82 e0       	ldi	r24, 0x02	; 2
    3f7c:	61 e0       	ldi	r22, 0x01	; 1
    3f7e:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
						HLCD_voidSendString("AC ON");
    3f82:	8e ea       	ldi	r24, 0xAE	; 174
    3f84:	91 e0       	ldi	r25, 0x01	; 1
    3f86:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    3f8a:	fe 01       	movw	r30, r28
    3f8c:	ed 54       	subi	r30, 0x4D	; 77
    3f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f90:	80 e0       	ldi	r24, 0x00	; 0
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	aa e7       	ldi	r26, 0x7A	; 122
    3f96:	b4 e4       	ldi	r27, 0x44	; 68
    3f98:	80 83       	st	Z, r24
    3f9a:	91 83       	std	Z+1, r25	; 0x01
    3f9c:	a2 83       	std	Z+2, r26	; 0x02
    3f9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fa0:	8e 01       	movw	r16, r28
    3fa2:	01 55       	subi	r16, 0x51	; 81
    3fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa6:	fe 01       	movw	r30, r28
    3fa8:	ed 54       	subi	r30, 0x4D	; 77
    3faa:	ff 4f       	sbci	r31, 0xFF	; 255
    3fac:	60 81       	ld	r22, Z
    3fae:	71 81       	ldd	r23, Z+1	; 0x01
    3fb0:	82 81       	ldd	r24, Z+2	; 0x02
    3fb2:	93 81       	ldd	r25, Z+3	; 0x03
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	4a ef       	ldi	r20, 0xFA	; 250
    3fba:	54 e4       	ldi	r21, 0x44	; 68
    3fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc0:	dc 01       	movw	r26, r24
    3fc2:	cb 01       	movw	r24, r22
    3fc4:	f8 01       	movw	r30, r16
    3fc6:	80 83       	st	Z, r24
    3fc8:	91 83       	std	Z+1, r25	; 0x01
    3fca:	a2 83       	std	Z+2, r26	; 0x02
    3fcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fce:	fe 01       	movw	r30, r28
    3fd0:	e1 55       	subi	r30, 0x51	; 81
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	60 81       	ld	r22, Z
    3fd6:	71 81       	ldd	r23, Z+1	; 0x01
    3fd8:	82 81       	ldd	r24, Z+2	; 0x02
    3fda:	93 81       	ldd	r25, Z+3	; 0x03
    3fdc:	20 e0       	ldi	r18, 0x00	; 0
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	40 e8       	ldi	r20, 0x80	; 128
    3fe2:	5f e3       	ldi	r21, 0x3F	; 63
    3fe4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fe8:	88 23       	and	r24, r24
    3fea:	44 f4       	brge	.+16     	; 0x3ffc <main+0x171a>
		__ticks = 1;
    3fec:	fe 01       	movw	r30, r28
    3fee:	e3 55       	subi	r30, 0x53	; 83
    3ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff2:	81 e0       	ldi	r24, 0x01	; 1
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	91 83       	std	Z+1, r25	; 0x01
    3ff8:	80 83       	st	Z, r24
    3ffa:	64 c0       	rjmp	.+200    	; 0x40c4 <main+0x17e2>
	else if (__tmp > 65535)
    3ffc:	fe 01       	movw	r30, r28
    3ffe:	e1 55       	subi	r30, 0x51	; 81
    4000:	ff 4f       	sbci	r31, 0xFF	; 255
    4002:	60 81       	ld	r22, Z
    4004:	71 81       	ldd	r23, Z+1	; 0x01
    4006:	82 81       	ldd	r24, Z+2	; 0x02
    4008:	93 81       	ldd	r25, Z+3	; 0x03
    400a:	20 e0       	ldi	r18, 0x00	; 0
    400c:	3f ef       	ldi	r19, 0xFF	; 255
    400e:	4f e7       	ldi	r20, 0x7F	; 127
    4010:	57 e4       	ldi	r21, 0x47	; 71
    4012:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4016:	18 16       	cp	r1, r24
    4018:	0c f0       	brlt	.+2      	; 0x401c <main+0x173a>
    401a:	43 c0       	rjmp	.+134    	; 0x40a2 <main+0x17c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    401c:	fe 01       	movw	r30, r28
    401e:	ed 54       	subi	r30, 0x4D	; 77
    4020:	ff 4f       	sbci	r31, 0xFF	; 255
    4022:	60 81       	ld	r22, Z
    4024:	71 81       	ldd	r23, Z+1	; 0x01
    4026:	82 81       	ldd	r24, Z+2	; 0x02
    4028:	93 81       	ldd	r25, Z+3	; 0x03
    402a:	20 e0       	ldi	r18, 0x00	; 0
    402c:	30 e0       	ldi	r19, 0x00	; 0
    402e:	40 e2       	ldi	r20, 0x20	; 32
    4030:	51 e4       	ldi	r21, 0x41	; 65
    4032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4036:	dc 01       	movw	r26, r24
    4038:	cb 01       	movw	r24, r22
    403a:	8e 01       	movw	r16, r28
    403c:	03 55       	subi	r16, 0x53	; 83
    403e:	1f 4f       	sbci	r17, 0xFF	; 255
    4040:	bc 01       	movw	r22, r24
    4042:	cd 01       	movw	r24, r26
    4044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4048:	dc 01       	movw	r26, r24
    404a:	cb 01       	movw	r24, r22
    404c:	f8 01       	movw	r30, r16
    404e:	91 83       	std	Z+1, r25	; 0x01
    4050:	80 83       	st	Z, r24
    4052:	1f c0       	rjmp	.+62     	; 0x4092 <main+0x17b0>
    4054:	fe 01       	movw	r30, r28
    4056:	e5 55       	subi	r30, 0x55	; 85
    4058:	ff 4f       	sbci	r31, 0xFF	; 255
    405a:	88 ec       	ldi	r24, 0xC8	; 200
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	91 83       	std	Z+1, r25	; 0x01
    4060:	80 83       	st	Z, r24
    4062:	fe 01       	movw	r30, r28
    4064:	e5 55       	subi	r30, 0x55	; 85
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	80 81       	ld	r24, Z
    406a:	91 81       	ldd	r25, Z+1	; 0x01
    406c:	01 97       	sbiw	r24, 0x01	; 1
    406e:	f1 f7       	brne	.-4      	; 0x406c <main+0x178a>
    4070:	fe 01       	movw	r30, r28
    4072:	e5 55       	subi	r30, 0x55	; 85
    4074:	ff 4f       	sbci	r31, 0xFF	; 255
    4076:	91 83       	std	Z+1, r25	; 0x01
    4078:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    407a:	de 01       	movw	r26, r28
    407c:	a3 55       	subi	r26, 0x53	; 83
    407e:	bf 4f       	sbci	r27, 0xFF	; 255
    4080:	fe 01       	movw	r30, r28
    4082:	e3 55       	subi	r30, 0x53	; 83
    4084:	ff 4f       	sbci	r31, 0xFF	; 255
    4086:	80 81       	ld	r24, Z
    4088:	91 81       	ldd	r25, Z+1	; 0x01
    408a:	01 97       	sbiw	r24, 0x01	; 1
    408c:	11 96       	adiw	r26, 0x01	; 1
    408e:	9c 93       	st	X, r25
    4090:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4092:	fe 01       	movw	r30, r28
    4094:	e3 55       	subi	r30, 0x53	; 83
    4096:	ff 4f       	sbci	r31, 0xFF	; 255
    4098:	80 81       	ld	r24, Z
    409a:	91 81       	ldd	r25, Z+1	; 0x01
    409c:	00 97       	sbiw	r24, 0x00	; 0
    409e:	d1 f6       	brne	.-76     	; 0x4054 <main+0x1772>
    40a0:	27 c0       	rjmp	.+78     	; 0x40f0 <main+0x180e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a2:	8e 01       	movw	r16, r28
    40a4:	03 55       	subi	r16, 0x53	; 83
    40a6:	1f 4f       	sbci	r17, 0xFF	; 255
    40a8:	fe 01       	movw	r30, r28
    40aa:	e1 55       	subi	r30, 0x51	; 81
    40ac:	ff 4f       	sbci	r31, 0xFF	; 255
    40ae:	60 81       	ld	r22, Z
    40b0:	71 81       	ldd	r23, Z+1	; 0x01
    40b2:	82 81       	ldd	r24, Z+2	; 0x02
    40b4:	93 81       	ldd	r25, Z+3	; 0x03
    40b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ba:	dc 01       	movw	r26, r24
    40bc:	cb 01       	movw	r24, r22
    40be:	f8 01       	movw	r30, r16
    40c0:	91 83       	std	Z+1, r25	; 0x01
    40c2:	80 83       	st	Z, r24
    40c4:	de 01       	movw	r26, r28
    40c6:	a7 55       	subi	r26, 0x57	; 87
    40c8:	bf 4f       	sbci	r27, 0xFF	; 255
    40ca:	fe 01       	movw	r30, r28
    40cc:	e3 55       	subi	r30, 0x53	; 83
    40ce:	ff 4f       	sbci	r31, 0xFF	; 255
    40d0:	80 81       	ld	r24, Z
    40d2:	91 81       	ldd	r25, Z+1	; 0x01
    40d4:	8d 93       	st	X+, r24
    40d6:	9c 93       	st	X, r25
    40d8:	fe 01       	movw	r30, r28
    40da:	e7 55       	subi	r30, 0x57	; 87
    40dc:	ff 4f       	sbci	r31, 0xFF	; 255
    40de:	80 81       	ld	r24, Z
    40e0:	91 81       	ldd	r25, Z+1	; 0x01
    40e2:	01 97       	sbiw	r24, 0x01	; 1
    40e4:	f1 f7       	brne	.-4      	; 0x40e2 <main+0x1800>
    40e6:	fe 01       	movw	r30, r28
    40e8:	e7 55       	subi	r30, 0x57	; 87
    40ea:	ff 4f       	sbci	r31, 0xFF	; 255
    40ec:	91 83       	std	Z+1, r25	; 0x01
    40ee:	80 83       	st	Z, r24
						_delay_ms(1000);
						MDIO_voidSetPinValue(DIO_PORTA,PIN2,DIO_HIGH);
    40f0:	80 e0       	ldi	r24, 0x00	; 0
    40f2:	62 e0       	ldi	r22, 0x02	; 2
    40f4:	41 e0       	ldi	r20, 0x01	; 1
    40f6:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    40fa:	45 c9       	rjmp	.-3446   	; 0x3386 <main+0xaa4>
					}

				}
				else if(local_u8PressedKey=='C')
    40fc:	fe 01       	movw	r30, r28
    40fe:	e6 5a       	subi	r30, 0xA6	; 166
    4100:	fe 4f       	sbci	r31, 0xFE	; 254
    4102:	80 81       	ld	r24, Z
    4104:	83 34       	cpi	r24, 0x43	; 67
    4106:	39 f4       	brne	.+14     	; 0x4116 <main+0x1834>
				{
					local_u8PressedKey=0xff;
    4108:	fe 01       	movw	r30, r28
    410a:	e6 5a       	subi	r30, 0xA6	; 166
    410c:	fe 4f       	sbci	r31, 0xFE	; 254
    410e:	8f ef       	ldi	r24, 0xFF	; 255
    4110:	80 83       	st	Z, r24
    4112:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <main+0x3d4>
					break;
				}
				else
				{
					local_u8PressedKey=0xff;
    4116:	fe 01       	movw	r30, r28
    4118:	e6 5a       	subi	r30, 0xA6	; 166
    411a:	fe 4f       	sbci	r31, 0xFE	; 254
    411c:	8f ef       	ldi	r24, 0xFF	; 255
    411e:	80 83       	st	Z, r24
					HLCD_voidDisplayClear();
    4120:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
					HLCD_voidSendString(" Invalid Input ");
    4124:	8b e0       	ldi	r24, 0x0B	; 11
    4126:	91 e0       	ldi	r25, 0x01	; 1
    4128:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
					HLCD_voidGoToPosition(2,4);
    412c:	82 e0       	ldi	r24, 0x02	; 2
    412e:	64 e0       	ldi	r22, 0x04	; 4
    4130:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
					HLCD_voidSendString("Try Again");
    4134:	8b e1       	ldi	r24, 0x1B	; 27
    4136:	91 e0       	ldi	r25, 0x01	; 1
    4138:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    413c:	fe 01       	movw	r30, r28
    413e:	eb 55       	subi	r30, 0x5B	; 91
    4140:	ff 4f       	sbci	r31, 0xFF	; 255
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	aa e7       	ldi	r26, 0x7A	; 122
    4148:	b4 e4       	ldi	r27, 0x44	; 68
    414a:	80 83       	st	Z, r24
    414c:	91 83       	std	Z+1, r25	; 0x01
    414e:	a2 83       	std	Z+2, r26	; 0x02
    4150:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4152:	8e 01       	movw	r16, r28
    4154:	0f 55       	subi	r16, 0x5F	; 95
    4156:	1f 4f       	sbci	r17, 0xFF	; 255
    4158:	fe 01       	movw	r30, r28
    415a:	eb 55       	subi	r30, 0x5B	; 91
    415c:	ff 4f       	sbci	r31, 0xFF	; 255
    415e:	60 81       	ld	r22, Z
    4160:	71 81       	ldd	r23, Z+1	; 0x01
    4162:	82 81       	ldd	r24, Z+2	; 0x02
    4164:	93 81       	ldd	r25, Z+3	; 0x03
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	4a ef       	ldi	r20, 0xFA	; 250
    416c:	54 e4       	ldi	r21, 0x44	; 68
    416e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4172:	dc 01       	movw	r26, r24
    4174:	cb 01       	movw	r24, r22
    4176:	f8 01       	movw	r30, r16
    4178:	80 83       	st	Z, r24
    417a:	91 83       	std	Z+1, r25	; 0x01
    417c:	a2 83       	std	Z+2, r26	; 0x02
    417e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4180:	fe 01       	movw	r30, r28
    4182:	ef 55       	subi	r30, 0x5F	; 95
    4184:	ff 4f       	sbci	r31, 0xFF	; 255
    4186:	60 81       	ld	r22, Z
    4188:	71 81       	ldd	r23, Z+1	; 0x01
    418a:	82 81       	ldd	r24, Z+2	; 0x02
    418c:	93 81       	ldd	r25, Z+3	; 0x03
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	40 e8       	ldi	r20, 0x80	; 128
    4194:	5f e3       	ldi	r21, 0x3F	; 63
    4196:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    419a:	88 23       	and	r24, r24
    419c:	44 f4       	brge	.+16     	; 0x41ae <main+0x18cc>
		__ticks = 1;
    419e:	fe 01       	movw	r30, r28
    41a0:	e1 56       	subi	r30, 0x61	; 97
    41a2:	ff 4f       	sbci	r31, 0xFF	; 255
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	91 83       	std	Z+1, r25	; 0x01
    41aa:	80 83       	st	Z, r24
    41ac:	64 c0       	rjmp	.+200    	; 0x4276 <main+0x1994>
	else if (__tmp > 65535)
    41ae:	fe 01       	movw	r30, r28
    41b0:	ef 55       	subi	r30, 0x5F	; 95
    41b2:	ff 4f       	sbci	r31, 0xFF	; 255
    41b4:	60 81       	ld	r22, Z
    41b6:	71 81       	ldd	r23, Z+1	; 0x01
    41b8:	82 81       	ldd	r24, Z+2	; 0x02
    41ba:	93 81       	ldd	r25, Z+3	; 0x03
    41bc:	20 e0       	ldi	r18, 0x00	; 0
    41be:	3f ef       	ldi	r19, 0xFF	; 255
    41c0:	4f e7       	ldi	r20, 0x7F	; 127
    41c2:	57 e4       	ldi	r21, 0x47	; 71
    41c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41c8:	18 16       	cp	r1, r24
    41ca:	0c f0       	brlt	.+2      	; 0x41ce <main+0x18ec>
    41cc:	43 c0       	rjmp	.+134    	; 0x4254 <main+0x1972>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ce:	fe 01       	movw	r30, r28
    41d0:	eb 55       	subi	r30, 0x5B	; 91
    41d2:	ff 4f       	sbci	r31, 0xFF	; 255
    41d4:	60 81       	ld	r22, Z
    41d6:	71 81       	ldd	r23, Z+1	; 0x01
    41d8:	82 81       	ldd	r24, Z+2	; 0x02
    41da:	93 81       	ldd	r25, Z+3	; 0x03
    41dc:	20 e0       	ldi	r18, 0x00	; 0
    41de:	30 e0       	ldi	r19, 0x00	; 0
    41e0:	40 e2       	ldi	r20, 0x20	; 32
    41e2:	51 e4       	ldi	r21, 0x41	; 65
    41e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e8:	dc 01       	movw	r26, r24
    41ea:	cb 01       	movw	r24, r22
    41ec:	8e 01       	movw	r16, r28
    41ee:	01 56       	subi	r16, 0x61	; 97
    41f0:	1f 4f       	sbci	r17, 0xFF	; 255
    41f2:	bc 01       	movw	r22, r24
    41f4:	cd 01       	movw	r24, r26
    41f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41fa:	dc 01       	movw	r26, r24
    41fc:	cb 01       	movw	r24, r22
    41fe:	f8 01       	movw	r30, r16
    4200:	91 83       	std	Z+1, r25	; 0x01
    4202:	80 83       	st	Z, r24
    4204:	1f c0       	rjmp	.+62     	; 0x4244 <main+0x1962>
    4206:	fe 01       	movw	r30, r28
    4208:	e3 56       	subi	r30, 0x63	; 99
    420a:	ff 4f       	sbci	r31, 0xFF	; 255
    420c:	88 ec       	ldi	r24, 0xC8	; 200
    420e:	90 e0       	ldi	r25, 0x00	; 0
    4210:	91 83       	std	Z+1, r25	; 0x01
    4212:	80 83       	st	Z, r24
    4214:	fe 01       	movw	r30, r28
    4216:	e3 56       	subi	r30, 0x63	; 99
    4218:	ff 4f       	sbci	r31, 0xFF	; 255
    421a:	80 81       	ld	r24, Z
    421c:	91 81       	ldd	r25, Z+1	; 0x01
    421e:	01 97       	sbiw	r24, 0x01	; 1
    4220:	f1 f7       	brne	.-4      	; 0x421e <main+0x193c>
    4222:	fe 01       	movw	r30, r28
    4224:	e3 56       	subi	r30, 0x63	; 99
    4226:	ff 4f       	sbci	r31, 0xFF	; 255
    4228:	91 83       	std	Z+1, r25	; 0x01
    422a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    422c:	de 01       	movw	r26, r28
    422e:	a1 56       	subi	r26, 0x61	; 97
    4230:	bf 4f       	sbci	r27, 0xFF	; 255
    4232:	fe 01       	movw	r30, r28
    4234:	e1 56       	subi	r30, 0x61	; 97
    4236:	ff 4f       	sbci	r31, 0xFF	; 255
    4238:	80 81       	ld	r24, Z
    423a:	91 81       	ldd	r25, Z+1	; 0x01
    423c:	01 97       	sbiw	r24, 0x01	; 1
    423e:	11 96       	adiw	r26, 0x01	; 1
    4240:	9c 93       	st	X, r25
    4242:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4244:	fe 01       	movw	r30, r28
    4246:	e1 56       	subi	r30, 0x61	; 97
    4248:	ff 4f       	sbci	r31, 0xFF	; 255
    424a:	80 81       	ld	r24, Z
    424c:	91 81       	ldd	r25, Z+1	; 0x01
    424e:	00 97       	sbiw	r24, 0x00	; 0
    4250:	d1 f6       	brne	.-76     	; 0x4206 <main+0x1924>
    4252:	99 c8       	rjmp	.-3790   	; 0x3386 <main+0xaa4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4254:	8e 01       	movw	r16, r28
    4256:	01 56       	subi	r16, 0x61	; 97
    4258:	1f 4f       	sbci	r17, 0xFF	; 255
    425a:	fe 01       	movw	r30, r28
    425c:	ef 55       	subi	r30, 0x5F	; 95
    425e:	ff 4f       	sbci	r31, 0xFF	; 255
    4260:	60 81       	ld	r22, Z
    4262:	71 81       	ldd	r23, Z+1	; 0x01
    4264:	82 81       	ldd	r24, Z+2	; 0x02
    4266:	93 81       	ldd	r25, Z+3	; 0x03
    4268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    426c:	dc 01       	movw	r26, r24
    426e:	cb 01       	movw	r24, r22
    4270:	f8 01       	movw	r30, r16
    4272:	91 83       	std	Z+1, r25	; 0x01
    4274:	80 83       	st	Z, r24
    4276:	de 01       	movw	r26, r28
    4278:	a5 56       	subi	r26, 0x65	; 101
    427a:	bf 4f       	sbci	r27, 0xFF	; 255
    427c:	fe 01       	movw	r30, r28
    427e:	e1 56       	subi	r30, 0x61	; 97
    4280:	ff 4f       	sbci	r31, 0xFF	; 255
    4282:	80 81       	ld	r24, Z
    4284:	91 81       	ldd	r25, Z+1	; 0x01
    4286:	11 96       	adiw	r26, 0x01	; 1
    4288:	9c 93       	st	X, r25
    428a:	8e 93       	st	-X, r24
    428c:	fe 01       	movw	r30, r28
    428e:	e5 56       	subi	r30, 0x65	; 101
    4290:	ff 4f       	sbci	r31, 0xFF	; 255
    4292:	80 81       	ld	r24, Z
    4294:	91 81       	ldd	r25, Z+1	; 0x01
    4296:	01 97       	sbiw	r24, 0x01	; 1
    4298:	f1 f7       	brne	.-4      	; 0x4296 <main+0x19b4>
    429a:	fe 01       	movw	r30, r28
    429c:	e5 56       	subi	r30, 0x65	; 101
    429e:	ff 4f       	sbci	r31, 0xFF	; 255
    42a0:	91 83       	std	Z+1, r25	; 0x01
    42a2:	80 83       	st	Z, r24
    42a4:	70 c8       	rjmp	.-3872   	; 0x3386 <main+0xaa4>
					_delay_ms(1000);
				}
				}

			}
			else if(local_u8EnteredPass[0]== local_u8ClearPass[0]&&
    42a6:	fe 01       	movw	r30, r28
    42a8:	e0 5a       	subi	r30, 0xA0	; 160
    42aa:	fe 4f       	sbci	r31, 0xFE	; 254
    42ac:	90 81       	ld	r25, Z
    42ae:	fe 01       	movw	r30, r28
    42b0:	e4 5a       	subi	r30, 0xA4	; 164
    42b2:	fe 4f       	sbci	r31, 0xFE	; 254
    42b4:	80 81       	ld	r24, Z
    42b6:	98 17       	cp	r25, r24
    42b8:	01 f5       	brne	.+64     	; 0x42fa <main+0x1a18>
    42ba:	fe 01       	movw	r30, r28
    42bc:	e0 5a       	subi	r30, 0xA0	; 160
    42be:	fe 4f       	sbci	r31, 0xFE	; 254
    42c0:	91 81       	ldd	r25, Z+1	; 0x01
    42c2:	fe 01       	movw	r30, r28
    42c4:	e4 5a       	subi	r30, 0xA4	; 164
    42c6:	fe 4f       	sbci	r31, 0xFE	; 254
    42c8:	81 81       	ldd	r24, Z+1	; 0x01
    42ca:	98 17       	cp	r25, r24
    42cc:	b1 f4       	brne	.+44     	; 0x42fa <main+0x1a18>
    42ce:	fe 01       	movw	r30, r28
    42d0:	e0 5a       	subi	r30, 0xA0	; 160
    42d2:	fe 4f       	sbci	r31, 0xFE	; 254
    42d4:	92 81       	ldd	r25, Z+2	; 0x02
    42d6:	fe 01       	movw	r30, r28
    42d8:	e4 5a       	subi	r30, 0xA4	; 164
    42da:	fe 4f       	sbci	r31, 0xFE	; 254
    42dc:	82 81       	ldd	r24, Z+2	; 0x02
    42de:	98 17       	cp	r25, r24
    42e0:	61 f4       	brne	.+24     	; 0x42fa <main+0x1a18>
    42e2:	fe 01       	movw	r30, r28
    42e4:	e0 5a       	subi	r30, 0xA0	; 160
    42e6:	fe 4f       	sbci	r31, 0xFE	; 254
    42e8:	93 81       	ldd	r25, Z+3	; 0x03
    42ea:	fe 01       	movw	r30, r28
    42ec:	e4 5a       	subi	r30, 0xA4	; 164
    42ee:	fe 4f       	sbci	r31, 0xFE	; 254
    42f0:	83 81       	ldd	r24, Z+3	; 0x03
    42f2:	98 17       	cp	r25, r24
    42f4:	11 f4       	brne	.+4      	; 0x42fa <main+0x1a18>
    42f6:	0c 94 c6 14 	jmp	0x298c	; 0x298c <main+0xaa>
					local_u8EnteredPass[2]== local_u8ClearPass[2]&&
					local_u8EnteredPass[3]== local_u8ClearPass[3])
			{
				break;
			}
			else if(local_u8EnteredPass[0]==local_u8Pass[3] &&
    42fa:	fe 01       	movw	r30, r28
    42fc:	e0 5a       	subi	r30, 0xA0	; 160
    42fe:	fe 4f       	sbci	r31, 0xFE	; 254
    4300:	90 81       	ld	r25, Z
    4302:	80 91 c1 02 	lds	r24, 0x02C1
    4306:	98 17       	cp	r25, r24
    4308:	09 f0       	breq	.+2      	; 0x430c <main+0x1a2a>
    430a:	a5 c1       	rjmp	.+842    	; 0x4656 <main+0x1d74>
    430c:	fe 01       	movw	r30, r28
    430e:	e0 5a       	subi	r30, 0xA0	; 160
    4310:	fe 4f       	sbci	r31, 0xFE	; 254
    4312:	91 81       	ldd	r25, Z+1	; 0x01
    4314:	80 91 c0 02 	lds	r24, 0x02C0
    4318:	98 17       	cp	r25, r24
    431a:	09 f0       	breq	.+2      	; 0x431e <main+0x1a3c>
    431c:	9c c1       	rjmp	.+824    	; 0x4656 <main+0x1d74>
    431e:	fe 01       	movw	r30, r28
    4320:	e0 5a       	subi	r30, 0xA0	; 160
    4322:	fe 4f       	sbci	r31, 0xFE	; 254
    4324:	92 81       	ldd	r25, Z+2	; 0x02
    4326:	80 91 bf 02 	lds	r24, 0x02BF
    432a:	98 17       	cp	r25, r24
    432c:	09 f0       	breq	.+2      	; 0x4330 <main+0x1a4e>
    432e:	93 c1       	rjmp	.+806    	; 0x4656 <main+0x1d74>
    4330:	fe 01       	movw	r30, r28
    4332:	e0 5a       	subi	r30, 0xA0	; 160
    4334:	fe 4f       	sbci	r31, 0xFE	; 254
    4336:	93 81       	ldd	r25, Z+3	; 0x03
    4338:	80 91 be 02 	lds	r24, 0x02BE
    433c:	98 17       	cp	r25, r24
    433e:	09 f0       	breq	.+2      	; 0x4342 <main+0x1a60>
    4340:	8a c1       	rjmp	.+788    	; 0x4656 <main+0x1d74>
					local_u8EnteredPass[1]==local_u8Pass[2] &&
					local_u8EnteredPass[2]==local_u8Pass[1] &&
					local_u8EnteredPass[3]==local_u8Pass[0] )
			{
				HLCD_voidDisplayClear();
    4342:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
				HLCD_voidSendString("Calling 911");
    4346:	84 eb       	ldi	r24, 0xB4	; 180
    4348:	91 e0       	ldi	r25, 0x01	; 1
    434a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
				HLCD_voidGoToPosition(2,1);
    434e:	82 e0       	ldi	r24, 0x02	; 2
    4350:	61 e0       	ldi	r22, 0x01	; 1
    4352:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
				HLCD_voidSendString("They Will Kill u");
    4356:	80 ec       	ldi	r24, 0xC0	; 192
    4358:	91 e0       	ldi	r25, 0x01	; 1
    435a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>

				while(1)
				{
					MDIO_voidSetPinValue(DIO_PORTD,PIN3,DIO_HIGH);
    435e:	83 e0       	ldi	r24, 0x03	; 3
    4360:	63 e0       	ldi	r22, 0x03	; 3
    4362:	41 e0       	ldi	r20, 0x01	; 1
    4364:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
					MDIO_voidSetPinValue(DIO_PORTD,PIN6,DIO_HIGH);
    4368:	83 e0       	ldi	r24, 0x03	; 3
    436a:	66 e0       	ldi	r22, 0x06	; 6
    436c:	41 e0       	ldi	r20, 0x01	; 1
    436e:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    4372:	fe 01       	movw	r30, r28
    4374:	e9 56       	subi	r30, 0x69	; 105
    4376:	ff 4f       	sbci	r31, 0xFF	; 255
    4378:	80 e0       	ldi	r24, 0x00	; 0
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	aa ef       	ldi	r26, 0xFA	; 250
    437e:	b3 e4       	ldi	r27, 0x43	; 67
    4380:	80 83       	st	Z, r24
    4382:	91 83       	std	Z+1, r25	; 0x01
    4384:	a2 83       	std	Z+2, r26	; 0x02
    4386:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4388:	8e 01       	movw	r16, r28
    438a:	0d 56       	subi	r16, 0x6D	; 109
    438c:	1f 4f       	sbci	r17, 0xFF	; 255
    438e:	fe 01       	movw	r30, r28
    4390:	e9 56       	subi	r30, 0x69	; 105
    4392:	ff 4f       	sbci	r31, 0xFF	; 255
    4394:	60 81       	ld	r22, Z
    4396:	71 81       	ldd	r23, Z+1	; 0x01
    4398:	82 81       	ldd	r24, Z+2	; 0x02
    439a:	93 81       	ldd	r25, Z+3	; 0x03
    439c:	20 e0       	ldi	r18, 0x00	; 0
    439e:	30 e0       	ldi	r19, 0x00	; 0
    43a0:	4a ef       	ldi	r20, 0xFA	; 250
    43a2:	54 e4       	ldi	r21, 0x44	; 68
    43a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a8:	dc 01       	movw	r26, r24
    43aa:	cb 01       	movw	r24, r22
    43ac:	f8 01       	movw	r30, r16
    43ae:	80 83       	st	Z, r24
    43b0:	91 83       	std	Z+1, r25	; 0x01
    43b2:	a2 83       	std	Z+2, r26	; 0x02
    43b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43b6:	fe 01       	movw	r30, r28
    43b8:	ed 56       	subi	r30, 0x6D	; 109
    43ba:	ff 4f       	sbci	r31, 0xFF	; 255
    43bc:	60 81       	ld	r22, Z
    43be:	71 81       	ldd	r23, Z+1	; 0x01
    43c0:	82 81       	ldd	r24, Z+2	; 0x02
    43c2:	93 81       	ldd	r25, Z+3	; 0x03
    43c4:	20 e0       	ldi	r18, 0x00	; 0
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	40 e8       	ldi	r20, 0x80	; 128
    43ca:	5f e3       	ldi	r21, 0x3F	; 63
    43cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43d0:	88 23       	and	r24, r24
    43d2:	44 f4       	brge	.+16     	; 0x43e4 <main+0x1b02>
		__ticks = 1;
    43d4:	fe 01       	movw	r30, r28
    43d6:	ef 56       	subi	r30, 0x6F	; 111
    43d8:	ff 4f       	sbci	r31, 0xFF	; 255
    43da:	81 e0       	ldi	r24, 0x01	; 1
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	91 83       	std	Z+1, r25	; 0x01
    43e0:	80 83       	st	Z, r24
    43e2:	64 c0       	rjmp	.+200    	; 0x44ac <main+0x1bca>
	else if (__tmp > 65535)
    43e4:	fe 01       	movw	r30, r28
    43e6:	ed 56       	subi	r30, 0x6D	; 109
    43e8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ea:	60 81       	ld	r22, Z
    43ec:	71 81       	ldd	r23, Z+1	; 0x01
    43ee:	82 81       	ldd	r24, Z+2	; 0x02
    43f0:	93 81       	ldd	r25, Z+3	; 0x03
    43f2:	20 e0       	ldi	r18, 0x00	; 0
    43f4:	3f ef       	ldi	r19, 0xFF	; 255
    43f6:	4f e7       	ldi	r20, 0x7F	; 127
    43f8:	57 e4       	ldi	r21, 0x47	; 71
    43fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43fe:	18 16       	cp	r1, r24
    4400:	0c f0       	brlt	.+2      	; 0x4404 <main+0x1b22>
    4402:	43 c0       	rjmp	.+134    	; 0x448a <main+0x1ba8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4404:	fe 01       	movw	r30, r28
    4406:	e9 56       	subi	r30, 0x69	; 105
    4408:	ff 4f       	sbci	r31, 0xFF	; 255
    440a:	60 81       	ld	r22, Z
    440c:	71 81       	ldd	r23, Z+1	; 0x01
    440e:	82 81       	ldd	r24, Z+2	; 0x02
    4410:	93 81       	ldd	r25, Z+3	; 0x03
    4412:	20 e0       	ldi	r18, 0x00	; 0
    4414:	30 e0       	ldi	r19, 0x00	; 0
    4416:	40 e2       	ldi	r20, 0x20	; 32
    4418:	51 e4       	ldi	r21, 0x41	; 65
    441a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    441e:	dc 01       	movw	r26, r24
    4420:	cb 01       	movw	r24, r22
    4422:	8e 01       	movw	r16, r28
    4424:	0f 56       	subi	r16, 0x6F	; 111
    4426:	1f 4f       	sbci	r17, 0xFF	; 255
    4428:	bc 01       	movw	r22, r24
    442a:	cd 01       	movw	r24, r26
    442c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4430:	dc 01       	movw	r26, r24
    4432:	cb 01       	movw	r24, r22
    4434:	f8 01       	movw	r30, r16
    4436:	91 83       	std	Z+1, r25	; 0x01
    4438:	80 83       	st	Z, r24
    443a:	1f c0       	rjmp	.+62     	; 0x447a <main+0x1b98>
    443c:	fe 01       	movw	r30, r28
    443e:	e1 57       	subi	r30, 0x71	; 113
    4440:	ff 4f       	sbci	r31, 0xFF	; 255
    4442:	88 ec       	ldi	r24, 0xC8	; 200
    4444:	90 e0       	ldi	r25, 0x00	; 0
    4446:	91 83       	std	Z+1, r25	; 0x01
    4448:	80 83       	st	Z, r24
    444a:	fe 01       	movw	r30, r28
    444c:	e1 57       	subi	r30, 0x71	; 113
    444e:	ff 4f       	sbci	r31, 0xFF	; 255
    4450:	80 81       	ld	r24, Z
    4452:	91 81       	ldd	r25, Z+1	; 0x01
    4454:	01 97       	sbiw	r24, 0x01	; 1
    4456:	f1 f7       	brne	.-4      	; 0x4454 <main+0x1b72>
    4458:	fe 01       	movw	r30, r28
    445a:	e1 57       	subi	r30, 0x71	; 113
    445c:	ff 4f       	sbci	r31, 0xFF	; 255
    445e:	91 83       	std	Z+1, r25	; 0x01
    4460:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4462:	de 01       	movw	r26, r28
    4464:	af 56       	subi	r26, 0x6F	; 111
    4466:	bf 4f       	sbci	r27, 0xFF	; 255
    4468:	fe 01       	movw	r30, r28
    446a:	ef 56       	subi	r30, 0x6F	; 111
    446c:	ff 4f       	sbci	r31, 0xFF	; 255
    446e:	80 81       	ld	r24, Z
    4470:	91 81       	ldd	r25, Z+1	; 0x01
    4472:	01 97       	sbiw	r24, 0x01	; 1
    4474:	11 96       	adiw	r26, 0x01	; 1
    4476:	9c 93       	st	X, r25
    4478:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    447a:	fe 01       	movw	r30, r28
    447c:	ef 56       	subi	r30, 0x6F	; 111
    447e:	ff 4f       	sbci	r31, 0xFF	; 255
    4480:	80 81       	ld	r24, Z
    4482:	91 81       	ldd	r25, Z+1	; 0x01
    4484:	00 97       	sbiw	r24, 0x00	; 0
    4486:	d1 f6       	brne	.-76     	; 0x443c <main+0x1b5a>
    4488:	27 c0       	rjmp	.+78     	; 0x44d8 <main+0x1bf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    448a:	8e 01       	movw	r16, r28
    448c:	0f 56       	subi	r16, 0x6F	; 111
    448e:	1f 4f       	sbci	r17, 0xFF	; 255
    4490:	fe 01       	movw	r30, r28
    4492:	ed 56       	subi	r30, 0x6D	; 109
    4494:	ff 4f       	sbci	r31, 0xFF	; 255
    4496:	60 81       	ld	r22, Z
    4498:	71 81       	ldd	r23, Z+1	; 0x01
    449a:	82 81       	ldd	r24, Z+2	; 0x02
    449c:	93 81       	ldd	r25, Z+3	; 0x03
    449e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a2:	dc 01       	movw	r26, r24
    44a4:	cb 01       	movw	r24, r22
    44a6:	f8 01       	movw	r30, r16
    44a8:	91 83       	std	Z+1, r25	; 0x01
    44aa:	80 83       	st	Z, r24
    44ac:	de 01       	movw	r26, r28
    44ae:	a3 57       	subi	r26, 0x73	; 115
    44b0:	bf 4f       	sbci	r27, 0xFF	; 255
    44b2:	fe 01       	movw	r30, r28
    44b4:	ef 56       	subi	r30, 0x6F	; 111
    44b6:	ff 4f       	sbci	r31, 0xFF	; 255
    44b8:	80 81       	ld	r24, Z
    44ba:	91 81       	ldd	r25, Z+1	; 0x01
    44bc:	8d 93       	st	X+, r24
    44be:	9c 93       	st	X, r25
    44c0:	fe 01       	movw	r30, r28
    44c2:	e3 57       	subi	r30, 0x73	; 115
    44c4:	ff 4f       	sbci	r31, 0xFF	; 255
    44c6:	80 81       	ld	r24, Z
    44c8:	91 81       	ldd	r25, Z+1	; 0x01
    44ca:	01 97       	sbiw	r24, 0x01	; 1
    44cc:	f1 f7       	brne	.-4      	; 0x44ca <main+0x1be8>
    44ce:	fe 01       	movw	r30, r28
    44d0:	e3 57       	subi	r30, 0x73	; 115
    44d2:	ff 4f       	sbci	r31, 0xFF	; 255
    44d4:	91 83       	std	Z+1, r25	; 0x01
    44d6:	80 83       	st	Z, r24
					_delay_ms(500);
					MDIO_voidSetPinValue(DIO_PORTD,PIN3,DIO_LOW);
    44d8:	83 e0       	ldi	r24, 0x03	; 3
    44da:	63 e0       	ldi	r22, 0x03	; 3
    44dc:	40 e0       	ldi	r20, 0x00	; 0
    44de:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
					MDIO_voidSetPinValue(DIO_PORTD,PIN6,DIO_LOW);
    44e2:	83 e0       	ldi	r24, 0x03	; 3
    44e4:	66 e0       	ldi	r22, 0x06	; 6
    44e6:	40 e0       	ldi	r20, 0x00	; 0
    44e8:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    44ec:	fe 01       	movw	r30, r28
    44ee:	e7 57       	subi	r30, 0x77	; 119
    44f0:	ff 4f       	sbci	r31, 0xFF	; 255
    44f2:	80 e0       	ldi	r24, 0x00	; 0
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	aa ef       	ldi	r26, 0xFA	; 250
    44f8:	b3 e4       	ldi	r27, 0x43	; 67
    44fa:	80 83       	st	Z, r24
    44fc:	91 83       	std	Z+1, r25	; 0x01
    44fe:	a2 83       	std	Z+2, r26	; 0x02
    4500:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4502:	8e 01       	movw	r16, r28
    4504:	0b 57       	subi	r16, 0x7B	; 123
    4506:	1f 4f       	sbci	r17, 0xFF	; 255
    4508:	fe 01       	movw	r30, r28
    450a:	e7 57       	subi	r30, 0x77	; 119
    450c:	ff 4f       	sbci	r31, 0xFF	; 255
    450e:	60 81       	ld	r22, Z
    4510:	71 81       	ldd	r23, Z+1	; 0x01
    4512:	82 81       	ldd	r24, Z+2	; 0x02
    4514:	93 81       	ldd	r25, Z+3	; 0x03
    4516:	20 e0       	ldi	r18, 0x00	; 0
    4518:	30 e0       	ldi	r19, 0x00	; 0
    451a:	4a ef       	ldi	r20, 0xFA	; 250
    451c:	54 e4       	ldi	r21, 0x44	; 68
    451e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4522:	dc 01       	movw	r26, r24
    4524:	cb 01       	movw	r24, r22
    4526:	f8 01       	movw	r30, r16
    4528:	80 83       	st	Z, r24
    452a:	91 83       	std	Z+1, r25	; 0x01
    452c:	a2 83       	std	Z+2, r26	; 0x02
    452e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4530:	fe 01       	movw	r30, r28
    4532:	eb 57       	subi	r30, 0x7B	; 123
    4534:	ff 4f       	sbci	r31, 0xFF	; 255
    4536:	60 81       	ld	r22, Z
    4538:	71 81       	ldd	r23, Z+1	; 0x01
    453a:	82 81       	ldd	r24, Z+2	; 0x02
    453c:	93 81       	ldd	r25, Z+3	; 0x03
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	40 e8       	ldi	r20, 0x80	; 128
    4544:	5f e3       	ldi	r21, 0x3F	; 63
    4546:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    454a:	88 23       	and	r24, r24
    454c:	44 f4       	brge	.+16     	; 0x455e <main+0x1c7c>
		__ticks = 1;
    454e:	fe 01       	movw	r30, r28
    4550:	ed 57       	subi	r30, 0x7D	; 125
    4552:	ff 4f       	sbci	r31, 0xFF	; 255
    4554:	81 e0       	ldi	r24, 0x01	; 1
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	91 83       	std	Z+1, r25	; 0x01
    455a:	80 83       	st	Z, r24
    455c:	64 c0       	rjmp	.+200    	; 0x4626 <main+0x1d44>
	else if (__tmp > 65535)
    455e:	fe 01       	movw	r30, r28
    4560:	eb 57       	subi	r30, 0x7B	; 123
    4562:	ff 4f       	sbci	r31, 0xFF	; 255
    4564:	60 81       	ld	r22, Z
    4566:	71 81       	ldd	r23, Z+1	; 0x01
    4568:	82 81       	ldd	r24, Z+2	; 0x02
    456a:	93 81       	ldd	r25, Z+3	; 0x03
    456c:	20 e0       	ldi	r18, 0x00	; 0
    456e:	3f ef       	ldi	r19, 0xFF	; 255
    4570:	4f e7       	ldi	r20, 0x7F	; 127
    4572:	57 e4       	ldi	r21, 0x47	; 71
    4574:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4578:	18 16       	cp	r1, r24
    457a:	0c f0       	brlt	.+2      	; 0x457e <main+0x1c9c>
    457c:	43 c0       	rjmp	.+134    	; 0x4604 <main+0x1d22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    457e:	fe 01       	movw	r30, r28
    4580:	e7 57       	subi	r30, 0x77	; 119
    4582:	ff 4f       	sbci	r31, 0xFF	; 255
    4584:	60 81       	ld	r22, Z
    4586:	71 81       	ldd	r23, Z+1	; 0x01
    4588:	82 81       	ldd	r24, Z+2	; 0x02
    458a:	93 81       	ldd	r25, Z+3	; 0x03
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	30 e0       	ldi	r19, 0x00	; 0
    4590:	40 e2       	ldi	r20, 0x20	; 32
    4592:	51 e4       	ldi	r21, 0x41	; 65
    4594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4598:	dc 01       	movw	r26, r24
    459a:	cb 01       	movw	r24, r22
    459c:	8e 01       	movw	r16, r28
    459e:	0d 57       	subi	r16, 0x7D	; 125
    45a0:	1f 4f       	sbci	r17, 0xFF	; 255
    45a2:	bc 01       	movw	r22, r24
    45a4:	cd 01       	movw	r24, r26
    45a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45aa:	dc 01       	movw	r26, r24
    45ac:	cb 01       	movw	r24, r22
    45ae:	f8 01       	movw	r30, r16
    45b0:	91 83       	std	Z+1, r25	; 0x01
    45b2:	80 83       	st	Z, r24
    45b4:	1f c0       	rjmp	.+62     	; 0x45f4 <main+0x1d12>
    45b6:	fe 01       	movw	r30, r28
    45b8:	ef 57       	subi	r30, 0x7F	; 127
    45ba:	ff 4f       	sbci	r31, 0xFF	; 255
    45bc:	88 ec       	ldi	r24, 0xC8	; 200
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	91 83       	std	Z+1, r25	; 0x01
    45c2:	80 83       	st	Z, r24
    45c4:	fe 01       	movw	r30, r28
    45c6:	ef 57       	subi	r30, 0x7F	; 127
    45c8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ca:	80 81       	ld	r24, Z
    45cc:	91 81       	ldd	r25, Z+1	; 0x01
    45ce:	01 97       	sbiw	r24, 0x01	; 1
    45d0:	f1 f7       	brne	.-4      	; 0x45ce <main+0x1cec>
    45d2:	fe 01       	movw	r30, r28
    45d4:	ef 57       	subi	r30, 0x7F	; 127
    45d6:	ff 4f       	sbci	r31, 0xFF	; 255
    45d8:	91 83       	std	Z+1, r25	; 0x01
    45da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45dc:	de 01       	movw	r26, r28
    45de:	ad 57       	subi	r26, 0x7D	; 125
    45e0:	bf 4f       	sbci	r27, 0xFF	; 255
    45e2:	fe 01       	movw	r30, r28
    45e4:	ed 57       	subi	r30, 0x7D	; 125
    45e6:	ff 4f       	sbci	r31, 0xFF	; 255
    45e8:	80 81       	ld	r24, Z
    45ea:	91 81       	ldd	r25, Z+1	; 0x01
    45ec:	01 97       	sbiw	r24, 0x01	; 1
    45ee:	11 96       	adiw	r26, 0x01	; 1
    45f0:	9c 93       	st	X, r25
    45f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45f4:	fe 01       	movw	r30, r28
    45f6:	ed 57       	subi	r30, 0x7D	; 125
    45f8:	ff 4f       	sbci	r31, 0xFF	; 255
    45fa:	80 81       	ld	r24, Z
    45fc:	91 81       	ldd	r25, Z+1	; 0x01
    45fe:	00 97       	sbiw	r24, 0x00	; 0
    4600:	d1 f6       	brne	.-76     	; 0x45b6 <main+0x1cd4>
    4602:	ad ce       	rjmp	.-678    	; 0x435e <main+0x1a7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4604:	8e 01       	movw	r16, r28
    4606:	0d 57       	subi	r16, 0x7D	; 125
    4608:	1f 4f       	sbci	r17, 0xFF	; 255
    460a:	fe 01       	movw	r30, r28
    460c:	eb 57       	subi	r30, 0x7B	; 123
    460e:	ff 4f       	sbci	r31, 0xFF	; 255
    4610:	60 81       	ld	r22, Z
    4612:	71 81       	ldd	r23, Z+1	; 0x01
    4614:	82 81       	ldd	r24, Z+2	; 0x02
    4616:	93 81       	ldd	r25, Z+3	; 0x03
    4618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    461c:	dc 01       	movw	r26, r24
    461e:	cb 01       	movw	r24, r22
    4620:	f8 01       	movw	r30, r16
    4622:	91 83       	std	Z+1, r25	; 0x01
    4624:	80 83       	st	Z, r24
    4626:	de 01       	movw	r26, r28
    4628:	a1 58       	subi	r26, 0x81	; 129
    462a:	bf 4f       	sbci	r27, 0xFF	; 255
    462c:	fe 01       	movw	r30, r28
    462e:	ed 57       	subi	r30, 0x7D	; 125
    4630:	ff 4f       	sbci	r31, 0xFF	; 255
    4632:	80 81       	ld	r24, Z
    4634:	91 81       	ldd	r25, Z+1	; 0x01
    4636:	11 96       	adiw	r26, 0x01	; 1
    4638:	9c 93       	st	X, r25
    463a:	8e 93       	st	-X, r24
    463c:	fe 01       	movw	r30, r28
    463e:	e1 58       	subi	r30, 0x81	; 129
    4640:	ff 4f       	sbci	r31, 0xFF	; 255
    4642:	80 81       	ld	r24, Z
    4644:	91 81       	ldd	r25, Z+1	; 0x01
    4646:	01 97       	sbiw	r24, 0x01	; 1
    4648:	f1 f7       	brne	.-4      	; 0x4646 <main+0x1d64>
    464a:	fe 01       	movw	r30, r28
    464c:	e1 58       	subi	r30, 0x81	; 129
    464e:	ff 4f       	sbci	r31, 0xFF	; 255
    4650:	91 83       	std	Z+1, r25	; 0x01
    4652:	80 83       	st	Z, r24
    4654:	84 ce       	rjmp	.-760    	; 0x435e <main+0x1a7c>
					_delay_ms(500);
				}
			}
			else if(local_u8TryAgain<3)
    4656:	fe 01       	movw	r30, r28
    4658:	e7 5a       	subi	r30, 0xA7	; 167
    465a:	fe 4f       	sbci	r31, 0xFE	; 254
    465c:	80 81       	ld	r24, Z
    465e:	83 30       	cpi	r24, 0x03	; 3
    4660:	08 f0       	brcs	.+2      	; 0x4664 <main+0x1d82>
    4662:	ce c0       	rjmp	.+412    	; 0x4800 <main+0x1f1e>
			{
				local_u8TryAgain++;
    4664:	de 01       	movw	r26, r28
    4666:	a7 5a       	subi	r26, 0xA7	; 167
    4668:	be 4f       	sbci	r27, 0xFE	; 254
    466a:	fe 01       	movw	r30, r28
    466c:	e7 5a       	subi	r30, 0xA7	; 167
    466e:	fe 4f       	sbci	r31, 0xFE	; 254
    4670:	80 81       	ld	r24, Z
    4672:	8f 5f       	subi	r24, 0xFF	; 255
    4674:	8c 93       	st	X, r24
				HLCD_voidDisplayClear();
    4676:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
				HLCD_voidSendString("Wrong Password");
    467a:	81 ed       	ldi	r24, 0xD1	; 209
    467c:	91 e0       	ldi	r25, 0x01	; 1
    467e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
				HLCD_voidGoToPosition(2,1);
    4682:	82 e0       	ldi	r24, 0x02	; 2
    4684:	61 e0       	ldi	r22, 0x01	; 1
    4686:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
				HLCD_voidSendString("  Try Again  ");
    468a:	80 ee       	ldi	r24, 0xE0	; 224
    468c:	91 e0       	ldi	r25, 0x01	; 1
    468e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    4692:	fe 01       	movw	r30, r28
    4694:	e5 58       	subi	r30, 0x85	; 133
    4696:	ff 4f       	sbci	r31, 0xFF	; 255
    4698:	80 e0       	ldi	r24, 0x00	; 0
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	aa ef       	ldi	r26, 0xFA	; 250
    469e:	b4 e4       	ldi	r27, 0x44	; 68
    46a0:	80 83       	st	Z, r24
    46a2:	91 83       	std	Z+1, r25	; 0x01
    46a4:	a2 83       	std	Z+2, r26	; 0x02
    46a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46a8:	8e 01       	movw	r16, r28
    46aa:	09 58       	subi	r16, 0x89	; 137
    46ac:	1f 4f       	sbci	r17, 0xFF	; 255
    46ae:	fe 01       	movw	r30, r28
    46b0:	e5 58       	subi	r30, 0x85	; 133
    46b2:	ff 4f       	sbci	r31, 0xFF	; 255
    46b4:	60 81       	ld	r22, Z
    46b6:	71 81       	ldd	r23, Z+1	; 0x01
    46b8:	82 81       	ldd	r24, Z+2	; 0x02
    46ba:	93 81       	ldd	r25, Z+3	; 0x03
    46bc:	20 e0       	ldi	r18, 0x00	; 0
    46be:	30 e0       	ldi	r19, 0x00	; 0
    46c0:	4a ef       	ldi	r20, 0xFA	; 250
    46c2:	54 e4       	ldi	r21, 0x44	; 68
    46c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c8:	dc 01       	movw	r26, r24
    46ca:	cb 01       	movw	r24, r22
    46cc:	f8 01       	movw	r30, r16
    46ce:	80 83       	st	Z, r24
    46d0:	91 83       	std	Z+1, r25	; 0x01
    46d2:	a2 83       	std	Z+2, r26	; 0x02
    46d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46d6:	fe 01       	movw	r30, r28
    46d8:	e9 58       	subi	r30, 0x89	; 137
    46da:	ff 4f       	sbci	r31, 0xFF	; 255
    46dc:	60 81       	ld	r22, Z
    46de:	71 81       	ldd	r23, Z+1	; 0x01
    46e0:	82 81       	ldd	r24, Z+2	; 0x02
    46e2:	93 81       	ldd	r25, Z+3	; 0x03
    46e4:	20 e0       	ldi	r18, 0x00	; 0
    46e6:	30 e0       	ldi	r19, 0x00	; 0
    46e8:	40 e8       	ldi	r20, 0x80	; 128
    46ea:	5f e3       	ldi	r21, 0x3F	; 63
    46ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46f0:	88 23       	and	r24, r24
    46f2:	44 f4       	brge	.+16     	; 0x4704 <main+0x1e22>
		__ticks = 1;
    46f4:	fe 01       	movw	r30, r28
    46f6:	eb 58       	subi	r30, 0x8B	; 139
    46f8:	ff 4f       	sbci	r31, 0xFF	; 255
    46fa:	81 e0       	ldi	r24, 0x01	; 1
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	91 83       	std	Z+1, r25	; 0x01
    4700:	80 83       	st	Z, r24
    4702:	65 c0       	rjmp	.+202    	; 0x47ce <main+0x1eec>
	else if (__tmp > 65535)
    4704:	fe 01       	movw	r30, r28
    4706:	e9 58       	subi	r30, 0x89	; 137
    4708:	ff 4f       	sbci	r31, 0xFF	; 255
    470a:	60 81       	ld	r22, Z
    470c:	71 81       	ldd	r23, Z+1	; 0x01
    470e:	82 81       	ldd	r24, Z+2	; 0x02
    4710:	93 81       	ldd	r25, Z+3	; 0x03
    4712:	20 e0       	ldi	r18, 0x00	; 0
    4714:	3f ef       	ldi	r19, 0xFF	; 255
    4716:	4f e7       	ldi	r20, 0x7F	; 127
    4718:	57 e4       	ldi	r21, 0x47	; 71
    471a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    471e:	18 16       	cp	r1, r24
    4720:	0c f0       	brlt	.+2      	; 0x4724 <main+0x1e42>
    4722:	44 c0       	rjmp	.+136    	; 0x47ac <main+0x1eca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4724:	fe 01       	movw	r30, r28
    4726:	e5 58       	subi	r30, 0x85	; 133
    4728:	ff 4f       	sbci	r31, 0xFF	; 255
    472a:	60 81       	ld	r22, Z
    472c:	71 81       	ldd	r23, Z+1	; 0x01
    472e:	82 81       	ldd	r24, Z+2	; 0x02
    4730:	93 81       	ldd	r25, Z+3	; 0x03
    4732:	20 e0       	ldi	r18, 0x00	; 0
    4734:	30 e0       	ldi	r19, 0x00	; 0
    4736:	40 e2       	ldi	r20, 0x20	; 32
    4738:	51 e4       	ldi	r21, 0x41	; 65
    473a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    473e:	dc 01       	movw	r26, r24
    4740:	cb 01       	movw	r24, r22
    4742:	8e 01       	movw	r16, r28
    4744:	0b 58       	subi	r16, 0x8B	; 139
    4746:	1f 4f       	sbci	r17, 0xFF	; 255
    4748:	bc 01       	movw	r22, r24
    474a:	cd 01       	movw	r24, r26
    474c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4750:	dc 01       	movw	r26, r24
    4752:	cb 01       	movw	r24, r22
    4754:	f8 01       	movw	r30, r16
    4756:	91 83       	std	Z+1, r25	; 0x01
    4758:	80 83       	st	Z, r24
    475a:	1f c0       	rjmp	.+62     	; 0x479a <main+0x1eb8>
    475c:	fe 01       	movw	r30, r28
    475e:	ed 58       	subi	r30, 0x8D	; 141
    4760:	ff 4f       	sbci	r31, 0xFF	; 255
    4762:	88 ec       	ldi	r24, 0xC8	; 200
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	91 83       	std	Z+1, r25	; 0x01
    4768:	80 83       	st	Z, r24
    476a:	fe 01       	movw	r30, r28
    476c:	ed 58       	subi	r30, 0x8D	; 141
    476e:	ff 4f       	sbci	r31, 0xFF	; 255
    4770:	80 81       	ld	r24, Z
    4772:	91 81       	ldd	r25, Z+1	; 0x01
    4774:	01 97       	sbiw	r24, 0x01	; 1
    4776:	f1 f7       	brne	.-4      	; 0x4774 <main+0x1e92>
    4778:	fe 01       	movw	r30, r28
    477a:	ed 58       	subi	r30, 0x8D	; 141
    477c:	ff 4f       	sbci	r31, 0xFF	; 255
    477e:	91 83       	std	Z+1, r25	; 0x01
    4780:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4782:	de 01       	movw	r26, r28
    4784:	ab 58       	subi	r26, 0x8B	; 139
    4786:	bf 4f       	sbci	r27, 0xFF	; 255
    4788:	fe 01       	movw	r30, r28
    478a:	eb 58       	subi	r30, 0x8B	; 139
    478c:	ff 4f       	sbci	r31, 0xFF	; 255
    478e:	80 81       	ld	r24, Z
    4790:	91 81       	ldd	r25, Z+1	; 0x01
    4792:	01 97       	sbiw	r24, 0x01	; 1
    4794:	11 96       	adiw	r26, 0x01	; 1
    4796:	9c 93       	st	X, r25
    4798:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    479a:	fe 01       	movw	r30, r28
    479c:	eb 58       	subi	r30, 0x8B	; 139
    479e:	ff 4f       	sbci	r31, 0xFF	; 255
    47a0:	80 81       	ld	r24, Z
    47a2:	91 81       	ldd	r25, Z+1	; 0x01
    47a4:	00 97       	sbiw	r24, 0x00	; 0
    47a6:	d1 f6       	brne	.-76     	; 0x475c <main+0x1e7a>
    47a8:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <main+0x3d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47ac:	8e 01       	movw	r16, r28
    47ae:	0b 58       	subi	r16, 0x8B	; 139
    47b0:	1f 4f       	sbci	r17, 0xFF	; 255
    47b2:	fe 01       	movw	r30, r28
    47b4:	e9 58       	subi	r30, 0x89	; 137
    47b6:	ff 4f       	sbci	r31, 0xFF	; 255
    47b8:	60 81       	ld	r22, Z
    47ba:	71 81       	ldd	r23, Z+1	; 0x01
    47bc:	82 81       	ldd	r24, Z+2	; 0x02
    47be:	93 81       	ldd	r25, Z+3	; 0x03
    47c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47c4:	dc 01       	movw	r26, r24
    47c6:	cb 01       	movw	r24, r22
    47c8:	f8 01       	movw	r30, r16
    47ca:	91 83       	std	Z+1, r25	; 0x01
    47cc:	80 83       	st	Z, r24
    47ce:	de 01       	movw	r26, r28
    47d0:	af 58       	subi	r26, 0x8F	; 143
    47d2:	bf 4f       	sbci	r27, 0xFF	; 255
    47d4:	fe 01       	movw	r30, r28
    47d6:	eb 58       	subi	r30, 0x8B	; 139
    47d8:	ff 4f       	sbci	r31, 0xFF	; 255
    47da:	80 81       	ld	r24, Z
    47dc:	91 81       	ldd	r25, Z+1	; 0x01
    47de:	11 96       	adiw	r26, 0x01	; 1
    47e0:	9c 93       	st	X, r25
    47e2:	8e 93       	st	-X, r24
    47e4:	fe 01       	movw	r30, r28
    47e6:	ef 58       	subi	r30, 0x8F	; 143
    47e8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ea:	80 81       	ld	r24, Z
    47ec:	91 81       	ldd	r25, Z+1	; 0x01
    47ee:	01 97       	sbiw	r24, 0x01	; 1
    47f0:	f1 f7       	brne	.-4      	; 0x47ee <main+0x1f0c>
    47f2:	fe 01       	movw	r30, r28
    47f4:	ef 58       	subi	r30, 0x8F	; 143
    47f6:	ff 4f       	sbci	r31, 0xFF	; 255
    47f8:	91 83       	std	Z+1, r25	; 0x01
    47fa:	80 83       	st	Z, r24
    47fc:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <main+0x3d4>
				_delay_ms(2000);
			}
			else if(local_u8TryAgain==3)
    4800:	fe 01       	movw	r30, r28
    4802:	e7 5a       	subi	r30, 0xA7	; 167
    4804:	fe 4f       	sbci	r31, 0xFE	; 254
    4806:	80 81       	ld	r24, Z
    4808:	83 30       	cpi	r24, 0x03	; 3
    480a:	11 f0       	breq	.+4      	; 0x4810 <main+0x1f2e>
    480c:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <main+0x3d4>
			{
				HLCD_voidDisplayClear();
    4810:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
				HLCD_voidSendString("Exceeded Number");
    4814:	8e ee       	ldi	r24, 0xEE	; 238
    4816:	91 e0       	ldi	r25, 0x01	; 1
    4818:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
				HLCD_voidGoToPosition(2,1);
    481c:	82 e0       	ldi	r24, 0x02	; 2
    481e:	61 e0       	ldi	r22, 0x01	; 1
    4820:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
				HLCD_voidSendString(" Of Tries");
    4824:	8e ef       	ldi	r24, 0xFE	; 254
    4826:	91 e0       	ldi	r25, 0x01	; 1
    4828:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
				HLCD_voidDisplayClear();
    482c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
				HLCD_voidSendString("Calling 911");
    4830:	84 eb       	ldi	r24, 0xB4	; 180
    4832:	91 e0       	ldi	r25, 0x01	; 1
    4834:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
				HLCD_voidGoToPosition(2,1);
    4838:	82 e0       	ldi	r24, 0x02	; 2
    483a:	61 e0       	ldi	r22, 0x01	; 1
    483c:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
				HLCD_voidSendString("They Will Kill u");
    4840:	80 ec       	ldi	r24, 0xC0	; 192
    4842:	91 e0       	ldi	r25, 0x01	; 1
    4844:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>

				while(1)
				{
					MDIO_voidSetPinValue(DIO_PORTD,PIN3,DIO_HIGH);
    4848:	83 e0       	ldi	r24, 0x03	; 3
    484a:	63 e0       	ldi	r22, 0x03	; 3
    484c:	41 e0       	ldi	r20, 0x01	; 1
    484e:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
					MDIO_voidSetPinValue(DIO_PORTD,PIN6,DIO_HIGH);
    4852:	83 e0       	ldi	r24, 0x03	; 3
    4854:	66 e0       	ldi	r22, 0x06	; 6
    4856:	41 e0       	ldi	r20, 0x01	; 1
    4858:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    485c:	fe 01       	movw	r30, r28
    485e:	e3 59       	subi	r30, 0x93	; 147
    4860:	ff 4f       	sbci	r31, 0xFF	; 255
    4862:	80 e0       	ldi	r24, 0x00	; 0
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	aa ef       	ldi	r26, 0xFA	; 250
    4868:	b3 e4       	ldi	r27, 0x43	; 67
    486a:	80 83       	st	Z, r24
    486c:	91 83       	std	Z+1, r25	; 0x01
    486e:	a2 83       	std	Z+2, r26	; 0x02
    4870:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4872:	8e 01       	movw	r16, r28
    4874:	07 59       	subi	r16, 0x97	; 151
    4876:	1f 4f       	sbci	r17, 0xFF	; 255
    4878:	fe 01       	movw	r30, r28
    487a:	e3 59       	subi	r30, 0x93	; 147
    487c:	ff 4f       	sbci	r31, 0xFF	; 255
    487e:	60 81       	ld	r22, Z
    4880:	71 81       	ldd	r23, Z+1	; 0x01
    4882:	82 81       	ldd	r24, Z+2	; 0x02
    4884:	93 81       	ldd	r25, Z+3	; 0x03
    4886:	20 e0       	ldi	r18, 0x00	; 0
    4888:	30 e0       	ldi	r19, 0x00	; 0
    488a:	4a ef       	ldi	r20, 0xFA	; 250
    488c:	54 e4       	ldi	r21, 0x44	; 68
    488e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4892:	dc 01       	movw	r26, r24
    4894:	cb 01       	movw	r24, r22
    4896:	f8 01       	movw	r30, r16
    4898:	80 83       	st	Z, r24
    489a:	91 83       	std	Z+1, r25	; 0x01
    489c:	a2 83       	std	Z+2, r26	; 0x02
    489e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48a0:	fe 01       	movw	r30, r28
    48a2:	e7 59       	subi	r30, 0x97	; 151
    48a4:	ff 4f       	sbci	r31, 0xFF	; 255
    48a6:	60 81       	ld	r22, Z
    48a8:	71 81       	ldd	r23, Z+1	; 0x01
    48aa:	82 81       	ldd	r24, Z+2	; 0x02
    48ac:	93 81       	ldd	r25, Z+3	; 0x03
    48ae:	20 e0       	ldi	r18, 0x00	; 0
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	40 e8       	ldi	r20, 0x80	; 128
    48b4:	5f e3       	ldi	r21, 0x3F	; 63
    48b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48ba:	88 23       	and	r24, r24
    48bc:	44 f4       	brge	.+16     	; 0x48ce <main+0x1fec>
		__ticks = 1;
    48be:	fe 01       	movw	r30, r28
    48c0:	e9 59       	subi	r30, 0x99	; 153
    48c2:	ff 4f       	sbci	r31, 0xFF	; 255
    48c4:	81 e0       	ldi	r24, 0x01	; 1
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	91 83       	std	Z+1, r25	; 0x01
    48ca:	80 83       	st	Z, r24
    48cc:	64 c0       	rjmp	.+200    	; 0x4996 <main+0x20b4>
	else if (__tmp > 65535)
    48ce:	fe 01       	movw	r30, r28
    48d0:	e7 59       	subi	r30, 0x97	; 151
    48d2:	ff 4f       	sbci	r31, 0xFF	; 255
    48d4:	60 81       	ld	r22, Z
    48d6:	71 81       	ldd	r23, Z+1	; 0x01
    48d8:	82 81       	ldd	r24, Z+2	; 0x02
    48da:	93 81       	ldd	r25, Z+3	; 0x03
    48dc:	20 e0       	ldi	r18, 0x00	; 0
    48de:	3f ef       	ldi	r19, 0xFF	; 255
    48e0:	4f e7       	ldi	r20, 0x7F	; 127
    48e2:	57 e4       	ldi	r21, 0x47	; 71
    48e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48e8:	18 16       	cp	r1, r24
    48ea:	0c f0       	brlt	.+2      	; 0x48ee <main+0x200c>
    48ec:	43 c0       	rjmp	.+134    	; 0x4974 <main+0x2092>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48ee:	fe 01       	movw	r30, r28
    48f0:	e3 59       	subi	r30, 0x93	; 147
    48f2:	ff 4f       	sbci	r31, 0xFF	; 255
    48f4:	60 81       	ld	r22, Z
    48f6:	71 81       	ldd	r23, Z+1	; 0x01
    48f8:	82 81       	ldd	r24, Z+2	; 0x02
    48fa:	93 81       	ldd	r25, Z+3	; 0x03
    48fc:	20 e0       	ldi	r18, 0x00	; 0
    48fe:	30 e0       	ldi	r19, 0x00	; 0
    4900:	40 e2       	ldi	r20, 0x20	; 32
    4902:	51 e4       	ldi	r21, 0x41	; 65
    4904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4908:	dc 01       	movw	r26, r24
    490a:	cb 01       	movw	r24, r22
    490c:	8e 01       	movw	r16, r28
    490e:	09 59       	subi	r16, 0x99	; 153
    4910:	1f 4f       	sbci	r17, 0xFF	; 255
    4912:	bc 01       	movw	r22, r24
    4914:	cd 01       	movw	r24, r26
    4916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    491a:	dc 01       	movw	r26, r24
    491c:	cb 01       	movw	r24, r22
    491e:	f8 01       	movw	r30, r16
    4920:	91 83       	std	Z+1, r25	; 0x01
    4922:	80 83       	st	Z, r24
    4924:	1f c0       	rjmp	.+62     	; 0x4964 <main+0x2082>
    4926:	fe 01       	movw	r30, r28
    4928:	eb 59       	subi	r30, 0x9B	; 155
    492a:	ff 4f       	sbci	r31, 0xFF	; 255
    492c:	88 ec       	ldi	r24, 0xC8	; 200
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	91 83       	std	Z+1, r25	; 0x01
    4932:	80 83       	st	Z, r24
    4934:	fe 01       	movw	r30, r28
    4936:	eb 59       	subi	r30, 0x9B	; 155
    4938:	ff 4f       	sbci	r31, 0xFF	; 255
    493a:	80 81       	ld	r24, Z
    493c:	91 81       	ldd	r25, Z+1	; 0x01
    493e:	01 97       	sbiw	r24, 0x01	; 1
    4940:	f1 f7       	brne	.-4      	; 0x493e <main+0x205c>
    4942:	fe 01       	movw	r30, r28
    4944:	eb 59       	subi	r30, 0x9B	; 155
    4946:	ff 4f       	sbci	r31, 0xFF	; 255
    4948:	91 83       	std	Z+1, r25	; 0x01
    494a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    494c:	de 01       	movw	r26, r28
    494e:	a9 59       	subi	r26, 0x99	; 153
    4950:	bf 4f       	sbci	r27, 0xFF	; 255
    4952:	fe 01       	movw	r30, r28
    4954:	e9 59       	subi	r30, 0x99	; 153
    4956:	ff 4f       	sbci	r31, 0xFF	; 255
    4958:	80 81       	ld	r24, Z
    495a:	91 81       	ldd	r25, Z+1	; 0x01
    495c:	01 97       	sbiw	r24, 0x01	; 1
    495e:	11 96       	adiw	r26, 0x01	; 1
    4960:	9c 93       	st	X, r25
    4962:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4964:	fe 01       	movw	r30, r28
    4966:	e9 59       	subi	r30, 0x99	; 153
    4968:	ff 4f       	sbci	r31, 0xFF	; 255
    496a:	80 81       	ld	r24, Z
    496c:	91 81       	ldd	r25, Z+1	; 0x01
    496e:	00 97       	sbiw	r24, 0x00	; 0
    4970:	d1 f6       	brne	.-76     	; 0x4926 <main+0x2044>
    4972:	27 c0       	rjmp	.+78     	; 0x49c2 <main+0x20e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4974:	8e 01       	movw	r16, r28
    4976:	09 59       	subi	r16, 0x99	; 153
    4978:	1f 4f       	sbci	r17, 0xFF	; 255
    497a:	fe 01       	movw	r30, r28
    497c:	e7 59       	subi	r30, 0x97	; 151
    497e:	ff 4f       	sbci	r31, 0xFF	; 255
    4980:	60 81       	ld	r22, Z
    4982:	71 81       	ldd	r23, Z+1	; 0x01
    4984:	82 81       	ldd	r24, Z+2	; 0x02
    4986:	93 81       	ldd	r25, Z+3	; 0x03
    4988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    498c:	dc 01       	movw	r26, r24
    498e:	cb 01       	movw	r24, r22
    4990:	f8 01       	movw	r30, r16
    4992:	91 83       	std	Z+1, r25	; 0x01
    4994:	80 83       	st	Z, r24
    4996:	de 01       	movw	r26, r28
    4998:	ad 59       	subi	r26, 0x9D	; 157
    499a:	bf 4f       	sbci	r27, 0xFF	; 255
    499c:	fe 01       	movw	r30, r28
    499e:	e9 59       	subi	r30, 0x99	; 153
    49a0:	ff 4f       	sbci	r31, 0xFF	; 255
    49a2:	80 81       	ld	r24, Z
    49a4:	91 81       	ldd	r25, Z+1	; 0x01
    49a6:	8d 93       	st	X+, r24
    49a8:	9c 93       	st	X, r25
    49aa:	fe 01       	movw	r30, r28
    49ac:	ed 59       	subi	r30, 0x9D	; 157
    49ae:	ff 4f       	sbci	r31, 0xFF	; 255
    49b0:	80 81       	ld	r24, Z
    49b2:	91 81       	ldd	r25, Z+1	; 0x01
    49b4:	01 97       	sbiw	r24, 0x01	; 1
    49b6:	f1 f7       	brne	.-4      	; 0x49b4 <main+0x20d2>
    49b8:	fe 01       	movw	r30, r28
    49ba:	ed 59       	subi	r30, 0x9D	; 157
    49bc:	ff 4f       	sbci	r31, 0xFF	; 255
    49be:	91 83       	std	Z+1, r25	; 0x01
    49c0:	80 83       	st	Z, r24
					_delay_ms(500);
					MDIO_voidSetPinValue(DIO_PORTD,PIN3,DIO_LOW);
    49c2:	83 e0       	ldi	r24, 0x03	; 3
    49c4:	63 e0       	ldi	r22, 0x03	; 3
    49c6:	40 e0       	ldi	r20, 0x00	; 0
    49c8:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
					MDIO_voidSetPinValue(DIO_PORTD,PIN6,DIO_LOW);
    49cc:	83 e0       	ldi	r24, 0x03	; 3
    49ce:	66 e0       	ldi	r22, 0x06	; 6
    49d0:	40 e0       	ldi	r20, 0x00	; 0
    49d2:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    49d6:	fe 01       	movw	r30, r28
    49d8:	e1 5a       	subi	r30, 0xA1	; 161
    49da:	ff 4f       	sbci	r31, 0xFF	; 255
    49dc:	80 e0       	ldi	r24, 0x00	; 0
    49de:	90 e0       	ldi	r25, 0x00	; 0
    49e0:	aa ef       	ldi	r26, 0xFA	; 250
    49e2:	b3 e4       	ldi	r27, 0x43	; 67
    49e4:	80 83       	st	Z, r24
    49e6:	91 83       	std	Z+1, r25	; 0x01
    49e8:	a2 83       	std	Z+2, r26	; 0x02
    49ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49ec:	8e 01       	movw	r16, r28
    49ee:	05 5a       	subi	r16, 0xA5	; 165
    49f0:	1f 4f       	sbci	r17, 0xFF	; 255
    49f2:	fe 01       	movw	r30, r28
    49f4:	e1 5a       	subi	r30, 0xA1	; 161
    49f6:	ff 4f       	sbci	r31, 0xFF	; 255
    49f8:	60 81       	ld	r22, Z
    49fa:	71 81       	ldd	r23, Z+1	; 0x01
    49fc:	82 81       	ldd	r24, Z+2	; 0x02
    49fe:	93 81       	ldd	r25, Z+3	; 0x03
    4a00:	20 e0       	ldi	r18, 0x00	; 0
    4a02:	30 e0       	ldi	r19, 0x00	; 0
    4a04:	4a ef       	ldi	r20, 0xFA	; 250
    4a06:	54 e4       	ldi	r21, 0x44	; 68
    4a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a0c:	dc 01       	movw	r26, r24
    4a0e:	cb 01       	movw	r24, r22
    4a10:	f8 01       	movw	r30, r16
    4a12:	80 83       	st	Z, r24
    4a14:	91 83       	std	Z+1, r25	; 0x01
    4a16:	a2 83       	std	Z+2, r26	; 0x02
    4a18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a1a:	fe 01       	movw	r30, r28
    4a1c:	e5 5a       	subi	r30, 0xA5	; 165
    4a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a20:	60 81       	ld	r22, Z
    4a22:	71 81       	ldd	r23, Z+1	; 0x01
    4a24:	82 81       	ldd	r24, Z+2	; 0x02
    4a26:	93 81       	ldd	r25, Z+3	; 0x03
    4a28:	20 e0       	ldi	r18, 0x00	; 0
    4a2a:	30 e0       	ldi	r19, 0x00	; 0
    4a2c:	40 e8       	ldi	r20, 0x80	; 128
    4a2e:	5f e3       	ldi	r21, 0x3F	; 63
    4a30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a34:	88 23       	and	r24, r24
    4a36:	44 f4       	brge	.+16     	; 0x4a48 <main+0x2166>
		__ticks = 1;
    4a38:	fe 01       	movw	r30, r28
    4a3a:	e7 5a       	subi	r30, 0xA7	; 167
    4a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3e:	81 e0       	ldi	r24, 0x01	; 1
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	91 83       	std	Z+1, r25	; 0x01
    4a44:	80 83       	st	Z, r24
    4a46:	64 c0       	rjmp	.+200    	; 0x4b10 <main+0x222e>
	else if (__tmp > 65535)
    4a48:	fe 01       	movw	r30, r28
    4a4a:	e5 5a       	subi	r30, 0xA5	; 165
    4a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4e:	60 81       	ld	r22, Z
    4a50:	71 81       	ldd	r23, Z+1	; 0x01
    4a52:	82 81       	ldd	r24, Z+2	; 0x02
    4a54:	93 81       	ldd	r25, Z+3	; 0x03
    4a56:	20 e0       	ldi	r18, 0x00	; 0
    4a58:	3f ef       	ldi	r19, 0xFF	; 255
    4a5a:	4f e7       	ldi	r20, 0x7F	; 127
    4a5c:	57 e4       	ldi	r21, 0x47	; 71
    4a5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a62:	18 16       	cp	r1, r24
    4a64:	0c f0       	brlt	.+2      	; 0x4a68 <main+0x2186>
    4a66:	43 c0       	rjmp	.+134    	; 0x4aee <main+0x220c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a68:	fe 01       	movw	r30, r28
    4a6a:	e1 5a       	subi	r30, 0xA1	; 161
    4a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6e:	60 81       	ld	r22, Z
    4a70:	71 81       	ldd	r23, Z+1	; 0x01
    4a72:	82 81       	ldd	r24, Z+2	; 0x02
    4a74:	93 81       	ldd	r25, Z+3	; 0x03
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	40 e2       	ldi	r20, 0x20	; 32
    4a7c:	51 e4       	ldi	r21, 0x41	; 65
    4a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a82:	dc 01       	movw	r26, r24
    4a84:	cb 01       	movw	r24, r22
    4a86:	8e 01       	movw	r16, r28
    4a88:	07 5a       	subi	r16, 0xA7	; 167
    4a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a8c:	bc 01       	movw	r22, r24
    4a8e:	cd 01       	movw	r24, r26
    4a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a94:	dc 01       	movw	r26, r24
    4a96:	cb 01       	movw	r24, r22
    4a98:	f8 01       	movw	r30, r16
    4a9a:	91 83       	std	Z+1, r25	; 0x01
    4a9c:	80 83       	st	Z, r24
    4a9e:	1f c0       	rjmp	.+62     	; 0x4ade <main+0x21fc>
    4aa0:	fe 01       	movw	r30, r28
    4aa2:	e9 5a       	subi	r30, 0xA9	; 169
    4aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa6:	88 ec       	ldi	r24, 0xC8	; 200
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	91 83       	std	Z+1, r25	; 0x01
    4aac:	80 83       	st	Z, r24
    4aae:	fe 01       	movw	r30, r28
    4ab0:	e9 5a       	subi	r30, 0xA9	; 169
    4ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab4:	80 81       	ld	r24, Z
    4ab6:	91 81       	ldd	r25, Z+1	; 0x01
    4ab8:	01 97       	sbiw	r24, 0x01	; 1
    4aba:	f1 f7       	brne	.-4      	; 0x4ab8 <main+0x21d6>
    4abc:	fe 01       	movw	r30, r28
    4abe:	e9 5a       	subi	r30, 0xA9	; 169
    4ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac2:	91 83       	std	Z+1, r25	; 0x01
    4ac4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ac6:	de 01       	movw	r26, r28
    4ac8:	a7 5a       	subi	r26, 0xA7	; 167
    4aca:	bf 4f       	sbci	r27, 0xFF	; 255
    4acc:	fe 01       	movw	r30, r28
    4ace:	e7 5a       	subi	r30, 0xA7	; 167
    4ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad2:	80 81       	ld	r24, Z
    4ad4:	91 81       	ldd	r25, Z+1	; 0x01
    4ad6:	01 97       	sbiw	r24, 0x01	; 1
    4ad8:	11 96       	adiw	r26, 0x01	; 1
    4ada:	9c 93       	st	X, r25
    4adc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ade:	fe 01       	movw	r30, r28
    4ae0:	e7 5a       	subi	r30, 0xA7	; 167
    4ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae4:	80 81       	ld	r24, Z
    4ae6:	91 81       	ldd	r25, Z+1	; 0x01
    4ae8:	00 97       	sbiw	r24, 0x00	; 0
    4aea:	d1 f6       	brne	.-76     	; 0x4aa0 <main+0x21be>
    4aec:	ad ce       	rjmp	.-678    	; 0x4848 <main+0x1f66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4aee:	8e 01       	movw	r16, r28
    4af0:	07 5a       	subi	r16, 0xA7	; 167
    4af2:	1f 4f       	sbci	r17, 0xFF	; 255
    4af4:	fe 01       	movw	r30, r28
    4af6:	e5 5a       	subi	r30, 0xA5	; 165
    4af8:	ff 4f       	sbci	r31, 0xFF	; 255
    4afa:	60 81       	ld	r22, Z
    4afc:	71 81       	ldd	r23, Z+1	; 0x01
    4afe:	82 81       	ldd	r24, Z+2	; 0x02
    4b00:	93 81       	ldd	r25, Z+3	; 0x03
    4b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b06:	dc 01       	movw	r26, r24
    4b08:	cb 01       	movw	r24, r22
    4b0a:	f8 01       	movw	r30, r16
    4b0c:	91 83       	std	Z+1, r25	; 0x01
    4b0e:	80 83       	st	Z, r24
    4b10:	de 01       	movw	r26, r28
    4b12:	ab 5a       	subi	r26, 0xAB	; 171
    4b14:	bf 4f       	sbci	r27, 0xFF	; 255
    4b16:	fe 01       	movw	r30, r28
    4b18:	e7 5a       	subi	r30, 0xA7	; 167
    4b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1c:	80 81       	ld	r24, Z
    4b1e:	91 81       	ldd	r25, Z+1	; 0x01
    4b20:	11 96       	adiw	r26, 0x01	; 1
    4b22:	9c 93       	st	X, r25
    4b24:	8e 93       	st	-X, r24
    4b26:	fe 01       	movw	r30, r28
    4b28:	eb 5a       	subi	r30, 0xAB	; 171
    4b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2c:	80 81       	ld	r24, Z
    4b2e:	91 81       	ldd	r25, Z+1	; 0x01
    4b30:	01 97       	sbiw	r24, 0x01	; 1
    4b32:	f1 f7       	brne	.-4      	; 0x4b30 <main+0x224e>
    4b34:	fe 01       	movw	r30, r28
    4b36:	eb 5a       	subi	r30, 0xAB	; 171
    4b38:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3a:	91 83       	std	Z+1, r25	; 0x01
    4b3c:	80 83       	st	Z, r24
    4b3e:	84 ce       	rjmp	.-760    	; 0x4848 <main+0x1f66>
				}
			}
			}

		}
		else if(local_u8PressedKey == '2')
    4b40:	fe 01       	movw	r30, r28
    4b42:	e6 5a       	subi	r30, 0xA6	; 166
    4b44:	fe 4f       	sbci	r31, 0xFE	; 254
    4b46:	80 81       	ld	r24, Z
    4b48:	82 33       	cpi	r24, 0x32	; 50
    4b4a:	09 f0       	breq	.+2      	; 0x4b4e <main+0x226c>
    4b4c:	a1 c2       	rjmp	.+1346   	; 0x5090 <main+0x27ae>
		{
			while(1)
			{
			local_u8PressedKey=0xff;
    4b4e:	fe 01       	movw	r30, r28
    4b50:	e6 5a       	subi	r30, 0xA6	; 166
    4b52:	fe 4f       	sbci	r31, 0xFE	; 254
    4b54:	8f ef       	ldi	r24, 0xFF	; 255
    4b56:	80 83       	st	Z, r24
			HLCD_voidDisplayClear();
    4b58:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
			HLCD_voidSendString("Enter Old Pass:");
    4b5c:	88 e0       	ldi	r24, 0x08	; 8
    4b5e:	92 e0       	ldi	r25, 0x02	; 2
    4b60:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
			HLCD_voidGoToPosition(2,1);
    4b64:	82 e0       	ldi	r24, 0x02	; 2
    4b66:	61 e0       	ldi	r22, 0x01	; 1
    4b68:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>

			for(u8 i=0; i < 4;i++)
    4b6c:	fe 01       	movw	r30, r28
    4b6e:	ee 5a       	subi	r30, 0xAE	; 174
    4b70:	fe 4f       	sbci	r31, 0xFE	; 254
    4b72:	10 82       	st	Z, r1
    4b74:	2f c0       	rjmp	.+94     	; 0x4bd4 <main+0x22f2>
			{
				while(local_u8PressedKey==0xff)
				{
					local_u8PressedKey=HKEYPAD_u8KeyPressed();
    4b76:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <HKEYPAD_u8KeyPressed>
    4b7a:	fe 01       	movw	r30, r28
    4b7c:	e6 5a       	subi	r30, 0xA6	; 166
    4b7e:	fe 4f       	sbci	r31, 0xFE	; 254
    4b80:	80 83       	st	Z, r24
			HLCD_voidSendString("Enter Old Pass:");
			HLCD_voidGoToPosition(2,1);

			for(u8 i=0; i < 4;i++)
			{
				while(local_u8PressedKey==0xff)
    4b82:	fe 01       	movw	r30, r28
    4b84:	e6 5a       	subi	r30, 0xA6	; 166
    4b86:	fe 4f       	sbci	r31, 0xFE	; 254
    4b88:	80 81       	ld	r24, Z
    4b8a:	8f 3f       	cpi	r24, 0xFF	; 255
    4b8c:	a1 f3       	breq	.-24     	; 0x4b76 <main+0x2294>
				{
					local_u8PressedKey=HKEYPAD_u8KeyPressed();
				}
				local_u8EnteredPass[i]=local_u8PressedKey;
    4b8e:	fe 01       	movw	r30, r28
    4b90:	ee 5a       	subi	r30, 0xAE	; 174
    4b92:	fe 4f       	sbci	r31, 0xFE	; 254
    4b94:	80 81       	ld	r24, Z
    4b96:	28 2f       	mov	r18, r24
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	ce 01       	movw	r24, r28
    4b9c:	80 5a       	subi	r24, 0xA0	; 160
    4b9e:	9e 4f       	sbci	r25, 0xFE	; 254
    4ba0:	dc 01       	movw	r26, r24
    4ba2:	a2 0f       	add	r26, r18
    4ba4:	b3 1f       	adc	r27, r19
    4ba6:	fe 01       	movw	r30, r28
    4ba8:	e6 5a       	subi	r30, 0xA6	; 166
    4baa:	fe 4f       	sbci	r31, 0xFE	; 254
    4bac:	80 81       	ld	r24, Z
    4bae:	8c 93       	st	X, r24
				HLCD_voidSendString("*");
    4bb0:	8a ea       	ldi	r24, 0xAA	; 170
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
				local_u8PressedKey=0xff;
    4bb8:	fe 01       	movw	r30, r28
    4bba:	e6 5a       	subi	r30, 0xA6	; 166
    4bbc:	fe 4f       	sbci	r31, 0xFE	; 254
    4bbe:	8f ef       	ldi	r24, 0xFF	; 255
    4bc0:	80 83       	st	Z, r24
			local_u8PressedKey=0xff;
			HLCD_voidDisplayClear();
			HLCD_voidSendString("Enter Old Pass:");
			HLCD_voidGoToPosition(2,1);

			for(u8 i=0; i < 4;i++)
    4bc2:	de 01       	movw	r26, r28
    4bc4:	ae 5a       	subi	r26, 0xAE	; 174
    4bc6:	be 4f       	sbci	r27, 0xFE	; 254
    4bc8:	fe 01       	movw	r30, r28
    4bca:	ee 5a       	subi	r30, 0xAE	; 174
    4bcc:	fe 4f       	sbci	r31, 0xFE	; 254
    4bce:	80 81       	ld	r24, Z
    4bd0:	8f 5f       	subi	r24, 0xFF	; 255
    4bd2:	8c 93       	st	X, r24
    4bd4:	fe 01       	movw	r30, r28
    4bd6:	ee 5a       	subi	r30, 0xAE	; 174
    4bd8:	fe 4f       	sbci	r31, 0xFE	; 254
    4bda:	80 81       	ld	r24, Z
    4bdc:	84 30       	cpi	r24, 0x04	; 4
    4bde:	88 f2       	brcs	.-94     	; 0x4b82 <main+0x22a0>
				}
				local_u8EnteredPass[i]=local_u8PressedKey;
				HLCD_voidSendString("*");
				local_u8PressedKey=0xff;
			}
			if(local_u8EnteredPass[0] == local_u8Pass[0] &&
    4be0:	fe 01       	movw	r30, r28
    4be2:	e0 5a       	subi	r30, 0xA0	; 160
    4be4:	fe 4f       	sbci	r31, 0xFE	; 254
    4be6:	90 81       	ld	r25, Z
    4be8:	80 91 be 02 	lds	r24, 0x02BE
    4bec:	98 17       	cp	r25, r24
    4bee:	09 f0       	breq	.+2      	; 0x4bf2 <main+0x2310>
    4bf0:	ce c1       	rjmp	.+924    	; 0x4f8e <main+0x26ac>
    4bf2:	fe 01       	movw	r30, r28
    4bf4:	e0 5a       	subi	r30, 0xA0	; 160
    4bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    4bf8:	91 81       	ldd	r25, Z+1	; 0x01
    4bfa:	80 91 bf 02 	lds	r24, 0x02BF
    4bfe:	98 17       	cp	r25, r24
    4c00:	09 f0       	breq	.+2      	; 0x4c04 <main+0x2322>
    4c02:	c5 c1       	rjmp	.+906    	; 0x4f8e <main+0x26ac>
    4c04:	fe 01       	movw	r30, r28
    4c06:	e0 5a       	subi	r30, 0xA0	; 160
    4c08:	fe 4f       	sbci	r31, 0xFE	; 254
    4c0a:	92 81       	ldd	r25, Z+2	; 0x02
    4c0c:	80 91 c0 02 	lds	r24, 0x02C0
    4c10:	98 17       	cp	r25, r24
    4c12:	09 f0       	breq	.+2      	; 0x4c16 <main+0x2334>
    4c14:	bc c1       	rjmp	.+888    	; 0x4f8e <main+0x26ac>
    4c16:	fe 01       	movw	r30, r28
    4c18:	e0 5a       	subi	r30, 0xA0	; 160
    4c1a:	fe 4f       	sbci	r31, 0xFE	; 254
    4c1c:	93 81       	ldd	r25, Z+3	; 0x03
    4c1e:	80 91 c1 02 	lds	r24, 0x02C1
    4c22:	98 17       	cp	r25, r24
    4c24:	09 f0       	breq	.+2      	; 0x4c28 <main+0x2346>
    4c26:	b3 c1       	rjmp	.+870    	; 0x4f8e <main+0x26ac>
			   local_u8EnteredPass[1] == local_u8Pass[1] &&
			   local_u8EnteredPass[2] == local_u8Pass[2] &&
			   local_u8EnteredPass[3] == local_u8Pass[3] )
			{
				HLCD_voidDisplayClear();
    4c28:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
				HLCD_voidSendString("Welcome To Pass");
    4c2c:	88 e1       	ldi	r24, 0x18	; 24
    4c2e:	92 e0       	ldi	r25, 0x02	; 2
    4c30:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
				HLCD_voidGoToPosition(2,1);
    4c34:	82 e0       	ldi	r24, 0x02	; 2
    4c36:	61 e0       	ldi	r22, 0x01	; 1
    4c38:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
				HLCD_voidSendString("Change Page");
    4c3c:	88 e2       	ldi	r24, 0x28	; 40
    4c3e:	92 e0       	ldi	r25, 0x02	; 2
    4c40:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    4c44:	fe 01       	movw	r30, r28
    4c46:	ef 5a       	subi	r30, 0xAF	; 175
    4c48:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4a:	80 e0       	ldi	r24, 0x00	; 0
    4c4c:	90 e0       	ldi	r25, 0x00	; 0
    4c4e:	aa e7       	ldi	r26, 0x7A	; 122
    4c50:	b4 e4       	ldi	r27, 0x44	; 68
    4c52:	80 83       	st	Z, r24
    4c54:	91 83       	std	Z+1, r25	; 0x01
    4c56:	a2 83       	std	Z+2, r26	; 0x02
    4c58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c5a:	8e 01       	movw	r16, r28
    4c5c:	03 5b       	subi	r16, 0xB3	; 179
    4c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c60:	fe 01       	movw	r30, r28
    4c62:	ef 5a       	subi	r30, 0xAF	; 175
    4c64:	ff 4f       	sbci	r31, 0xFF	; 255
    4c66:	60 81       	ld	r22, Z
    4c68:	71 81       	ldd	r23, Z+1	; 0x01
    4c6a:	82 81       	ldd	r24, Z+2	; 0x02
    4c6c:	93 81       	ldd	r25, Z+3	; 0x03
    4c6e:	20 e0       	ldi	r18, 0x00	; 0
    4c70:	30 e0       	ldi	r19, 0x00	; 0
    4c72:	4a ef       	ldi	r20, 0xFA	; 250
    4c74:	54 e4       	ldi	r21, 0x44	; 68
    4c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c7a:	dc 01       	movw	r26, r24
    4c7c:	cb 01       	movw	r24, r22
    4c7e:	f8 01       	movw	r30, r16
    4c80:	80 83       	st	Z, r24
    4c82:	91 83       	std	Z+1, r25	; 0x01
    4c84:	a2 83       	std	Z+2, r26	; 0x02
    4c86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c88:	fe 01       	movw	r30, r28
    4c8a:	e3 5b       	subi	r30, 0xB3	; 179
    4c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8e:	60 81       	ld	r22, Z
    4c90:	71 81       	ldd	r23, Z+1	; 0x01
    4c92:	82 81       	ldd	r24, Z+2	; 0x02
    4c94:	93 81       	ldd	r25, Z+3	; 0x03
    4c96:	20 e0       	ldi	r18, 0x00	; 0
    4c98:	30 e0       	ldi	r19, 0x00	; 0
    4c9a:	40 e8       	ldi	r20, 0x80	; 128
    4c9c:	5f e3       	ldi	r21, 0x3F	; 63
    4c9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ca2:	88 23       	and	r24, r24
    4ca4:	44 f4       	brge	.+16     	; 0x4cb6 <main+0x23d4>
		__ticks = 1;
    4ca6:	fe 01       	movw	r30, r28
    4ca8:	e5 5b       	subi	r30, 0xB5	; 181
    4caa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cac:	81 e0       	ldi	r24, 0x01	; 1
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	91 83       	std	Z+1, r25	; 0x01
    4cb2:	80 83       	st	Z, r24
    4cb4:	64 c0       	rjmp	.+200    	; 0x4d7e <main+0x249c>
	else if (__tmp > 65535)
    4cb6:	fe 01       	movw	r30, r28
    4cb8:	e3 5b       	subi	r30, 0xB3	; 179
    4cba:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbc:	60 81       	ld	r22, Z
    4cbe:	71 81       	ldd	r23, Z+1	; 0x01
    4cc0:	82 81       	ldd	r24, Z+2	; 0x02
    4cc2:	93 81       	ldd	r25, Z+3	; 0x03
    4cc4:	20 e0       	ldi	r18, 0x00	; 0
    4cc6:	3f ef       	ldi	r19, 0xFF	; 255
    4cc8:	4f e7       	ldi	r20, 0x7F	; 127
    4cca:	57 e4       	ldi	r21, 0x47	; 71
    4ccc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cd0:	18 16       	cp	r1, r24
    4cd2:	0c f0       	brlt	.+2      	; 0x4cd6 <main+0x23f4>
    4cd4:	43 c0       	rjmp	.+134    	; 0x4d5c <main+0x247a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cd6:	fe 01       	movw	r30, r28
    4cd8:	ef 5a       	subi	r30, 0xAF	; 175
    4cda:	ff 4f       	sbci	r31, 0xFF	; 255
    4cdc:	60 81       	ld	r22, Z
    4cde:	71 81       	ldd	r23, Z+1	; 0x01
    4ce0:	82 81       	ldd	r24, Z+2	; 0x02
    4ce2:	93 81       	ldd	r25, Z+3	; 0x03
    4ce4:	20 e0       	ldi	r18, 0x00	; 0
    4ce6:	30 e0       	ldi	r19, 0x00	; 0
    4ce8:	40 e2       	ldi	r20, 0x20	; 32
    4cea:	51 e4       	ldi	r21, 0x41	; 65
    4cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cf0:	dc 01       	movw	r26, r24
    4cf2:	cb 01       	movw	r24, r22
    4cf4:	8e 01       	movw	r16, r28
    4cf6:	05 5b       	subi	r16, 0xB5	; 181
    4cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    4cfa:	bc 01       	movw	r22, r24
    4cfc:	cd 01       	movw	r24, r26
    4cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d02:	dc 01       	movw	r26, r24
    4d04:	cb 01       	movw	r24, r22
    4d06:	f8 01       	movw	r30, r16
    4d08:	91 83       	std	Z+1, r25	; 0x01
    4d0a:	80 83       	st	Z, r24
    4d0c:	1f c0       	rjmp	.+62     	; 0x4d4c <main+0x246a>
    4d0e:	fe 01       	movw	r30, r28
    4d10:	e7 5b       	subi	r30, 0xB7	; 183
    4d12:	ff 4f       	sbci	r31, 0xFF	; 255
    4d14:	88 ec       	ldi	r24, 0xC8	; 200
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	91 83       	std	Z+1, r25	; 0x01
    4d1a:	80 83       	st	Z, r24
    4d1c:	fe 01       	movw	r30, r28
    4d1e:	e7 5b       	subi	r30, 0xB7	; 183
    4d20:	ff 4f       	sbci	r31, 0xFF	; 255
    4d22:	80 81       	ld	r24, Z
    4d24:	91 81       	ldd	r25, Z+1	; 0x01
    4d26:	01 97       	sbiw	r24, 0x01	; 1
    4d28:	f1 f7       	brne	.-4      	; 0x4d26 <main+0x2444>
    4d2a:	fe 01       	movw	r30, r28
    4d2c:	e7 5b       	subi	r30, 0xB7	; 183
    4d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d30:	91 83       	std	Z+1, r25	; 0x01
    4d32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d34:	de 01       	movw	r26, r28
    4d36:	a5 5b       	subi	r26, 0xB5	; 181
    4d38:	bf 4f       	sbci	r27, 0xFF	; 255
    4d3a:	fe 01       	movw	r30, r28
    4d3c:	e5 5b       	subi	r30, 0xB5	; 181
    4d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d40:	80 81       	ld	r24, Z
    4d42:	91 81       	ldd	r25, Z+1	; 0x01
    4d44:	01 97       	sbiw	r24, 0x01	; 1
    4d46:	11 96       	adiw	r26, 0x01	; 1
    4d48:	9c 93       	st	X, r25
    4d4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d4c:	fe 01       	movw	r30, r28
    4d4e:	e5 5b       	subi	r30, 0xB5	; 181
    4d50:	ff 4f       	sbci	r31, 0xFF	; 255
    4d52:	80 81       	ld	r24, Z
    4d54:	91 81       	ldd	r25, Z+1	; 0x01
    4d56:	00 97       	sbiw	r24, 0x00	; 0
    4d58:	d1 f6       	brne	.-76     	; 0x4d0e <main+0x242c>
    4d5a:	27 c0       	rjmp	.+78     	; 0x4daa <main+0x24c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d5c:	8e 01       	movw	r16, r28
    4d5e:	05 5b       	subi	r16, 0xB5	; 181
    4d60:	1f 4f       	sbci	r17, 0xFF	; 255
    4d62:	fe 01       	movw	r30, r28
    4d64:	e3 5b       	subi	r30, 0xB3	; 179
    4d66:	ff 4f       	sbci	r31, 0xFF	; 255
    4d68:	60 81       	ld	r22, Z
    4d6a:	71 81       	ldd	r23, Z+1	; 0x01
    4d6c:	82 81       	ldd	r24, Z+2	; 0x02
    4d6e:	93 81       	ldd	r25, Z+3	; 0x03
    4d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d74:	dc 01       	movw	r26, r24
    4d76:	cb 01       	movw	r24, r22
    4d78:	f8 01       	movw	r30, r16
    4d7a:	91 83       	std	Z+1, r25	; 0x01
    4d7c:	80 83       	st	Z, r24
    4d7e:	de 01       	movw	r26, r28
    4d80:	a9 5b       	subi	r26, 0xB9	; 185
    4d82:	bf 4f       	sbci	r27, 0xFF	; 255
    4d84:	fe 01       	movw	r30, r28
    4d86:	e5 5b       	subi	r30, 0xB5	; 181
    4d88:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8a:	80 81       	ld	r24, Z
    4d8c:	91 81       	ldd	r25, Z+1	; 0x01
    4d8e:	8d 93       	st	X+, r24
    4d90:	9c 93       	st	X, r25
    4d92:	fe 01       	movw	r30, r28
    4d94:	e9 5b       	subi	r30, 0xB9	; 185
    4d96:	ff 4f       	sbci	r31, 0xFF	; 255
    4d98:	80 81       	ld	r24, Z
    4d9a:	91 81       	ldd	r25, Z+1	; 0x01
    4d9c:	01 97       	sbiw	r24, 0x01	; 1
    4d9e:	f1 f7       	brne	.-4      	; 0x4d9c <main+0x24ba>
    4da0:	fe 01       	movw	r30, r28
    4da2:	e9 5b       	subi	r30, 0xB9	; 185
    4da4:	ff 4f       	sbci	r31, 0xFF	; 255
    4da6:	91 83       	std	Z+1, r25	; 0x01
    4da8:	80 83       	st	Z, r24
				_delay_ms(1000);
				HLCD_voidDisplayClear();
    4daa:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
				HLCD_voidSendString("Enter New Pass:");
    4dae:	84 e3       	ldi	r24, 0x34	; 52
    4db0:	92 e0       	ldi	r25, 0x02	; 2
    4db2:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
				HLCD_voidGoToPosition(2,1);
    4db6:	82 e0       	ldi	r24, 0x02	; 2
    4db8:	61 e0       	ldi	r22, 0x01	; 1
    4dba:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>

				for(u8 i=0; i<4 ;i++)
    4dbe:	fe 01       	movw	r30, r28
    4dc0:	ef 5a       	subi	r30, 0xAF	; 175
    4dc2:	fe 4f       	sbci	r31, 0xFE	; 254
    4dc4:	10 82       	st	Z, r1
    4dc6:	2f c0       	rjmp	.+94     	; 0x4e26 <main+0x2544>
				{
					while(local_u8PressedKey==0xff)
					{
						local_u8PressedKey=HKEYPAD_u8KeyPressed();
    4dc8:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <HKEYPAD_u8KeyPressed>
    4dcc:	fe 01       	movw	r30, r28
    4dce:	e6 5a       	subi	r30, 0xA6	; 166
    4dd0:	fe 4f       	sbci	r31, 0xFE	; 254
    4dd2:	80 83       	st	Z, r24
				HLCD_voidSendString("Enter New Pass:");
				HLCD_voidGoToPosition(2,1);

				for(u8 i=0; i<4 ;i++)
				{
					while(local_u8PressedKey==0xff)
    4dd4:	fe 01       	movw	r30, r28
    4dd6:	e6 5a       	subi	r30, 0xA6	; 166
    4dd8:	fe 4f       	sbci	r31, 0xFE	; 254
    4dda:	80 81       	ld	r24, Z
    4ddc:	8f 3f       	cpi	r24, 0xFF	; 255
    4dde:	a1 f3       	breq	.-24     	; 0x4dc8 <main+0x24e6>
					{
						local_u8PressedKey=HKEYPAD_u8KeyPressed();
					}
					local_u8NewPass[i]=local_u8PressedKey;
    4de0:	fe 01       	movw	r30, r28
    4de2:	ef 5a       	subi	r30, 0xAF	; 175
    4de4:	fe 4f       	sbci	r31, 0xFE	; 254
    4de6:	80 81       	ld	r24, Z
    4de8:	28 2f       	mov	r18, r24
    4dea:	30 e0       	ldi	r19, 0x00	; 0
    4dec:	ce 01       	movw	r24, r28
    4dee:	8c 59       	subi	r24, 0x9C	; 156
    4df0:	9e 4f       	sbci	r25, 0xFE	; 254
    4df2:	dc 01       	movw	r26, r24
    4df4:	a2 0f       	add	r26, r18
    4df6:	b3 1f       	adc	r27, r19
    4df8:	fe 01       	movw	r30, r28
    4dfa:	e6 5a       	subi	r30, 0xA6	; 166
    4dfc:	fe 4f       	sbci	r31, 0xFE	; 254
    4dfe:	80 81       	ld	r24, Z
    4e00:	8c 93       	st	X, r24
					HLCD_voidSendString("*");
    4e02:	8a ea       	ldi	r24, 0xAA	; 170
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
					local_u8PressedKey=0xff;
    4e0a:	fe 01       	movw	r30, r28
    4e0c:	e6 5a       	subi	r30, 0xA6	; 166
    4e0e:	fe 4f       	sbci	r31, 0xFE	; 254
    4e10:	8f ef       	ldi	r24, 0xFF	; 255
    4e12:	80 83       	st	Z, r24
				_delay_ms(1000);
				HLCD_voidDisplayClear();
				HLCD_voidSendString("Enter New Pass:");
				HLCD_voidGoToPosition(2,1);

				for(u8 i=0; i<4 ;i++)
    4e14:	de 01       	movw	r26, r28
    4e16:	af 5a       	subi	r26, 0xAF	; 175
    4e18:	be 4f       	sbci	r27, 0xFE	; 254
    4e1a:	fe 01       	movw	r30, r28
    4e1c:	ef 5a       	subi	r30, 0xAF	; 175
    4e1e:	fe 4f       	sbci	r31, 0xFE	; 254
    4e20:	80 81       	ld	r24, Z
    4e22:	8f 5f       	subi	r24, 0xFF	; 255
    4e24:	8c 93       	st	X, r24
    4e26:	fe 01       	movw	r30, r28
    4e28:	ef 5a       	subi	r30, 0xAF	; 175
    4e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e2c:	80 81       	ld	r24, Z
    4e2e:	84 30       	cpi	r24, 0x04	; 4
    4e30:	88 f2       	brcs	.-94     	; 0x4dd4 <main+0x24f2>
					}
					local_u8NewPass[i]=local_u8PressedKey;
					HLCD_voidSendString("*");
					local_u8PressedKey=0xff;
				}
				local_u8Pass[0]=local_u8NewPass[0];
    4e32:	fe 01       	movw	r30, r28
    4e34:	ec 59       	subi	r30, 0x9C	; 156
    4e36:	fe 4f       	sbci	r31, 0xFE	; 254
    4e38:	80 81       	ld	r24, Z
    4e3a:	80 93 be 02 	sts	0x02BE, r24
				local_u8Pass[1]=local_u8NewPass[1];
    4e3e:	fe 01       	movw	r30, r28
    4e40:	ec 59       	subi	r30, 0x9C	; 156
    4e42:	fe 4f       	sbci	r31, 0xFE	; 254
    4e44:	81 81       	ldd	r24, Z+1	; 0x01
    4e46:	80 93 bf 02 	sts	0x02BF, r24
				local_u8Pass[2]=local_u8NewPass[2];
    4e4a:	fe 01       	movw	r30, r28
    4e4c:	ec 59       	subi	r30, 0x9C	; 156
    4e4e:	fe 4f       	sbci	r31, 0xFE	; 254
    4e50:	82 81       	ldd	r24, Z+2	; 0x02
    4e52:	80 93 c0 02 	sts	0x02C0, r24
				local_u8Pass[3]=local_u8NewPass[3];
    4e56:	fe 01       	movw	r30, r28
    4e58:	ec 59       	subi	r30, 0x9C	; 156
    4e5a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e5c:	83 81       	ldd	r24, Z+3	; 0x03
    4e5e:	80 93 c1 02 	sts	0x02C1, r24

				HLCD_voidDisplayClear();
    4e62:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
				HLCD_voidSendString("Password Changed");
    4e66:	84 e4       	ldi	r24, 0x44	; 68
    4e68:	92 e0       	ldi	r25, 0x02	; 2
    4e6a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
				HLCD_voidGoToPosition(2,2);
    4e6e:	82 e0       	ldi	r24, 0x02	; 2
    4e70:	62 e0       	ldi	r22, 0x02	; 2
    4e72:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
				HLCD_voidSendString("Successfully");
    4e76:	85 e5       	ldi	r24, 0x55	; 85
    4e78:	92 e0       	ldi	r25, 0x02	; 2
    4e7a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    4e7e:	fe 01       	movw	r30, r28
    4e80:	ed 5b       	subi	r30, 0xBD	; 189
    4e82:	ff 4f       	sbci	r31, 0xFF	; 255
    4e84:	80 e0       	ldi	r24, 0x00	; 0
    4e86:	90 e0       	ldi	r25, 0x00	; 0
    4e88:	aa ef       	ldi	r26, 0xFA	; 250
    4e8a:	b4 e4       	ldi	r27, 0x44	; 68
    4e8c:	80 83       	st	Z, r24
    4e8e:	91 83       	std	Z+1, r25	; 0x01
    4e90:	a2 83       	std	Z+2, r26	; 0x02
    4e92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e94:	8e 01       	movw	r16, r28
    4e96:	01 5c       	subi	r16, 0xC1	; 193
    4e98:	1f 4f       	sbci	r17, 0xFF	; 255
    4e9a:	fe 01       	movw	r30, r28
    4e9c:	ed 5b       	subi	r30, 0xBD	; 189
    4e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea0:	60 81       	ld	r22, Z
    4ea2:	71 81       	ldd	r23, Z+1	; 0x01
    4ea4:	82 81       	ldd	r24, Z+2	; 0x02
    4ea6:	93 81       	ldd	r25, Z+3	; 0x03
    4ea8:	20 e0       	ldi	r18, 0x00	; 0
    4eaa:	30 e0       	ldi	r19, 0x00	; 0
    4eac:	4a ef       	ldi	r20, 0xFA	; 250
    4eae:	54 e4       	ldi	r21, 0x44	; 68
    4eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eb4:	dc 01       	movw	r26, r24
    4eb6:	cb 01       	movw	r24, r22
    4eb8:	f8 01       	movw	r30, r16
    4eba:	80 83       	st	Z, r24
    4ebc:	91 83       	std	Z+1, r25	; 0x01
    4ebe:	a2 83       	std	Z+2, r26	; 0x02
    4ec0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ec2:	fe 01       	movw	r30, r28
    4ec4:	ff 96       	adiw	r30, 0x3f	; 63
    4ec6:	60 81       	ld	r22, Z
    4ec8:	71 81       	ldd	r23, Z+1	; 0x01
    4eca:	82 81       	ldd	r24, Z+2	; 0x02
    4ecc:	93 81       	ldd	r25, Z+3	; 0x03
    4ece:	20 e0       	ldi	r18, 0x00	; 0
    4ed0:	30 e0       	ldi	r19, 0x00	; 0
    4ed2:	40 e8       	ldi	r20, 0x80	; 128
    4ed4:	5f e3       	ldi	r21, 0x3F	; 63
    4ed6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4eda:	88 23       	and	r24, r24
    4edc:	2c f4       	brge	.+10     	; 0x4ee8 <main+0x2606>
		__ticks = 1;
    4ede:	81 e0       	ldi	r24, 0x01	; 1
    4ee0:	90 e0       	ldi	r25, 0x00	; 0
    4ee2:	9e af       	std	Y+62, r25	; 0x3e
    4ee4:	8d af       	std	Y+61, r24	; 0x3d
    4ee6:	47 c0       	rjmp	.+142    	; 0x4f76 <main+0x2694>
	else if (__tmp > 65535)
    4ee8:	fe 01       	movw	r30, r28
    4eea:	ff 96       	adiw	r30, 0x3f	; 63
    4eec:	60 81       	ld	r22, Z
    4eee:	71 81       	ldd	r23, Z+1	; 0x01
    4ef0:	82 81       	ldd	r24, Z+2	; 0x02
    4ef2:	93 81       	ldd	r25, Z+3	; 0x03
    4ef4:	20 e0       	ldi	r18, 0x00	; 0
    4ef6:	3f ef       	ldi	r19, 0xFF	; 255
    4ef8:	4f e7       	ldi	r20, 0x7F	; 127
    4efa:	57 e4       	ldi	r21, 0x47	; 71
    4efc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f00:	18 16       	cp	r1, r24
    4f02:	6c f5       	brge	.+90     	; 0x4f5e <main+0x267c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f04:	fe 01       	movw	r30, r28
    4f06:	ed 5b       	subi	r30, 0xBD	; 189
    4f08:	ff 4f       	sbci	r31, 0xFF	; 255
    4f0a:	60 81       	ld	r22, Z
    4f0c:	71 81       	ldd	r23, Z+1	; 0x01
    4f0e:	82 81       	ldd	r24, Z+2	; 0x02
    4f10:	93 81       	ldd	r25, Z+3	; 0x03
    4f12:	20 e0       	ldi	r18, 0x00	; 0
    4f14:	30 e0       	ldi	r19, 0x00	; 0
    4f16:	40 e2       	ldi	r20, 0x20	; 32
    4f18:	51 e4       	ldi	r21, 0x41	; 65
    4f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f1e:	dc 01       	movw	r26, r24
    4f20:	cb 01       	movw	r24, r22
    4f22:	bc 01       	movw	r22, r24
    4f24:	cd 01       	movw	r24, r26
    4f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f2a:	dc 01       	movw	r26, r24
    4f2c:	cb 01       	movw	r24, r22
    4f2e:	9e af       	std	Y+62, r25	; 0x3e
    4f30:	8d af       	std	Y+61, r24	; 0x3d
    4f32:	0f c0       	rjmp	.+30     	; 0x4f52 <main+0x2670>
    4f34:	88 ec       	ldi	r24, 0xC8	; 200
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	9c af       	std	Y+60, r25	; 0x3c
    4f3a:	8b af       	std	Y+59, r24	; 0x3b
    4f3c:	8b ad       	ldd	r24, Y+59	; 0x3b
    4f3e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4f40:	01 97       	sbiw	r24, 0x01	; 1
    4f42:	f1 f7       	brne	.-4      	; 0x4f40 <main+0x265e>
    4f44:	9c af       	std	Y+60, r25	; 0x3c
    4f46:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f48:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f4c:	01 97       	sbiw	r24, 0x01	; 1
    4f4e:	9e af       	std	Y+62, r25	; 0x3e
    4f50:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f52:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f54:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f56:	00 97       	sbiw	r24, 0x00	; 0
    4f58:	69 f7       	brne	.-38     	; 0x4f34 <main+0x2652>
    4f5a:	0c 94 c6 14 	jmp	0x298c	; 0x298c <main+0xaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f5e:	fe 01       	movw	r30, r28
    4f60:	ff 96       	adiw	r30, 0x3f	; 63
    4f62:	60 81       	ld	r22, Z
    4f64:	71 81       	ldd	r23, Z+1	; 0x01
    4f66:	82 81       	ldd	r24, Z+2	; 0x02
    4f68:	93 81       	ldd	r25, Z+3	; 0x03
    4f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f6e:	dc 01       	movw	r26, r24
    4f70:	cb 01       	movw	r24, r22
    4f72:	9e af       	std	Y+62, r25	; 0x3e
    4f74:	8d af       	std	Y+61, r24	; 0x3d
    4f76:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f78:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f7a:	9a af       	std	Y+58, r25	; 0x3a
    4f7c:	89 af       	std	Y+57, r24	; 0x39
    4f7e:	89 ad       	ldd	r24, Y+57	; 0x39
    4f80:	9a ad       	ldd	r25, Y+58	; 0x3a
    4f82:	01 97       	sbiw	r24, 0x01	; 1
    4f84:	f1 f7       	brne	.-4      	; 0x4f82 <main+0x26a0>
    4f86:	9a af       	std	Y+58, r25	; 0x3a
    4f88:	89 af       	std	Y+57, r24	; 0x39
    4f8a:	0c 94 c6 14 	jmp	0x298c	; 0x298c <main+0xaa>
				_delay_ms(2000);
				break;
			}
			else
			{
				HLCD_voidDisplayClear();
    4f8e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
				HLCD_voidSendString("Wrong Password");
    4f92:	81 ed       	ldi	r24, 0xD1	; 209
    4f94:	91 e0       	ldi	r25, 0x01	; 1
    4f96:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
				HLCD_voidGoToPosition(2,3);
    4f9a:	82 e0       	ldi	r24, 0x02	; 2
    4f9c:	63 e0       	ldi	r22, 0x03	; 3
    4f9e:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
				HLCD_voidSendString("Try Again");
    4fa2:	8b e1       	ldi	r24, 0x1B	; 27
    4fa4:	91 e0       	ldi	r25, 0x01	; 1
    4fa6:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    4faa:	80 e0       	ldi	r24, 0x00	; 0
    4fac:	90 e0       	ldi	r25, 0x00	; 0
    4fae:	aa e7       	ldi	r26, 0x7A	; 122
    4fb0:	b4 e4       	ldi	r27, 0x44	; 68
    4fb2:	8d ab       	std	Y+53, r24	; 0x35
    4fb4:	9e ab       	std	Y+54, r25	; 0x36
    4fb6:	af ab       	std	Y+55, r26	; 0x37
    4fb8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fba:	6d a9       	ldd	r22, Y+53	; 0x35
    4fbc:	7e a9       	ldd	r23, Y+54	; 0x36
    4fbe:	8f a9       	ldd	r24, Y+55	; 0x37
    4fc0:	98 ad       	ldd	r25, Y+56	; 0x38
    4fc2:	20 e0       	ldi	r18, 0x00	; 0
    4fc4:	30 e0       	ldi	r19, 0x00	; 0
    4fc6:	4a ef       	ldi	r20, 0xFA	; 250
    4fc8:	54 e4       	ldi	r21, 0x44	; 68
    4fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fce:	dc 01       	movw	r26, r24
    4fd0:	cb 01       	movw	r24, r22
    4fd2:	89 ab       	std	Y+49, r24	; 0x31
    4fd4:	9a ab       	std	Y+50, r25	; 0x32
    4fd6:	ab ab       	std	Y+51, r26	; 0x33
    4fd8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4fda:	69 a9       	ldd	r22, Y+49	; 0x31
    4fdc:	7a a9       	ldd	r23, Y+50	; 0x32
    4fde:	8b a9       	ldd	r24, Y+51	; 0x33
    4fe0:	9c a9       	ldd	r25, Y+52	; 0x34
    4fe2:	20 e0       	ldi	r18, 0x00	; 0
    4fe4:	30 e0       	ldi	r19, 0x00	; 0
    4fe6:	40 e8       	ldi	r20, 0x80	; 128
    4fe8:	5f e3       	ldi	r21, 0x3F	; 63
    4fea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fee:	88 23       	and	r24, r24
    4ff0:	2c f4       	brge	.+10     	; 0x4ffc <main+0x271a>
		__ticks = 1;
    4ff2:	81 e0       	ldi	r24, 0x01	; 1
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	98 ab       	std	Y+48, r25	; 0x30
    4ff8:	8f a7       	std	Y+47, r24	; 0x2f
    4ffa:	3f c0       	rjmp	.+126    	; 0x507a <main+0x2798>
	else if (__tmp > 65535)
    4ffc:	69 a9       	ldd	r22, Y+49	; 0x31
    4ffe:	7a a9       	ldd	r23, Y+50	; 0x32
    5000:	8b a9       	ldd	r24, Y+51	; 0x33
    5002:	9c a9       	ldd	r25, Y+52	; 0x34
    5004:	20 e0       	ldi	r18, 0x00	; 0
    5006:	3f ef       	ldi	r19, 0xFF	; 255
    5008:	4f e7       	ldi	r20, 0x7F	; 127
    500a:	57 e4       	ldi	r21, 0x47	; 71
    500c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5010:	18 16       	cp	r1, r24
    5012:	4c f5       	brge	.+82     	; 0x5066 <main+0x2784>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5014:	6d a9       	ldd	r22, Y+53	; 0x35
    5016:	7e a9       	ldd	r23, Y+54	; 0x36
    5018:	8f a9       	ldd	r24, Y+55	; 0x37
    501a:	98 ad       	ldd	r25, Y+56	; 0x38
    501c:	20 e0       	ldi	r18, 0x00	; 0
    501e:	30 e0       	ldi	r19, 0x00	; 0
    5020:	40 e2       	ldi	r20, 0x20	; 32
    5022:	51 e4       	ldi	r21, 0x41	; 65
    5024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5028:	dc 01       	movw	r26, r24
    502a:	cb 01       	movw	r24, r22
    502c:	bc 01       	movw	r22, r24
    502e:	cd 01       	movw	r24, r26
    5030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5034:	dc 01       	movw	r26, r24
    5036:	cb 01       	movw	r24, r22
    5038:	98 ab       	std	Y+48, r25	; 0x30
    503a:	8f a7       	std	Y+47, r24	; 0x2f
    503c:	0f c0       	rjmp	.+30     	; 0x505c <main+0x277a>
    503e:	88 ec       	ldi	r24, 0xC8	; 200
    5040:	90 e0       	ldi	r25, 0x00	; 0
    5042:	9e a7       	std	Y+46, r25	; 0x2e
    5044:	8d a7       	std	Y+45, r24	; 0x2d
    5046:	8d a5       	ldd	r24, Y+45	; 0x2d
    5048:	9e a5       	ldd	r25, Y+46	; 0x2e
    504a:	01 97       	sbiw	r24, 0x01	; 1
    504c:	f1 f7       	brne	.-4      	; 0x504a <main+0x2768>
    504e:	9e a7       	std	Y+46, r25	; 0x2e
    5050:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5052:	8f a5       	ldd	r24, Y+47	; 0x2f
    5054:	98 a9       	ldd	r25, Y+48	; 0x30
    5056:	01 97       	sbiw	r24, 0x01	; 1
    5058:	98 ab       	std	Y+48, r25	; 0x30
    505a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    505c:	8f a5       	ldd	r24, Y+47	; 0x2f
    505e:	98 a9       	ldd	r25, Y+48	; 0x30
    5060:	00 97       	sbiw	r24, 0x00	; 0
    5062:	69 f7       	brne	.-38     	; 0x503e <main+0x275c>
    5064:	74 cd       	rjmp	.-1304   	; 0x4b4e <main+0x226c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5066:	69 a9       	ldd	r22, Y+49	; 0x31
    5068:	7a a9       	ldd	r23, Y+50	; 0x32
    506a:	8b a9       	ldd	r24, Y+51	; 0x33
    506c:	9c a9       	ldd	r25, Y+52	; 0x34
    506e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5072:	dc 01       	movw	r26, r24
    5074:	cb 01       	movw	r24, r22
    5076:	98 ab       	std	Y+48, r25	; 0x30
    5078:	8f a7       	std	Y+47, r24	; 0x2f
    507a:	8f a5       	ldd	r24, Y+47	; 0x2f
    507c:	98 a9       	ldd	r25, Y+48	; 0x30
    507e:	9c a7       	std	Y+44, r25	; 0x2c
    5080:	8b a7       	std	Y+43, r24	; 0x2b
    5082:	8b a5       	ldd	r24, Y+43	; 0x2b
    5084:	9c a5       	ldd	r25, Y+44	; 0x2c
    5086:	01 97       	sbiw	r24, 0x01	; 1
    5088:	f1 f7       	brne	.-4      	; 0x5086 <main+0x27a4>
    508a:	9c a7       	std	Y+44, r25	; 0x2c
    508c:	8b a7       	std	Y+43, r24	; 0x2b
    508e:	5f cd       	rjmp	.-1346   	; 0x4b4e <main+0x226c>
				_delay_ms(1000);
			}
			}
		}
		else if(local_u8PressedKey=='C')
    5090:	fe 01       	movw	r30, r28
    5092:	e6 5a       	subi	r30, 0xA6	; 166
    5094:	fe 4f       	sbci	r31, 0xFE	; 254
    5096:	80 81       	ld	r24, Z
    5098:	83 34       	cpi	r24, 0x43	; 67
    509a:	39 f4       	brne	.+14     	; 0x50aa <main+0x27c8>
		{
			local_u8PressedKey=0xff;
    509c:	fe 01       	movw	r30, r28
    509e:	e6 5a       	subi	r30, 0xA6	; 166
    50a0:	fe 4f       	sbci	r31, 0xFE	; 254
    50a2:	8f ef       	ldi	r24, 0xFF	; 255
    50a4:	80 83       	st	Z, r24
    50a6:	0c 94 b6 14 	jmp	0x296c	; 0x296c <main+0x8a>
			break;
		}
		else
		{
			local_u8PressedKey=0xff;
    50aa:	fe 01       	movw	r30, r28
    50ac:	e6 5a       	subi	r30, 0xA6	; 166
    50ae:	fe 4f       	sbci	r31, 0xFE	; 254
    50b0:	8f ef       	ldi	r24, 0xFF	; 255
    50b2:	80 83       	st	Z, r24
			HLCD_voidDisplayClear();
    50b4:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
			HLCD_voidSendString("Invalid Input");
    50b8:	82 e6       	ldi	r24, 0x62	; 98
    50ba:	92 e0       	ldi	r25, 0x02	; 2
    50bc:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    50c0:	80 e0       	ldi	r24, 0x00	; 0
    50c2:	90 e0       	ldi	r25, 0x00	; 0
    50c4:	aa e7       	ldi	r26, 0x7A	; 122
    50c6:	b4 e4       	ldi	r27, 0x44	; 68
    50c8:	8f a3       	std	Y+39, r24	; 0x27
    50ca:	98 a7       	std	Y+40, r25	; 0x28
    50cc:	a9 a7       	std	Y+41, r26	; 0x29
    50ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50d0:	6f a1       	ldd	r22, Y+39	; 0x27
    50d2:	78 a5       	ldd	r23, Y+40	; 0x28
    50d4:	89 a5       	ldd	r24, Y+41	; 0x29
    50d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    50d8:	20 e0       	ldi	r18, 0x00	; 0
    50da:	30 e0       	ldi	r19, 0x00	; 0
    50dc:	4a ef       	ldi	r20, 0xFA	; 250
    50de:	54 e4       	ldi	r21, 0x44	; 68
    50e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50e4:	dc 01       	movw	r26, r24
    50e6:	cb 01       	movw	r24, r22
    50e8:	8b a3       	std	Y+35, r24	; 0x23
    50ea:	9c a3       	std	Y+36, r25	; 0x24
    50ec:	ad a3       	std	Y+37, r26	; 0x25
    50ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    50f0:	6b a1       	ldd	r22, Y+35	; 0x23
    50f2:	7c a1       	ldd	r23, Y+36	; 0x24
    50f4:	8d a1       	ldd	r24, Y+37	; 0x25
    50f6:	9e a1       	ldd	r25, Y+38	; 0x26
    50f8:	20 e0       	ldi	r18, 0x00	; 0
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	40 e8       	ldi	r20, 0x80	; 128
    50fe:	5f e3       	ldi	r21, 0x3F	; 63
    5100:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5104:	88 23       	and	r24, r24
    5106:	2c f4       	brge	.+10     	; 0x5112 <main+0x2830>
		__ticks = 1;
    5108:	81 e0       	ldi	r24, 0x01	; 1
    510a:	90 e0       	ldi	r25, 0x00	; 0
    510c:	9a a3       	std	Y+34, r25	; 0x22
    510e:	89 a3       	std	Y+33, r24	; 0x21
    5110:	3f c0       	rjmp	.+126    	; 0x5190 <main+0x28ae>
	else if (__tmp > 65535)
    5112:	6b a1       	ldd	r22, Y+35	; 0x23
    5114:	7c a1       	ldd	r23, Y+36	; 0x24
    5116:	8d a1       	ldd	r24, Y+37	; 0x25
    5118:	9e a1       	ldd	r25, Y+38	; 0x26
    511a:	20 e0       	ldi	r18, 0x00	; 0
    511c:	3f ef       	ldi	r19, 0xFF	; 255
    511e:	4f e7       	ldi	r20, 0x7F	; 127
    5120:	57 e4       	ldi	r21, 0x47	; 71
    5122:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5126:	18 16       	cp	r1, r24
    5128:	4c f5       	brge	.+82     	; 0x517c <main+0x289a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    512a:	6f a1       	ldd	r22, Y+39	; 0x27
    512c:	78 a5       	ldd	r23, Y+40	; 0x28
    512e:	89 a5       	ldd	r24, Y+41	; 0x29
    5130:	9a a5       	ldd	r25, Y+42	; 0x2a
    5132:	20 e0       	ldi	r18, 0x00	; 0
    5134:	30 e0       	ldi	r19, 0x00	; 0
    5136:	40 e2       	ldi	r20, 0x20	; 32
    5138:	51 e4       	ldi	r21, 0x41	; 65
    513a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    513e:	dc 01       	movw	r26, r24
    5140:	cb 01       	movw	r24, r22
    5142:	bc 01       	movw	r22, r24
    5144:	cd 01       	movw	r24, r26
    5146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    514a:	dc 01       	movw	r26, r24
    514c:	cb 01       	movw	r24, r22
    514e:	9a a3       	std	Y+34, r25	; 0x22
    5150:	89 a3       	std	Y+33, r24	; 0x21
    5152:	0f c0       	rjmp	.+30     	; 0x5172 <main+0x2890>
    5154:	88 ec       	ldi	r24, 0xC8	; 200
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	98 a3       	std	Y+32, r25	; 0x20
    515a:	8f 8f       	std	Y+31, r24	; 0x1f
    515c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    515e:	98 a1       	ldd	r25, Y+32	; 0x20
    5160:	01 97       	sbiw	r24, 0x01	; 1
    5162:	f1 f7       	brne	.-4      	; 0x5160 <main+0x287e>
    5164:	98 a3       	std	Y+32, r25	; 0x20
    5166:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5168:	89 a1       	ldd	r24, Y+33	; 0x21
    516a:	9a a1       	ldd	r25, Y+34	; 0x22
    516c:	01 97       	sbiw	r24, 0x01	; 1
    516e:	9a a3       	std	Y+34, r25	; 0x22
    5170:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5172:	89 a1       	ldd	r24, Y+33	; 0x21
    5174:	9a a1       	ldd	r25, Y+34	; 0x22
    5176:	00 97       	sbiw	r24, 0x00	; 0
    5178:	69 f7       	brne	.-38     	; 0x5154 <main+0x2872>
    517a:	14 c0       	rjmp	.+40     	; 0x51a4 <main+0x28c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    517c:	6b a1       	ldd	r22, Y+35	; 0x23
    517e:	7c a1       	ldd	r23, Y+36	; 0x24
    5180:	8d a1       	ldd	r24, Y+37	; 0x25
    5182:	9e a1       	ldd	r25, Y+38	; 0x26
    5184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5188:	dc 01       	movw	r26, r24
    518a:	cb 01       	movw	r24, r22
    518c:	9a a3       	std	Y+34, r25	; 0x22
    518e:	89 a3       	std	Y+33, r24	; 0x21
    5190:	89 a1       	ldd	r24, Y+33	; 0x21
    5192:	9a a1       	ldd	r25, Y+34	; 0x22
    5194:	9e 8f       	std	Y+30, r25	; 0x1e
    5196:	8d 8f       	std	Y+29, r24	; 0x1d
    5198:	8d 8d       	ldd	r24, Y+29	; 0x1d
    519a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    519c:	01 97       	sbiw	r24, 0x01	; 1
    519e:	f1 f7       	brne	.-4      	; 0x519c <main+0x28ba>
    51a0:	9e 8f       	std	Y+30, r25	; 0x1e
    51a2:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			HLCD_voidDisplayClear();
    51a4:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
			HLCD_voidSendString("Try Carefully");
    51a8:	80 e7       	ldi	r24, 0x70	; 112
    51aa:	92 e0       	ldi	r25, 0x02	; 2
    51ac:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    51b0:	80 e0       	ldi	r24, 0x00	; 0
    51b2:	90 e0       	ldi	r25, 0x00	; 0
    51b4:	aa e7       	ldi	r26, 0x7A	; 122
    51b6:	b4 e4       	ldi	r27, 0x44	; 68
    51b8:	89 8f       	std	Y+25, r24	; 0x19
    51ba:	9a 8f       	std	Y+26, r25	; 0x1a
    51bc:	ab 8f       	std	Y+27, r26	; 0x1b
    51be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51c0:	69 8d       	ldd	r22, Y+25	; 0x19
    51c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51c8:	20 e0       	ldi	r18, 0x00	; 0
    51ca:	30 e0       	ldi	r19, 0x00	; 0
    51cc:	4a ef       	ldi	r20, 0xFA	; 250
    51ce:	54 e4       	ldi	r21, 0x44	; 68
    51d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51d4:	dc 01       	movw	r26, r24
    51d6:	cb 01       	movw	r24, r22
    51d8:	8d 8b       	std	Y+21, r24	; 0x15
    51da:	9e 8b       	std	Y+22, r25	; 0x16
    51dc:	af 8b       	std	Y+23, r26	; 0x17
    51de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    51e0:	6d 89       	ldd	r22, Y+21	; 0x15
    51e2:	7e 89       	ldd	r23, Y+22	; 0x16
    51e4:	8f 89       	ldd	r24, Y+23	; 0x17
    51e6:	98 8d       	ldd	r25, Y+24	; 0x18
    51e8:	20 e0       	ldi	r18, 0x00	; 0
    51ea:	30 e0       	ldi	r19, 0x00	; 0
    51ec:	40 e8       	ldi	r20, 0x80	; 128
    51ee:	5f e3       	ldi	r21, 0x3F	; 63
    51f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51f4:	88 23       	and	r24, r24
    51f6:	2c f4       	brge	.+10     	; 0x5202 <main+0x2920>
		__ticks = 1;
    51f8:	81 e0       	ldi	r24, 0x01	; 1
    51fa:	90 e0       	ldi	r25, 0x00	; 0
    51fc:	9c 8b       	std	Y+20, r25	; 0x14
    51fe:	8b 8b       	std	Y+19, r24	; 0x13
    5200:	40 c0       	rjmp	.+128    	; 0x5282 <main+0x29a0>
	else if (__tmp > 65535)
    5202:	6d 89       	ldd	r22, Y+21	; 0x15
    5204:	7e 89       	ldd	r23, Y+22	; 0x16
    5206:	8f 89       	ldd	r24, Y+23	; 0x17
    5208:	98 8d       	ldd	r25, Y+24	; 0x18
    520a:	20 e0       	ldi	r18, 0x00	; 0
    520c:	3f ef       	ldi	r19, 0xFF	; 255
    520e:	4f e7       	ldi	r20, 0x7F	; 127
    5210:	57 e4       	ldi	r21, 0x47	; 71
    5212:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5216:	18 16       	cp	r1, r24
    5218:	54 f5       	brge	.+84     	; 0x526e <main+0x298c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    521a:	69 8d       	ldd	r22, Y+25	; 0x19
    521c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    521e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5220:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5222:	20 e0       	ldi	r18, 0x00	; 0
    5224:	30 e0       	ldi	r19, 0x00	; 0
    5226:	40 e2       	ldi	r20, 0x20	; 32
    5228:	51 e4       	ldi	r21, 0x41	; 65
    522a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    522e:	dc 01       	movw	r26, r24
    5230:	cb 01       	movw	r24, r22
    5232:	bc 01       	movw	r22, r24
    5234:	cd 01       	movw	r24, r26
    5236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    523a:	dc 01       	movw	r26, r24
    523c:	cb 01       	movw	r24, r22
    523e:	9c 8b       	std	Y+20, r25	; 0x14
    5240:	8b 8b       	std	Y+19, r24	; 0x13
    5242:	0f c0       	rjmp	.+30     	; 0x5262 <main+0x2980>
    5244:	88 ec       	ldi	r24, 0xC8	; 200
    5246:	90 e0       	ldi	r25, 0x00	; 0
    5248:	9a 8b       	std	Y+18, r25	; 0x12
    524a:	89 8b       	std	Y+17, r24	; 0x11
    524c:	89 89       	ldd	r24, Y+17	; 0x11
    524e:	9a 89       	ldd	r25, Y+18	; 0x12
    5250:	01 97       	sbiw	r24, 0x01	; 1
    5252:	f1 f7       	brne	.-4      	; 0x5250 <main+0x296e>
    5254:	9a 8b       	std	Y+18, r25	; 0x12
    5256:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5258:	8b 89       	ldd	r24, Y+19	; 0x13
    525a:	9c 89       	ldd	r25, Y+20	; 0x14
    525c:	01 97       	sbiw	r24, 0x01	; 1
    525e:	9c 8b       	std	Y+20, r25	; 0x14
    5260:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5262:	8b 89       	ldd	r24, Y+19	; 0x13
    5264:	9c 89       	ldd	r25, Y+20	; 0x14
    5266:	00 97       	sbiw	r24, 0x00	; 0
    5268:	69 f7       	brne	.-38     	; 0x5244 <main+0x2962>
    526a:	0c 94 c6 14 	jmp	0x298c	; 0x298c <main+0xaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    526e:	6d 89       	ldd	r22, Y+21	; 0x15
    5270:	7e 89       	ldd	r23, Y+22	; 0x16
    5272:	8f 89       	ldd	r24, Y+23	; 0x17
    5274:	98 8d       	ldd	r25, Y+24	; 0x18
    5276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    527a:	dc 01       	movw	r26, r24
    527c:	cb 01       	movw	r24, r22
    527e:	9c 8b       	std	Y+20, r25	; 0x14
    5280:	8b 8b       	std	Y+19, r24	; 0x13
    5282:	8b 89       	ldd	r24, Y+19	; 0x13
    5284:	9c 89       	ldd	r25, Y+20	; 0x14
    5286:	98 8b       	std	Y+16, r25	; 0x10
    5288:	8f 87       	std	Y+15, r24	; 0x0f
    528a:	8f 85       	ldd	r24, Y+15	; 0x0f
    528c:	98 89       	ldd	r25, Y+16	; 0x10
    528e:	01 97       	sbiw	r24, 0x01	; 1
    5290:	f1 f7       	brne	.-4      	; 0x528e <main+0x29ac>
    5292:	98 8b       	std	Y+16, r25	; 0x10
    5294:	8f 87       	std	Y+15, r24	; 0x0f
    5296:	0c 94 c6 14 	jmp	0x298c	; 0x298c <main+0xaa>

	else
	{
		while(1)
		{
			local_u8PinValue=MDIO_voidGetPinValue(DIO_PORTA,PIN7);
    529a:	80 e0       	ldi	r24, 0x00	; 0
    529c:	67 e0       	ldi	r22, 0x07	; 7
    529e:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    52a2:	fe 01       	movw	r30, r28
    52a4:	e5 5a       	subi	r30, 0xA5	; 165
    52a6:	fe 4f       	sbci	r31, 0xFE	; 254
    52a8:	80 83       	st	Z, r24
			if(local_u8PinValue==KEY_PRESSED)
    52aa:	fe 01       	movw	r30, r28
    52ac:	e5 5a       	subi	r30, 0xA5	; 165
    52ae:	fe 4f       	sbci	r31, 0xFE	; 254
    52b0:	80 81       	ld	r24, Z
    52b2:	88 23       	and	r24, r24
    52b4:	11 f4       	brne	.+4      	; 0x52ba <main+0x29d8>
    52b6:	0c 94 b6 14 	jmp	0x296c	; 0x296c <main+0x8a>
			{
				break;
			}
			HLCD_voidDisplayClear();
    52ba:	0e 94 6e 11 	call	0x22dc	; 0x22dc <HLCD_voidDisplayClear>
			HLCD_voidSendString("Temperature:");
    52be:	8e e7       	ldi	r24, 0x7E	; 126
    52c0:	92 e0       	ldi	r25, 0x02	; 2
    52c2:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>

			local_u16DigitalValue=MADC_u16GetDigitalValue(ADC0);
    52c6:	80 e0       	ldi	r24, 0x00	; 0
    52c8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <MADC_u16GetDigitalValue>
    52cc:	fe 01       	movw	r30, r28
    52ce:	e9 5a       	subi	r30, 0xA9	; 169
    52d0:	fe 4f       	sbci	r31, 0xFE	; 254
    52d2:	91 83       	std	Z+1, r25	; 0x01
    52d4:	80 83       	st	Z, r24
			local_u16AnalogValue=(local_u16DigitalValue*500UL)/1024;
    52d6:	fe 01       	movw	r30, r28
    52d8:	e9 5a       	subi	r30, 0xA9	; 169
    52da:	fe 4f       	sbci	r31, 0xFE	; 254
    52dc:	80 81       	ld	r24, Z
    52de:	91 81       	ldd	r25, Z+1	; 0x01
    52e0:	cc 01       	movw	r24, r24
    52e2:	a0 e0       	ldi	r26, 0x00	; 0
    52e4:	b0 e0       	ldi	r27, 0x00	; 0
    52e6:	24 ef       	ldi	r18, 0xF4	; 244
    52e8:	31 e0       	ldi	r19, 0x01	; 1
    52ea:	40 e0       	ldi	r20, 0x00	; 0
    52ec:	50 e0       	ldi	r21, 0x00	; 0
    52ee:	bc 01       	movw	r22, r24
    52f0:	cd 01       	movw	r24, r26
    52f2:	0e 94 49 2a 	call	0x5492	; 0x5492 <__mulsi3>
    52f6:	dc 01       	movw	r26, r24
    52f8:	cb 01       	movw	r24, r22
    52fa:	07 2e       	mov	r0, r23
    52fc:	7a e0       	ldi	r23, 0x0A	; 10
    52fe:	b6 95       	lsr	r27
    5300:	a7 95       	ror	r26
    5302:	97 95       	ror	r25
    5304:	87 95       	ror	r24
    5306:	7a 95       	dec	r23
    5308:	d1 f7       	brne	.-12     	; 0x52fe <main+0x2a1c>
    530a:	70 2d       	mov	r23, r0
    530c:	fe 01       	movw	r30, r28
    530e:	eb 5a       	subi	r30, 0xAB	; 171
    5310:	fe 4f       	sbci	r31, 0xFE	; 254
    5312:	91 83       	std	Z+1, r25	; 0x01
    5314:	80 83       	st	Z, r24
			HLCD_voidGoToPosition(1,13);
    5316:	81 e0       	ldi	r24, 0x01	; 1
    5318:	6d e0       	ldi	r22, 0x0D	; 13
    531a:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
			HLCD_voidDisplayNumber(local_u16AnalogValue);
    531e:	fe 01       	movw	r30, r28
    5320:	eb 5a       	subi	r30, 0xAB	; 171
    5322:	fe 4f       	sbci	r31, 0xFE	; 254
    5324:	80 81       	ld	r24, Z
    5326:	91 81       	ldd	r25, Z+1	; 0x01
    5328:	0e 94 3b 12 	call	0x2476	; 0x2476 <HLCD_voidDisplayNumber>
			HLCD_voidGoToPosition(1,16);
    532c:	81 e0       	ldi	r24, 0x01	; 1
    532e:	60 e1       	ldi	r22, 0x10	; 16
    5330:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
			HLCD_voidSendString("C");
    5334:	8b e8       	ldi	r24, 0x8B	; 139
    5336:	92 e0       	ldi	r25, 0x02	; 2
    5338:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>

			HLCD_voidGoToPosition(2,1);
    533c:	82 e0       	ldi	r24, 0x02	; 2
    533e:	61 e0       	ldi	r22, 0x01	; 1
    5340:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
			HLCD_voidSendString("Light:");
    5344:	8d e8       	ldi	r24, 0x8D	; 141
    5346:	92 e0       	ldi	r25, 0x02	; 2
    5348:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>

			local_u16DigitalValue=MADC_u16GetDigitalValue(ADC1);
    534c:	81 e0       	ldi	r24, 0x01	; 1
    534e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <MADC_u16GetDigitalValue>
    5352:	fe 01       	movw	r30, r28
    5354:	e9 5a       	subi	r30, 0xA9	; 169
    5356:	fe 4f       	sbci	r31, 0xFE	; 254
    5358:	91 83       	std	Z+1, r25	; 0x01
    535a:	80 83       	st	Z, r24
			local_u16AnalogValue=(local_u16DigitalValue*5)/1024;
    535c:	fe 01       	movw	r30, r28
    535e:	e9 5a       	subi	r30, 0xA9	; 169
    5360:	fe 4f       	sbci	r31, 0xFE	; 254
    5362:	20 81       	ld	r18, Z
    5364:	31 81       	ldd	r19, Z+1	; 0x01
    5366:	c9 01       	movw	r24, r18
    5368:	88 0f       	add	r24, r24
    536a:	99 1f       	adc	r25, r25
    536c:	88 0f       	add	r24, r24
    536e:	99 1f       	adc	r25, r25
    5370:	82 0f       	add	r24, r18
    5372:	93 1f       	adc	r25, r19
    5374:	fe 01       	movw	r30, r28
    5376:	eb 5a       	subi	r30, 0xAB	; 171
    5378:	fe 4f       	sbci	r31, 0xFE	; 254
    537a:	89 2f       	mov	r24, r25
    537c:	99 27       	eor	r25, r25
    537e:	86 95       	lsr	r24
    5380:	86 95       	lsr	r24
    5382:	91 83       	std	Z+1, r25	; 0x01
    5384:	80 83       	st	Z, r24
			HLCD_voidGoToPosition(2,8);
    5386:	82 e0       	ldi	r24, 0x02	; 2
    5388:	68 e0       	ldi	r22, 0x08	; 8
    538a:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
			HLCD_voidDisplayNumber(local_u16AnalogValue);
    538e:	fe 01       	movw	r30, r28
    5390:	eb 5a       	subi	r30, 0xAB	; 171
    5392:	fe 4f       	sbci	r31, 0xFE	; 254
    5394:	80 81       	ld	r24, Z
    5396:	91 81       	ldd	r25, Z+1	; 0x01
    5398:	0e 94 3b 12 	call	0x2476	; 0x2476 <HLCD_voidDisplayNumber>
			HLCD_voidGoToPosition(2,10);
    539c:	82 e0       	ldi	r24, 0x02	; 2
    539e:	6a e0       	ldi	r22, 0x0A	; 10
    53a0:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
			HLCD_voidSendString("Volt");
    53a4:	84 e9       	ldi	r24, 0x94	; 148
    53a6:	92 e0       	ldi	r25, 0x02	; 2
    53a8:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HLCD_voidSendString>
    53ac:	80 e0       	ldi	r24, 0x00	; 0
    53ae:	90 e0       	ldi	r25, 0x00	; 0
    53b0:	aa e7       	ldi	r26, 0x7A	; 122
    53b2:	b4 e4       	ldi	r27, 0x44	; 68
    53b4:	8b 87       	std	Y+11, r24	; 0x0b
    53b6:	9c 87       	std	Y+12, r25	; 0x0c
    53b8:	ad 87       	std	Y+13, r26	; 0x0d
    53ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    53be:	7c 85       	ldd	r23, Y+12	; 0x0c
    53c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    53c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    53c4:	20 e0       	ldi	r18, 0x00	; 0
    53c6:	30 e0       	ldi	r19, 0x00	; 0
    53c8:	4a ef       	ldi	r20, 0xFA	; 250
    53ca:	54 e4       	ldi	r21, 0x44	; 68
    53cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53d0:	dc 01       	movw	r26, r24
    53d2:	cb 01       	movw	r24, r22
    53d4:	8f 83       	std	Y+7, r24	; 0x07
    53d6:	98 87       	std	Y+8, r25	; 0x08
    53d8:	a9 87       	std	Y+9, r26	; 0x09
    53da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    53dc:	6f 81       	ldd	r22, Y+7	; 0x07
    53de:	78 85       	ldd	r23, Y+8	; 0x08
    53e0:	89 85       	ldd	r24, Y+9	; 0x09
    53e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    53e4:	20 e0       	ldi	r18, 0x00	; 0
    53e6:	30 e0       	ldi	r19, 0x00	; 0
    53e8:	40 e8       	ldi	r20, 0x80	; 128
    53ea:	5f e3       	ldi	r21, 0x3F	; 63
    53ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53f0:	88 23       	and	r24, r24
    53f2:	2c f4       	brge	.+10     	; 0x53fe <main+0x2b1c>
		__ticks = 1;
    53f4:	81 e0       	ldi	r24, 0x01	; 1
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	9e 83       	std	Y+6, r25	; 0x06
    53fa:	8d 83       	std	Y+5, r24	; 0x05
    53fc:	3f c0       	rjmp	.+126    	; 0x547c <main+0x2b9a>
	else if (__tmp > 65535)
    53fe:	6f 81       	ldd	r22, Y+7	; 0x07
    5400:	78 85       	ldd	r23, Y+8	; 0x08
    5402:	89 85       	ldd	r24, Y+9	; 0x09
    5404:	9a 85       	ldd	r25, Y+10	; 0x0a
    5406:	20 e0       	ldi	r18, 0x00	; 0
    5408:	3f ef       	ldi	r19, 0xFF	; 255
    540a:	4f e7       	ldi	r20, 0x7F	; 127
    540c:	57 e4       	ldi	r21, 0x47	; 71
    540e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5412:	18 16       	cp	r1, r24
    5414:	4c f5       	brge	.+82     	; 0x5468 <main+0x2b86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5416:	6b 85       	ldd	r22, Y+11	; 0x0b
    5418:	7c 85       	ldd	r23, Y+12	; 0x0c
    541a:	8d 85       	ldd	r24, Y+13	; 0x0d
    541c:	9e 85       	ldd	r25, Y+14	; 0x0e
    541e:	20 e0       	ldi	r18, 0x00	; 0
    5420:	30 e0       	ldi	r19, 0x00	; 0
    5422:	40 e2       	ldi	r20, 0x20	; 32
    5424:	51 e4       	ldi	r21, 0x41	; 65
    5426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    542a:	dc 01       	movw	r26, r24
    542c:	cb 01       	movw	r24, r22
    542e:	bc 01       	movw	r22, r24
    5430:	cd 01       	movw	r24, r26
    5432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5436:	dc 01       	movw	r26, r24
    5438:	cb 01       	movw	r24, r22
    543a:	9e 83       	std	Y+6, r25	; 0x06
    543c:	8d 83       	std	Y+5, r24	; 0x05
    543e:	0f c0       	rjmp	.+30     	; 0x545e <main+0x2b7c>
    5440:	88 ec       	ldi	r24, 0xC8	; 200
    5442:	90 e0       	ldi	r25, 0x00	; 0
    5444:	9c 83       	std	Y+4, r25	; 0x04
    5446:	8b 83       	std	Y+3, r24	; 0x03
    5448:	8b 81       	ldd	r24, Y+3	; 0x03
    544a:	9c 81       	ldd	r25, Y+4	; 0x04
    544c:	01 97       	sbiw	r24, 0x01	; 1
    544e:	f1 f7       	brne	.-4      	; 0x544c <main+0x2b6a>
    5450:	9c 83       	std	Y+4, r25	; 0x04
    5452:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5454:	8d 81       	ldd	r24, Y+5	; 0x05
    5456:	9e 81       	ldd	r25, Y+6	; 0x06
    5458:	01 97       	sbiw	r24, 0x01	; 1
    545a:	9e 83       	std	Y+6, r25	; 0x06
    545c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    545e:	8d 81       	ldd	r24, Y+5	; 0x05
    5460:	9e 81       	ldd	r25, Y+6	; 0x06
    5462:	00 97       	sbiw	r24, 0x00	; 0
    5464:	69 f7       	brne	.-38     	; 0x5440 <main+0x2b5e>
    5466:	19 cf       	rjmp	.-462    	; 0x529a <main+0x29b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5468:	6f 81       	ldd	r22, Y+7	; 0x07
    546a:	78 85       	ldd	r23, Y+8	; 0x08
    546c:	89 85       	ldd	r24, Y+9	; 0x09
    546e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5474:	dc 01       	movw	r26, r24
    5476:	cb 01       	movw	r24, r22
    5478:	9e 83       	std	Y+6, r25	; 0x06
    547a:	8d 83       	std	Y+5, r24	; 0x05
    547c:	8d 81       	ldd	r24, Y+5	; 0x05
    547e:	9e 81       	ldd	r25, Y+6	; 0x06
    5480:	9a 83       	std	Y+2, r25	; 0x02
    5482:	89 83       	std	Y+1, r24	; 0x01
    5484:	89 81       	ldd	r24, Y+1	; 0x01
    5486:	9a 81       	ldd	r25, Y+2	; 0x02
    5488:	01 97       	sbiw	r24, 0x01	; 1
    548a:	f1 f7       	brne	.-4      	; 0x5488 <main+0x2ba6>
    548c:	9a 83       	std	Y+2, r25	; 0x02
    548e:	89 83       	std	Y+1, r24	; 0x01
    5490:	04 cf       	rjmp	.-504    	; 0x529a <main+0x29b8>

00005492 <__mulsi3>:
    5492:	62 9f       	mul	r22, r18
    5494:	d0 01       	movw	r26, r0
    5496:	73 9f       	mul	r23, r19
    5498:	f0 01       	movw	r30, r0
    549a:	82 9f       	mul	r24, r18
    549c:	e0 0d       	add	r30, r0
    549e:	f1 1d       	adc	r31, r1
    54a0:	64 9f       	mul	r22, r20
    54a2:	e0 0d       	add	r30, r0
    54a4:	f1 1d       	adc	r31, r1
    54a6:	92 9f       	mul	r25, r18
    54a8:	f0 0d       	add	r31, r0
    54aa:	83 9f       	mul	r24, r19
    54ac:	f0 0d       	add	r31, r0
    54ae:	74 9f       	mul	r23, r20
    54b0:	f0 0d       	add	r31, r0
    54b2:	65 9f       	mul	r22, r21
    54b4:	f0 0d       	add	r31, r0
    54b6:	99 27       	eor	r25, r25
    54b8:	72 9f       	mul	r23, r18
    54ba:	b0 0d       	add	r27, r0
    54bc:	e1 1d       	adc	r30, r1
    54be:	f9 1f       	adc	r31, r25
    54c0:	63 9f       	mul	r22, r19
    54c2:	b0 0d       	add	r27, r0
    54c4:	e1 1d       	adc	r30, r1
    54c6:	f9 1f       	adc	r31, r25
    54c8:	bd 01       	movw	r22, r26
    54ca:	cf 01       	movw	r24, r30
    54cc:	11 24       	eor	r1, r1
    54ce:	08 95       	ret

000054d0 <__udivmodhi4>:
    54d0:	aa 1b       	sub	r26, r26
    54d2:	bb 1b       	sub	r27, r27
    54d4:	51 e1       	ldi	r21, 0x11	; 17
    54d6:	07 c0       	rjmp	.+14     	; 0x54e6 <__udivmodhi4_ep>

000054d8 <__udivmodhi4_loop>:
    54d8:	aa 1f       	adc	r26, r26
    54da:	bb 1f       	adc	r27, r27
    54dc:	a6 17       	cp	r26, r22
    54de:	b7 07       	cpc	r27, r23
    54e0:	10 f0       	brcs	.+4      	; 0x54e6 <__udivmodhi4_ep>
    54e2:	a6 1b       	sub	r26, r22
    54e4:	b7 0b       	sbc	r27, r23

000054e6 <__udivmodhi4_ep>:
    54e6:	88 1f       	adc	r24, r24
    54e8:	99 1f       	adc	r25, r25
    54ea:	5a 95       	dec	r21
    54ec:	a9 f7       	brne	.-22     	; 0x54d8 <__udivmodhi4_loop>
    54ee:	80 95       	com	r24
    54f0:	90 95       	com	r25
    54f2:	bc 01       	movw	r22, r24
    54f4:	cd 01       	movw	r24, r26
    54f6:	08 95       	ret

000054f8 <__udivmodsi4>:
    54f8:	a1 e2       	ldi	r26, 0x21	; 33
    54fa:	1a 2e       	mov	r1, r26
    54fc:	aa 1b       	sub	r26, r26
    54fe:	bb 1b       	sub	r27, r27
    5500:	fd 01       	movw	r30, r26
    5502:	0d c0       	rjmp	.+26     	; 0x551e <__udivmodsi4_ep>

00005504 <__udivmodsi4_loop>:
    5504:	aa 1f       	adc	r26, r26
    5506:	bb 1f       	adc	r27, r27
    5508:	ee 1f       	adc	r30, r30
    550a:	ff 1f       	adc	r31, r31
    550c:	a2 17       	cp	r26, r18
    550e:	b3 07       	cpc	r27, r19
    5510:	e4 07       	cpc	r30, r20
    5512:	f5 07       	cpc	r31, r21
    5514:	20 f0       	brcs	.+8      	; 0x551e <__udivmodsi4_ep>
    5516:	a2 1b       	sub	r26, r18
    5518:	b3 0b       	sbc	r27, r19
    551a:	e4 0b       	sbc	r30, r20
    551c:	f5 0b       	sbc	r31, r21

0000551e <__udivmodsi4_ep>:
    551e:	66 1f       	adc	r22, r22
    5520:	77 1f       	adc	r23, r23
    5522:	88 1f       	adc	r24, r24
    5524:	99 1f       	adc	r25, r25
    5526:	1a 94       	dec	r1
    5528:	69 f7       	brne	.-38     	; 0x5504 <__udivmodsi4_loop>
    552a:	60 95       	com	r22
    552c:	70 95       	com	r23
    552e:	80 95       	com	r24
    5530:	90 95       	com	r25
    5532:	9b 01       	movw	r18, r22
    5534:	ac 01       	movw	r20, r24
    5536:	bd 01       	movw	r22, r26
    5538:	cf 01       	movw	r24, r30
    553a:	08 95       	ret

0000553c <__prologue_saves__>:
    553c:	2f 92       	push	r2
    553e:	3f 92       	push	r3
    5540:	4f 92       	push	r4
    5542:	5f 92       	push	r5
    5544:	6f 92       	push	r6
    5546:	7f 92       	push	r7
    5548:	8f 92       	push	r8
    554a:	9f 92       	push	r9
    554c:	af 92       	push	r10
    554e:	bf 92       	push	r11
    5550:	cf 92       	push	r12
    5552:	df 92       	push	r13
    5554:	ef 92       	push	r14
    5556:	ff 92       	push	r15
    5558:	0f 93       	push	r16
    555a:	1f 93       	push	r17
    555c:	cf 93       	push	r28
    555e:	df 93       	push	r29
    5560:	cd b7       	in	r28, 0x3d	; 61
    5562:	de b7       	in	r29, 0x3e	; 62
    5564:	ca 1b       	sub	r28, r26
    5566:	db 0b       	sbc	r29, r27
    5568:	0f b6       	in	r0, 0x3f	; 63
    556a:	f8 94       	cli
    556c:	de bf       	out	0x3e, r29	; 62
    556e:	0f be       	out	0x3f, r0	; 63
    5570:	cd bf       	out	0x3d, r28	; 61
    5572:	09 94       	ijmp

00005574 <__epilogue_restores__>:
    5574:	2a 88       	ldd	r2, Y+18	; 0x12
    5576:	39 88       	ldd	r3, Y+17	; 0x11
    5578:	48 88       	ldd	r4, Y+16	; 0x10
    557a:	5f 84       	ldd	r5, Y+15	; 0x0f
    557c:	6e 84       	ldd	r6, Y+14	; 0x0e
    557e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5580:	8c 84       	ldd	r8, Y+12	; 0x0c
    5582:	9b 84       	ldd	r9, Y+11	; 0x0b
    5584:	aa 84       	ldd	r10, Y+10	; 0x0a
    5586:	b9 84       	ldd	r11, Y+9	; 0x09
    5588:	c8 84       	ldd	r12, Y+8	; 0x08
    558a:	df 80       	ldd	r13, Y+7	; 0x07
    558c:	ee 80       	ldd	r14, Y+6	; 0x06
    558e:	fd 80       	ldd	r15, Y+5	; 0x05
    5590:	0c 81       	ldd	r16, Y+4	; 0x04
    5592:	1b 81       	ldd	r17, Y+3	; 0x03
    5594:	aa 81       	ldd	r26, Y+2	; 0x02
    5596:	b9 81       	ldd	r27, Y+1	; 0x01
    5598:	ce 0f       	add	r28, r30
    559a:	d1 1d       	adc	r29, r1
    559c:	0f b6       	in	r0, 0x3f	; 63
    559e:	f8 94       	cli
    55a0:	de bf       	out	0x3e, r29	; 62
    55a2:	0f be       	out	0x3f, r0	; 63
    55a4:	cd bf       	out	0x3d, r28	; 61
    55a6:	ed 01       	movw	r28, r26
    55a8:	08 95       	ret

000055aa <_exit>:
    55aa:	f8 94       	cli

000055ac <__stop_program>:
    55ac:	ff cf       	rjmp	.-2      	; 0x55ac <__stop_program>
